
NUCLEO_EXAMPLE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009c30  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000014c  08009e00  08009e00  00019e00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009f4c  08009f4c  000201b4  2**0
                  CONTENTS
  4 .ARM          00000008  08009f4c  08009f4c  00019f4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009f54  08009f54  000201b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009f54  08009f54  00019f54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009f58  08009f58  00019f58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001b4  20000000  08009f5c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000390  200001b4  0800a110  000201b4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000544  0800a110  00020544  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201b4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00021bbd  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004ed9  00000000  00000000  00041da1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001900  00000000  00000000  00046c80  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000015c8  00000000  00000000  00048580  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002c8e3  00000000  00000000  00049b48  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001cdd4  00000000  00000000  0007642b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000fc7af  00000000  00000000  000931ff  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0018f9ae  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000066b8  00000000  00000000  0018fa2c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001b4 	.word	0x200001b4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08009de8 	.word	0x08009de8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001b8 	.word	0x200001b8
 800020c:	08009de8 	.word	0x08009de8

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003fe:	f1a4 0401 	sub.w	r4, r4, #1
 8000402:	d1e9      	bne.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__aeabi_d2uiz>:
 8000a5c:	004a      	lsls	r2, r1, #1
 8000a5e:	d211      	bcs.n	8000a84 <__aeabi_d2uiz+0x28>
 8000a60:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a64:	d211      	bcs.n	8000a8a <__aeabi_d2uiz+0x2e>
 8000a66:	d50d      	bpl.n	8000a84 <__aeabi_d2uiz+0x28>
 8000a68:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a6c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a70:	d40e      	bmi.n	8000a90 <__aeabi_d2uiz+0x34>
 8000a72:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a76:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a7a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a82:	4770      	bx	lr
 8000a84:	f04f 0000 	mov.w	r0, #0
 8000a88:	4770      	bx	lr
 8000a8a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a8e:	d102      	bne.n	8000a96 <__aeabi_d2uiz+0x3a>
 8000a90:	f04f 30ff 	mov.w	r0, #4294967295
 8000a94:	4770      	bx	lr
 8000a96:	f04f 0000 	mov.w	r0, #0
 8000a9a:	4770      	bx	lr

08000a9c <__aeabi_d2f>:
 8000a9c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aa0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000aa4:	bf24      	itt	cs
 8000aa6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000aaa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000aae:	d90d      	bls.n	8000acc <__aeabi_d2f+0x30>
 8000ab0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ab4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ab8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000abc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ac0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ac4:	bf08      	it	eq
 8000ac6:	f020 0001 	biceq.w	r0, r0, #1
 8000aca:	4770      	bx	lr
 8000acc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ad0:	d121      	bne.n	8000b16 <__aeabi_d2f+0x7a>
 8000ad2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ad6:	bfbc      	itt	lt
 8000ad8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000adc:	4770      	bxlt	lr
 8000ade:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ae2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ae6:	f1c2 0218 	rsb	r2, r2, #24
 8000aea:	f1c2 0c20 	rsb	ip, r2, #32
 8000aee:	fa10 f30c 	lsls.w	r3, r0, ip
 8000af2:	fa20 f002 	lsr.w	r0, r0, r2
 8000af6:	bf18      	it	ne
 8000af8:	f040 0001 	orrne.w	r0, r0, #1
 8000afc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b00:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b04:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b08:	ea40 000c 	orr.w	r0, r0, ip
 8000b0c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b10:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b14:	e7cc      	b.n	8000ab0 <__aeabi_d2f+0x14>
 8000b16:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b1a:	d107      	bne.n	8000b2c <__aeabi_d2f+0x90>
 8000b1c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b20:	bf1e      	ittt	ne
 8000b22:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b26:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b2a:	4770      	bxne	lr
 8000b2c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b30:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b34:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b38:	4770      	bx	lr
 8000b3a:	bf00      	nop

08000b3c <__aeabi_uldivmod>:
 8000b3c:	b953      	cbnz	r3, 8000b54 <__aeabi_uldivmod+0x18>
 8000b3e:	b94a      	cbnz	r2, 8000b54 <__aeabi_uldivmod+0x18>
 8000b40:	2900      	cmp	r1, #0
 8000b42:	bf08      	it	eq
 8000b44:	2800      	cmpeq	r0, #0
 8000b46:	bf1c      	itt	ne
 8000b48:	f04f 31ff 	movne.w	r1, #4294967295
 8000b4c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b50:	f000 b972 	b.w	8000e38 <__aeabi_idiv0>
 8000b54:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b58:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b5c:	f000 f806 	bl	8000b6c <__udivmoddi4>
 8000b60:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b64:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b68:	b004      	add	sp, #16
 8000b6a:	4770      	bx	lr

08000b6c <__udivmoddi4>:
 8000b6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b70:	9e08      	ldr	r6, [sp, #32]
 8000b72:	4604      	mov	r4, r0
 8000b74:	4688      	mov	r8, r1
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d14b      	bne.n	8000c12 <__udivmoddi4+0xa6>
 8000b7a:	428a      	cmp	r2, r1
 8000b7c:	4615      	mov	r5, r2
 8000b7e:	d967      	bls.n	8000c50 <__udivmoddi4+0xe4>
 8000b80:	fab2 f282 	clz	r2, r2
 8000b84:	b14a      	cbz	r2, 8000b9a <__udivmoddi4+0x2e>
 8000b86:	f1c2 0720 	rsb	r7, r2, #32
 8000b8a:	fa01 f302 	lsl.w	r3, r1, r2
 8000b8e:	fa20 f707 	lsr.w	r7, r0, r7
 8000b92:	4095      	lsls	r5, r2
 8000b94:	ea47 0803 	orr.w	r8, r7, r3
 8000b98:	4094      	lsls	r4, r2
 8000b9a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b9e:	0c23      	lsrs	r3, r4, #16
 8000ba0:	fbb8 f7fe 	udiv	r7, r8, lr
 8000ba4:	fa1f fc85 	uxth.w	ip, r5
 8000ba8:	fb0e 8817 	mls	r8, lr, r7, r8
 8000bac:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000bb0:	fb07 f10c 	mul.w	r1, r7, ip
 8000bb4:	4299      	cmp	r1, r3
 8000bb6:	d909      	bls.n	8000bcc <__udivmoddi4+0x60>
 8000bb8:	18eb      	adds	r3, r5, r3
 8000bba:	f107 30ff 	add.w	r0, r7, #4294967295
 8000bbe:	f080 811b 	bcs.w	8000df8 <__udivmoddi4+0x28c>
 8000bc2:	4299      	cmp	r1, r3
 8000bc4:	f240 8118 	bls.w	8000df8 <__udivmoddi4+0x28c>
 8000bc8:	3f02      	subs	r7, #2
 8000bca:	442b      	add	r3, r5
 8000bcc:	1a5b      	subs	r3, r3, r1
 8000bce:	b2a4      	uxth	r4, r4
 8000bd0:	fbb3 f0fe 	udiv	r0, r3, lr
 8000bd4:	fb0e 3310 	mls	r3, lr, r0, r3
 8000bd8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000bdc:	fb00 fc0c 	mul.w	ip, r0, ip
 8000be0:	45a4      	cmp	ip, r4
 8000be2:	d909      	bls.n	8000bf8 <__udivmoddi4+0x8c>
 8000be4:	192c      	adds	r4, r5, r4
 8000be6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bea:	f080 8107 	bcs.w	8000dfc <__udivmoddi4+0x290>
 8000bee:	45a4      	cmp	ip, r4
 8000bf0:	f240 8104 	bls.w	8000dfc <__udivmoddi4+0x290>
 8000bf4:	3802      	subs	r0, #2
 8000bf6:	442c      	add	r4, r5
 8000bf8:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000bfc:	eba4 040c 	sub.w	r4, r4, ip
 8000c00:	2700      	movs	r7, #0
 8000c02:	b11e      	cbz	r6, 8000c0c <__udivmoddi4+0xa0>
 8000c04:	40d4      	lsrs	r4, r2
 8000c06:	2300      	movs	r3, #0
 8000c08:	e9c6 4300 	strd	r4, r3, [r6]
 8000c0c:	4639      	mov	r1, r7
 8000c0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c12:	428b      	cmp	r3, r1
 8000c14:	d909      	bls.n	8000c2a <__udivmoddi4+0xbe>
 8000c16:	2e00      	cmp	r6, #0
 8000c18:	f000 80eb 	beq.w	8000df2 <__udivmoddi4+0x286>
 8000c1c:	2700      	movs	r7, #0
 8000c1e:	e9c6 0100 	strd	r0, r1, [r6]
 8000c22:	4638      	mov	r0, r7
 8000c24:	4639      	mov	r1, r7
 8000c26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c2a:	fab3 f783 	clz	r7, r3
 8000c2e:	2f00      	cmp	r7, #0
 8000c30:	d147      	bne.n	8000cc2 <__udivmoddi4+0x156>
 8000c32:	428b      	cmp	r3, r1
 8000c34:	d302      	bcc.n	8000c3c <__udivmoddi4+0xd0>
 8000c36:	4282      	cmp	r2, r0
 8000c38:	f200 80fa 	bhi.w	8000e30 <__udivmoddi4+0x2c4>
 8000c3c:	1a84      	subs	r4, r0, r2
 8000c3e:	eb61 0303 	sbc.w	r3, r1, r3
 8000c42:	2001      	movs	r0, #1
 8000c44:	4698      	mov	r8, r3
 8000c46:	2e00      	cmp	r6, #0
 8000c48:	d0e0      	beq.n	8000c0c <__udivmoddi4+0xa0>
 8000c4a:	e9c6 4800 	strd	r4, r8, [r6]
 8000c4e:	e7dd      	b.n	8000c0c <__udivmoddi4+0xa0>
 8000c50:	b902      	cbnz	r2, 8000c54 <__udivmoddi4+0xe8>
 8000c52:	deff      	udf	#255	; 0xff
 8000c54:	fab2 f282 	clz	r2, r2
 8000c58:	2a00      	cmp	r2, #0
 8000c5a:	f040 808f 	bne.w	8000d7c <__udivmoddi4+0x210>
 8000c5e:	1b49      	subs	r1, r1, r5
 8000c60:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c64:	fa1f f885 	uxth.w	r8, r5
 8000c68:	2701      	movs	r7, #1
 8000c6a:	fbb1 fcfe 	udiv	ip, r1, lr
 8000c6e:	0c23      	lsrs	r3, r4, #16
 8000c70:	fb0e 111c 	mls	r1, lr, ip, r1
 8000c74:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c78:	fb08 f10c 	mul.w	r1, r8, ip
 8000c7c:	4299      	cmp	r1, r3
 8000c7e:	d907      	bls.n	8000c90 <__udivmoddi4+0x124>
 8000c80:	18eb      	adds	r3, r5, r3
 8000c82:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c86:	d202      	bcs.n	8000c8e <__udivmoddi4+0x122>
 8000c88:	4299      	cmp	r1, r3
 8000c8a:	f200 80cd 	bhi.w	8000e28 <__udivmoddi4+0x2bc>
 8000c8e:	4684      	mov	ip, r0
 8000c90:	1a59      	subs	r1, r3, r1
 8000c92:	b2a3      	uxth	r3, r4
 8000c94:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c98:	fb0e 1410 	mls	r4, lr, r0, r1
 8000c9c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000ca0:	fb08 f800 	mul.w	r8, r8, r0
 8000ca4:	45a0      	cmp	r8, r4
 8000ca6:	d907      	bls.n	8000cb8 <__udivmoddi4+0x14c>
 8000ca8:	192c      	adds	r4, r5, r4
 8000caa:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cae:	d202      	bcs.n	8000cb6 <__udivmoddi4+0x14a>
 8000cb0:	45a0      	cmp	r8, r4
 8000cb2:	f200 80b6 	bhi.w	8000e22 <__udivmoddi4+0x2b6>
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	eba4 0408 	sub.w	r4, r4, r8
 8000cbc:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cc0:	e79f      	b.n	8000c02 <__udivmoddi4+0x96>
 8000cc2:	f1c7 0c20 	rsb	ip, r7, #32
 8000cc6:	40bb      	lsls	r3, r7
 8000cc8:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000ccc:	ea4e 0e03 	orr.w	lr, lr, r3
 8000cd0:	fa01 f407 	lsl.w	r4, r1, r7
 8000cd4:	fa20 f50c 	lsr.w	r5, r0, ip
 8000cd8:	fa21 f30c 	lsr.w	r3, r1, ip
 8000cdc:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000ce0:	4325      	orrs	r5, r4
 8000ce2:	fbb3 f9f8 	udiv	r9, r3, r8
 8000ce6:	0c2c      	lsrs	r4, r5, #16
 8000ce8:	fb08 3319 	mls	r3, r8, r9, r3
 8000cec:	fa1f fa8e 	uxth.w	sl, lr
 8000cf0:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000cf4:	fb09 f40a 	mul.w	r4, r9, sl
 8000cf8:	429c      	cmp	r4, r3
 8000cfa:	fa02 f207 	lsl.w	r2, r2, r7
 8000cfe:	fa00 f107 	lsl.w	r1, r0, r7
 8000d02:	d90b      	bls.n	8000d1c <__udivmoddi4+0x1b0>
 8000d04:	eb1e 0303 	adds.w	r3, lr, r3
 8000d08:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d0c:	f080 8087 	bcs.w	8000e1e <__udivmoddi4+0x2b2>
 8000d10:	429c      	cmp	r4, r3
 8000d12:	f240 8084 	bls.w	8000e1e <__udivmoddi4+0x2b2>
 8000d16:	f1a9 0902 	sub.w	r9, r9, #2
 8000d1a:	4473      	add	r3, lr
 8000d1c:	1b1b      	subs	r3, r3, r4
 8000d1e:	b2ad      	uxth	r5, r5
 8000d20:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d24:	fb08 3310 	mls	r3, r8, r0, r3
 8000d28:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000d2c:	fb00 fa0a 	mul.w	sl, r0, sl
 8000d30:	45a2      	cmp	sl, r4
 8000d32:	d908      	bls.n	8000d46 <__udivmoddi4+0x1da>
 8000d34:	eb1e 0404 	adds.w	r4, lr, r4
 8000d38:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d3c:	d26b      	bcs.n	8000e16 <__udivmoddi4+0x2aa>
 8000d3e:	45a2      	cmp	sl, r4
 8000d40:	d969      	bls.n	8000e16 <__udivmoddi4+0x2aa>
 8000d42:	3802      	subs	r0, #2
 8000d44:	4474      	add	r4, lr
 8000d46:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d4a:	fba0 8902 	umull	r8, r9, r0, r2
 8000d4e:	eba4 040a 	sub.w	r4, r4, sl
 8000d52:	454c      	cmp	r4, r9
 8000d54:	46c2      	mov	sl, r8
 8000d56:	464b      	mov	r3, r9
 8000d58:	d354      	bcc.n	8000e04 <__udivmoddi4+0x298>
 8000d5a:	d051      	beq.n	8000e00 <__udivmoddi4+0x294>
 8000d5c:	2e00      	cmp	r6, #0
 8000d5e:	d069      	beq.n	8000e34 <__udivmoddi4+0x2c8>
 8000d60:	ebb1 050a 	subs.w	r5, r1, sl
 8000d64:	eb64 0403 	sbc.w	r4, r4, r3
 8000d68:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000d6c:	40fd      	lsrs	r5, r7
 8000d6e:	40fc      	lsrs	r4, r7
 8000d70:	ea4c 0505 	orr.w	r5, ip, r5
 8000d74:	e9c6 5400 	strd	r5, r4, [r6]
 8000d78:	2700      	movs	r7, #0
 8000d7a:	e747      	b.n	8000c0c <__udivmoddi4+0xa0>
 8000d7c:	f1c2 0320 	rsb	r3, r2, #32
 8000d80:	fa20 f703 	lsr.w	r7, r0, r3
 8000d84:	4095      	lsls	r5, r2
 8000d86:	fa01 f002 	lsl.w	r0, r1, r2
 8000d8a:	fa21 f303 	lsr.w	r3, r1, r3
 8000d8e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d92:	4338      	orrs	r0, r7
 8000d94:	0c01      	lsrs	r1, r0, #16
 8000d96:	fbb3 f7fe 	udiv	r7, r3, lr
 8000d9a:	fa1f f885 	uxth.w	r8, r5
 8000d9e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000da2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000da6:	fb07 f308 	mul.w	r3, r7, r8
 8000daa:	428b      	cmp	r3, r1
 8000dac:	fa04 f402 	lsl.w	r4, r4, r2
 8000db0:	d907      	bls.n	8000dc2 <__udivmoddi4+0x256>
 8000db2:	1869      	adds	r1, r5, r1
 8000db4:	f107 3cff 	add.w	ip, r7, #4294967295
 8000db8:	d22f      	bcs.n	8000e1a <__udivmoddi4+0x2ae>
 8000dba:	428b      	cmp	r3, r1
 8000dbc:	d92d      	bls.n	8000e1a <__udivmoddi4+0x2ae>
 8000dbe:	3f02      	subs	r7, #2
 8000dc0:	4429      	add	r1, r5
 8000dc2:	1acb      	subs	r3, r1, r3
 8000dc4:	b281      	uxth	r1, r0
 8000dc6:	fbb3 f0fe 	udiv	r0, r3, lr
 8000dca:	fb0e 3310 	mls	r3, lr, r0, r3
 8000dce:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dd2:	fb00 f308 	mul.w	r3, r0, r8
 8000dd6:	428b      	cmp	r3, r1
 8000dd8:	d907      	bls.n	8000dea <__udivmoddi4+0x27e>
 8000dda:	1869      	adds	r1, r5, r1
 8000ddc:	f100 3cff 	add.w	ip, r0, #4294967295
 8000de0:	d217      	bcs.n	8000e12 <__udivmoddi4+0x2a6>
 8000de2:	428b      	cmp	r3, r1
 8000de4:	d915      	bls.n	8000e12 <__udivmoddi4+0x2a6>
 8000de6:	3802      	subs	r0, #2
 8000de8:	4429      	add	r1, r5
 8000dea:	1ac9      	subs	r1, r1, r3
 8000dec:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000df0:	e73b      	b.n	8000c6a <__udivmoddi4+0xfe>
 8000df2:	4637      	mov	r7, r6
 8000df4:	4630      	mov	r0, r6
 8000df6:	e709      	b.n	8000c0c <__udivmoddi4+0xa0>
 8000df8:	4607      	mov	r7, r0
 8000dfa:	e6e7      	b.n	8000bcc <__udivmoddi4+0x60>
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	e6fb      	b.n	8000bf8 <__udivmoddi4+0x8c>
 8000e00:	4541      	cmp	r1, r8
 8000e02:	d2ab      	bcs.n	8000d5c <__udivmoddi4+0x1f0>
 8000e04:	ebb8 0a02 	subs.w	sl, r8, r2
 8000e08:	eb69 020e 	sbc.w	r2, r9, lr
 8000e0c:	3801      	subs	r0, #1
 8000e0e:	4613      	mov	r3, r2
 8000e10:	e7a4      	b.n	8000d5c <__udivmoddi4+0x1f0>
 8000e12:	4660      	mov	r0, ip
 8000e14:	e7e9      	b.n	8000dea <__udivmoddi4+0x27e>
 8000e16:	4618      	mov	r0, r3
 8000e18:	e795      	b.n	8000d46 <__udivmoddi4+0x1da>
 8000e1a:	4667      	mov	r7, ip
 8000e1c:	e7d1      	b.n	8000dc2 <__udivmoddi4+0x256>
 8000e1e:	4681      	mov	r9, r0
 8000e20:	e77c      	b.n	8000d1c <__udivmoddi4+0x1b0>
 8000e22:	3802      	subs	r0, #2
 8000e24:	442c      	add	r4, r5
 8000e26:	e747      	b.n	8000cb8 <__udivmoddi4+0x14c>
 8000e28:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e2c:	442b      	add	r3, r5
 8000e2e:	e72f      	b.n	8000c90 <__udivmoddi4+0x124>
 8000e30:	4638      	mov	r0, r7
 8000e32:	e708      	b.n	8000c46 <__udivmoddi4+0xda>
 8000e34:	4637      	mov	r7, r6
 8000e36:	e6e9      	b.n	8000c0c <__udivmoddi4+0xa0>

08000e38 <__aeabi_idiv0>:
 8000e38:	4770      	bx	lr
 8000e3a:	bf00      	nop

08000e3c <BH1750_Init>:
 *       Uses blocking mode I2C transmitting routine.
 * @param[in] hbh1750 BH1750 digital light sensor handler 
 * @return None
 */
void BH1750_Init(BH1750_HandleTypeDef* hbh1750)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b086      	sub	sp, #24
 8000e40:	af02      	add	r7, sp, #8
 8000e42:	6078      	str	r0, [r7, #4]
  uint8_t command;

  command = BH1750_POWER_ON;
 8000e44:	2301      	movs	r3, #1
 8000e46:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(hbh1750->I2C, hbh1750->Address, &command, BH1750_COMMAND_SIZE, hbh1750->Timeout);
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	6818      	ldr	r0, [r3, #0]
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	791b      	ldrb	r3, [r3, #4]
 8000e50:	b299      	uxth	r1, r3
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	689b      	ldr	r3, [r3, #8]
 8000e56:	f107 020f 	add.w	r2, r7, #15
 8000e5a:	9300      	str	r3, [sp, #0]
 8000e5c:	2301      	movs	r3, #1
 8000e5e:	f004 f9bb 	bl	80051d8 <HAL_I2C_Master_Transmit>

  command = BH1750_CONTINOUS_H_RES_MODE;
 8000e62:	2310      	movs	r3, #16
 8000e64:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(hbh1750->I2C, hbh1750->Address, &command, BH1750_COMMAND_SIZE, hbh1750->Timeout);
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	6818      	ldr	r0, [r3, #0]
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	791b      	ldrb	r3, [r3, #4]
 8000e6e:	b299      	uxth	r1, r3
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	689b      	ldr	r3, [r3, #8]
 8000e74:	f107 020f 	add.w	r2, r7, #15
 8000e78:	9300      	str	r3, [sp, #0]
 8000e7a:	2301      	movs	r3, #1
 8000e7c:	f004 f9ac 	bl	80051d8 <HAL_I2C_Master_Transmit>
}
 8000e80:	bf00      	nop
 8000e82:	3710      	adds	r7, #16
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bd80      	pop	{r7, pc}

08000e88 <BH1750_ReadLux>:
 * @note Uses blocking mode I2C receiving routine.
 * @param[in] hbh1750 BH1750 digital light sensor handler 
 * @return Measurement result in lux [lx]
 */
float BH1750_ReadLux(BH1750_HandleTypeDef* hbh1750)
{
 8000e88:	b590      	push	{r4, r7, lr}
 8000e8a:	b087      	sub	sp, #28
 8000e8c:	af02      	add	r7, sp, #8
 8000e8e:	6078      	str	r0, [r7, #4]
  uint8_t rxarray[BH1750_DATA_SIZE];

  HAL_I2C_Master_Receive(hbh1750->I2C, hbh1750->Address, rxarray, BH1750_DATA_SIZE, hbh1750->Timeout);
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	6818      	ldr	r0, [r3, #0]
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	791b      	ldrb	r3, [r3, #4]
 8000e98:	b299      	uxth	r1, r3
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	689b      	ldr	r3, [r3, #8]
 8000e9e:	f107 020c 	add.w	r2, r7, #12
 8000ea2:	9300      	str	r3, [sp, #0]
 8000ea4:	2302      	movs	r3, #2
 8000ea6:	f004 fa8b 	bl	80053c0 <HAL_I2C_Master_Receive>

  return ((rxarray[BH1750_DATA_MSB]<<8) | rxarray[BH1750_DATA_LSB]) / 1.2; // @see BH1750 technical note p. 10;
 8000eaa:	7b3b      	ldrb	r3, [r7, #12]
 8000eac:	021b      	lsls	r3, r3, #8
 8000eae:	7b7a      	ldrb	r2, [r7, #13]
 8000eb0:	4313      	orrs	r3, r2
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	f7ff fb56 	bl	8000564 <__aeabi_i2d>
 8000eb8:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 8000ebc:	4b08      	ldr	r3, [pc, #32]	; (8000ee0 <BH1750_ReadLux+0x58>)
 8000ebe:	f7ff fce5 	bl	800088c <__aeabi_ddiv>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	460c      	mov	r4, r1
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	4621      	mov	r1, r4
 8000eca:	f7ff fde7 	bl	8000a9c <__aeabi_d2f>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	ee07 3a90 	vmov	s15, r3
}
 8000ed4:	eeb0 0a67 	vmov.f32	s0, s15
 8000ed8:	3714      	adds	r7, #20
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd90      	pop	{r4, r7, pc}
 8000ede:	bf00      	nop
 8000ee0:	3ff33333 	.word	0x3ff33333

08000ee4 <bmp280_get_regs>:
/*!
 * @brief This API reads the data from the given register address of the
 * sensor.
 */
int8_t bmp280_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint8_t len, const struct bmp280_dev *dev)
{
 8000ee4:	b590      	push	{r4, r7, lr}
 8000ee6:	b087      	sub	sp, #28
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	60b9      	str	r1, [r7, #8]
 8000eec:	607b      	str	r3, [r7, #4]
 8000eee:	4603      	mov	r3, r0
 8000ef0:	73fb      	strb	r3, [r7, #15]
 8000ef2:	4613      	mov	r3, r2
 8000ef4:	73bb      	strb	r3, [r7, #14]
    int8_t rslt;

    rslt = null_ptr_check(dev);
 8000ef6:	6878      	ldr	r0, [r7, #4]
 8000ef8:	f000 fa5e 	bl	80013b8 <null_ptr_check>
 8000efc:	4603      	mov	r3, r0
 8000efe:	75fb      	strb	r3, [r7, #23]
    if ((rslt == BMP280_OK) && (reg_data != NULL))
 8000f00:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d11c      	bne.n	8000f42 <bmp280_get_regs+0x5e>
 8000f08:	68bb      	ldr	r3, [r7, #8]
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d019      	beq.n	8000f42 <bmp280_get_regs+0x5e>
    {
        /* Mask the register address' MSB if interface selected is SPI */
        if (dev->intf == BMP280_SPI_INTF)
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	789b      	ldrb	r3, [r3, #2]
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d103      	bne.n	8000f1e <bmp280_get_regs+0x3a>
        {
            reg_addr = reg_addr | 0x80;
 8000f16:	7bfb      	ldrb	r3, [r7, #15]
 8000f18:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000f1c:	73fb      	strb	r3, [r7, #15]
        }
        rslt = dev->read(dev->dev_id, reg_addr, reg_data, len);
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	685c      	ldr	r4, [r3, #4]
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	7858      	ldrb	r0, [r3, #1]
 8000f26:	7bbb      	ldrb	r3, [r7, #14]
 8000f28:	b29b      	uxth	r3, r3
 8000f2a:	7bf9      	ldrb	r1, [r7, #15]
 8000f2c:	68ba      	ldr	r2, [r7, #8]
 8000f2e:	47a0      	blx	r4
 8000f30:	4603      	mov	r3, r0
 8000f32:	75fb      	strb	r3, [r7, #23]

        /* Check for communication error and mask with an internal error code */
        if (rslt != BMP280_OK)
 8000f34:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d004      	beq.n	8000f46 <bmp280_get_regs+0x62>
        {
            rslt = BMP280_E_COMM_FAIL;
 8000f3c:	23fc      	movs	r3, #252	; 0xfc
 8000f3e:	75fb      	strb	r3, [r7, #23]
        if (rslt != BMP280_OK)
 8000f40:	e001      	b.n	8000f46 <bmp280_get_regs+0x62>
        }
    }
    else
    {
        rslt = BMP280_E_NULL_PTR;
 8000f42:	23ff      	movs	r3, #255	; 0xff
 8000f44:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8000f46:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	371c      	adds	r7, #28
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd90      	pop	{r4, r7, pc}

08000f52 <bmp280_set_regs>:
/*!
 * @brief This API writes the given data to the register addresses
 * of the sensor.
 */
int8_t bmp280_set_regs(uint8_t *reg_addr, const uint8_t *reg_data, uint8_t len, const struct bmp280_dev *dev)
{
 8000f52:	b590      	push	{r4, r7, lr}
 8000f54:	b089      	sub	sp, #36	; 0x24
 8000f56:	af00      	add	r7, sp, #0
 8000f58:	60f8      	str	r0, [r7, #12]
 8000f5a:	60b9      	str	r1, [r7, #8]
 8000f5c:	603b      	str	r3, [r7, #0]
 8000f5e:	4613      	mov	r3, r2
 8000f60:	71fb      	strb	r3, [r7, #7]
    int8_t rslt;
    uint8_t temp_buff[8]; /* Typically not to write more than 4 registers */
    uint16_t temp_len;
    uint8_t reg_addr_cnt;

    if (len > 4)
 8000f62:	79fb      	ldrb	r3, [r7, #7]
 8000f64:	2b04      	cmp	r3, #4
 8000f66:	d901      	bls.n	8000f6c <bmp280_set_regs+0x1a>
    {
        len = 4;
 8000f68:	2304      	movs	r3, #4
 8000f6a:	71fb      	strb	r3, [r7, #7]
    }
    rslt = null_ptr_check(dev);
 8000f6c:	6838      	ldr	r0, [r7, #0]
 8000f6e:	f000 fa23 	bl	80013b8 <null_ptr_check>
 8000f72:	4603      	mov	r3, r0
 8000f74:	77fb      	strb	r3, [r7, #31]
    if ((rslt == BMP280_OK) && (reg_addr != NULL) && (reg_data != NULL))
 8000f76:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d14d      	bne.n	800101a <bmp280_set_regs+0xc8>
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d04a      	beq.n	800101a <bmp280_set_regs+0xc8>
 8000f84:	68bb      	ldr	r3, [r7, #8]
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d047      	beq.n	800101a <bmp280_set_regs+0xc8>
    {
        if (len != 0)
 8000f8a:	79fb      	ldrb	r3, [r7, #7]
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d041      	beq.n	8001014 <bmp280_set_regs+0xc2>
        {
            temp_buff[0] = reg_data[0];
 8000f90:	68bb      	ldr	r3, [r7, #8]
 8000f92:	781b      	ldrb	r3, [r3, #0]
 8000f94:	743b      	strb	r3, [r7, #16]

            /* Mask the register address' MSB if interface selected is SPI */
            if (dev->intf == BMP280_SPI_INTF)
 8000f96:	683b      	ldr	r3, [r7, #0]
 8000f98:	789b      	ldrb	r3, [r3, #2]
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d114      	bne.n	8000fc8 <bmp280_set_regs+0x76>
            {
                /* Converting all the reg address into proper SPI write address
                 * i.e making MSB(R/`W) bit 0
                 */
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	76fb      	strb	r3, [r7, #27]
 8000fa2:	e00d      	b.n	8000fc0 <bmp280_set_regs+0x6e>
                {
                    reg_addr[reg_addr_cnt] = reg_addr[reg_addr_cnt] & 0x7F;
 8000fa4:	7efb      	ldrb	r3, [r7, #27]
 8000fa6:	68fa      	ldr	r2, [r7, #12]
 8000fa8:	4413      	add	r3, r2
 8000faa:	781a      	ldrb	r2, [r3, #0]
 8000fac:	7efb      	ldrb	r3, [r7, #27]
 8000fae:	68f9      	ldr	r1, [r7, #12]
 8000fb0:	440b      	add	r3, r1
 8000fb2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8000fb6:	b2d2      	uxtb	r2, r2
 8000fb8:	701a      	strb	r2, [r3, #0]
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 8000fba:	7efb      	ldrb	r3, [r7, #27]
 8000fbc:	3301      	adds	r3, #1
 8000fbe:	76fb      	strb	r3, [r7, #27]
 8000fc0:	7efa      	ldrb	r2, [r7, #27]
 8000fc2:	79fb      	ldrb	r3, [r7, #7]
 8000fc4:	429a      	cmp	r2, r3
 8000fc6:	d3ed      	bcc.n	8000fa4 <bmp280_set_regs+0x52>
                }
            }

            /* Burst write mode */
            if (len > 1)
 8000fc8:	79fb      	ldrb	r3, [r7, #7]
 8000fca:	2b01      	cmp	r3, #1
 8000fcc:	d90d      	bls.n	8000fea <bmp280_set_regs+0x98>
            {
                /* Interleave register address w.r.t data for burst write*/
                interleave_data(reg_addr, temp_buff, reg_data, len);
 8000fce:	79fb      	ldrb	r3, [r7, #7]
 8000fd0:	f107 0110 	add.w	r1, r7, #16
 8000fd4:	68ba      	ldr	r2, [r7, #8]
 8000fd6:	68f8      	ldr	r0, [r7, #12]
 8000fd8:	f000 fa0e 	bl	80013f8 <interleave_data>
                temp_len = ((len * 2) - 1);
 8000fdc:	79fb      	ldrb	r3, [r7, #7]
 8000fde:	b29b      	uxth	r3, r3
 8000fe0:	005b      	lsls	r3, r3, #1
 8000fe2:	b29b      	uxth	r3, r3
 8000fe4:	3b01      	subs	r3, #1
 8000fe6:	83bb      	strh	r3, [r7, #28]
 8000fe8:	e001      	b.n	8000fee <bmp280_set_regs+0x9c>
            }
            else
            {
                temp_len = len;
 8000fea:	79fb      	ldrb	r3, [r7, #7]
 8000fec:	83bb      	strh	r3, [r7, #28]
            }
            rslt = dev->write(dev->dev_id, reg_addr[0], temp_buff, temp_len);
 8000fee:	683b      	ldr	r3, [r7, #0]
 8000ff0:	689c      	ldr	r4, [r3, #8]
 8000ff2:	683b      	ldr	r3, [r7, #0]
 8000ff4:	7858      	ldrb	r0, [r3, #1]
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	7819      	ldrb	r1, [r3, #0]
 8000ffa:	8bbb      	ldrh	r3, [r7, #28]
 8000ffc:	f107 0210 	add.w	r2, r7, #16
 8001000:	47a0      	blx	r4
 8001002:	4603      	mov	r3, r0
 8001004:	77fb      	strb	r3, [r7, #31]

            /* Check for communication error and mask with an internal error code */
            if (rslt != BMP280_OK)
 8001006:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800100a:	2b00      	cmp	r3, #0
 800100c:	d008      	beq.n	8001020 <bmp280_set_regs+0xce>
            {
                rslt = BMP280_E_COMM_FAIL;
 800100e:	23fc      	movs	r3, #252	; 0xfc
 8001010:	77fb      	strb	r3, [r7, #31]
        if (len != 0)
 8001012:	e005      	b.n	8001020 <bmp280_set_regs+0xce>
            }
        }
        else
        {
            rslt = BMP280_E_INVALID_LEN;
 8001014:	23fd      	movs	r3, #253	; 0xfd
 8001016:	77fb      	strb	r3, [r7, #31]
        if (len != 0)
 8001018:	e002      	b.n	8001020 <bmp280_set_regs+0xce>
        }
    }
    else
    {
        rslt = BMP280_E_NULL_PTR;
 800101a:	23ff      	movs	r3, #255	; 0xff
 800101c:	77fb      	strb	r3, [r7, #31]
 800101e:	e000      	b.n	8001022 <bmp280_set_regs+0xd0>
        if (len != 0)
 8001020:	bf00      	nop
    }

    return rslt;
 8001022:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8001026:	4618      	mov	r0, r3
 8001028:	3724      	adds	r7, #36	; 0x24
 800102a:	46bd      	mov	sp, r7
 800102c:	bd90      	pop	{r4, r7, pc}

0800102e <bmp280_soft_reset>:

/*!
 * @brief This API triggers the soft reset of the sensor.
 */
int8_t bmp280_soft_reset(const struct bmp280_dev *dev)
{
 800102e:	b580      	push	{r7, lr}
 8001030:	b084      	sub	sp, #16
 8001032:	af00      	add	r7, sp, #0
 8001034:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BMP280_SOFT_RESET_ADDR;
 8001036:	23e0      	movs	r3, #224	; 0xe0
 8001038:	73bb      	strb	r3, [r7, #14]
    uint8_t soft_rst_cmd = BMP280_SOFT_RESET_CMD;
 800103a:	23b6      	movs	r3, #182	; 0xb6
 800103c:	737b      	strb	r3, [r7, #13]

    rslt = null_ptr_check(dev);
 800103e:	6878      	ldr	r0, [r7, #4]
 8001040:	f000 f9ba 	bl	80013b8 <null_ptr_check>
 8001044:	4603      	mov	r3, r0
 8001046:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMP280_OK)
 8001048:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800104c:	2b00      	cmp	r3, #0
 800104e:	d10d      	bne.n	800106c <bmp280_soft_reset+0x3e>
    {
        rslt = bmp280_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
 8001050:	f107 010d 	add.w	r1, r7, #13
 8001054:	f107 000e 	add.w	r0, r7, #14
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	2201      	movs	r2, #1
 800105c:	f7ff ff79 	bl	8000f52 <bmp280_set_regs>
 8001060:	4603      	mov	r3, r0
 8001062:	73fb      	strb	r3, [r7, #15]

        /* As per the datasheet, startup time is 2 ms. */
        dev->delay_ms(2);
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	68db      	ldr	r3, [r3, #12]
 8001068:	2002      	movs	r0, #2
 800106a:	4798      	blx	r3
    }

    return rslt;
 800106c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001070:	4618      	mov	r0, r3
 8001072:	3710      	adds	r7, #16
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}

08001078 <bmp280_init>:
/*!
 * @brief This API is the entry point.
 * It reads the chip-id and calibration data from the sensor.
 */
int8_t bmp280_init(struct bmp280_dev *dev)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b084      	sub	sp, #16
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    /* Maximum number of tries before timeout */
    uint8_t try_count = 5;
 8001080:	2305      	movs	r3, #5
 8001082:	73bb      	strb	r3, [r7, #14]

    rslt = null_ptr_check(dev);
 8001084:	6878      	ldr	r0, [r7, #4]
 8001086:	f000 f997 	bl	80013b8 <null_ptr_check>
 800108a:	4603      	mov	r3, r0
 800108c:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMP280_OK)
 800108e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001092:	2b00      	cmp	r3, #0
 8001094:	d150      	bne.n	8001138 <bmp280_init+0xc0>
    {
        while (try_count)
 8001096:	e02d      	b.n	80010f4 <bmp280_init+0x7c>
        {
            rslt = bmp280_get_regs(BMP280_CHIP_ID_ADDR, &dev->chip_id, 1, dev);
 8001098:	6879      	ldr	r1, [r7, #4]
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	2201      	movs	r2, #1
 800109e:	20d0      	movs	r0, #208	; 0xd0
 80010a0:	f7ff ff20 	bl	8000ee4 <bmp280_get_regs>
 80010a4:	4603      	mov	r3, r0
 80010a6:	73fb      	strb	r3, [r7, #15]

            /* Check for chip id validity */
            if ((rslt == BMP280_OK) &&
 80010a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d11a      	bne.n	80010e6 <bmp280_init+0x6e>
                (dev->chip_id == BMP280_CHIP_ID1 || dev->chip_id == BMP280_CHIP_ID2 || dev->chip_id == BMP280_CHIP_ID3))
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	781b      	ldrb	r3, [r3, #0]
            if ((rslt == BMP280_OK) &&
 80010b4:	2b56      	cmp	r3, #86	; 0x56
 80010b6:	d007      	beq.n	80010c8 <bmp280_init+0x50>
                (dev->chip_id == BMP280_CHIP_ID1 || dev->chip_id == BMP280_CHIP_ID2 || dev->chip_id == BMP280_CHIP_ID3))
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	781b      	ldrb	r3, [r3, #0]
 80010bc:	2b57      	cmp	r3, #87	; 0x57
 80010be:	d003      	beq.n	80010c8 <bmp280_init+0x50>
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	781b      	ldrb	r3, [r3, #0]
 80010c4:	2b58      	cmp	r3, #88	; 0x58
 80010c6:	d10e      	bne.n	80010e6 <bmp280_init+0x6e>
            {
                rslt = bmp280_soft_reset(dev);
 80010c8:	6878      	ldr	r0, [r7, #4]
 80010ca:	f7ff ffb0 	bl	800102e <bmp280_soft_reset>
 80010ce:	4603      	mov	r3, r0
 80010d0:	73fb      	strb	r3, [r7, #15]
                if (rslt == BMP280_OK)
 80010d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d110      	bne.n	80010fc <bmp280_init+0x84>
                {
                    rslt = get_calib_param(dev);
 80010da:	6878      	ldr	r0, [r7, #4]
 80010dc:	f000 f9b7 	bl	800144e <get_calib_param>
 80010e0:	4603      	mov	r3, r0
 80010e2:	73fb      	strb	r3, [r7, #15]
                }
                break;
 80010e4:	e00a      	b.n	80010fc <bmp280_init+0x84>
            }

            /* Wait for 10 ms */
            dev->delay_ms(10);
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	68db      	ldr	r3, [r3, #12]
 80010ea:	200a      	movs	r0, #10
 80010ec:	4798      	blx	r3
            --try_count;
 80010ee:	7bbb      	ldrb	r3, [r7, #14]
 80010f0:	3b01      	subs	r3, #1
 80010f2:	73bb      	strb	r3, [r7, #14]
        while (try_count)
 80010f4:	7bbb      	ldrb	r3, [r7, #14]
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d1ce      	bne.n	8001098 <bmp280_init+0x20>
 80010fa:	e000      	b.n	80010fe <bmp280_init+0x86>
                break;
 80010fc:	bf00      	nop
        }

        /* Chip id check failed, and timed out */
        if (!try_count)
 80010fe:	7bbb      	ldrb	r3, [r7, #14]
 8001100:	2b00      	cmp	r3, #0
 8001102:	d101      	bne.n	8001108 <bmp280_init+0x90>
        {
            rslt = BMP280_E_DEV_NOT_FOUND;
 8001104:	23fe      	movs	r3, #254	; 0xfe
 8001106:	73fb      	strb	r3, [r7, #15]
        }
        if (rslt == BMP280_OK)
 8001108:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800110c:	2b00      	cmp	r3, #0
 800110e:	d113      	bne.n	8001138 <bmp280_init+0xc0>
        {
            /* Set values to default */
            dev->conf.filter = BMP280_FILTER_OFF;
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	2200      	movs	r2, #0
 8001114:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
            dev->conf.os_pres = BMP280_OS_NONE;
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	2200      	movs	r2, #0
 800111c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
            dev->conf.os_temp = BMP280_OS_NONE;
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	2200      	movs	r2, #0
 8001124:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
            dev->conf.odr = BMP280_ODR_0_5_MS;
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	2200      	movs	r2, #0
 800112c:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
            dev->conf.spi3w_en = BMP280_SPI3_WIRE_DISABLE;
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	2200      	movs	r2, #0
 8001134:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        }
    }

    return rslt;
 8001138:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800113c:	4618      	mov	r0, r3
 800113e:	3710      	adds	r7, #16
 8001140:	46bd      	mov	sp, r7
 8001142:	bd80      	pop	{r7, pc}

08001144 <bmp280_get_config>:
 * register. It gives the currently set temperature and pressure over-sampling
 * configuration, power mode configuration, sleep duration and
 * IIR filter coefficient.
 */
int8_t bmp280_get_config(struct bmp280_config *conf, struct bmp280_dev *dev)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b084      	sub	sp, #16
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
 800114c:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t temp[2] = { 0, 0 };
 800114e:	2300      	movs	r3, #0
 8001150:	733b      	strb	r3, [r7, #12]
 8001152:	2300      	movs	r3, #0
 8001154:	737b      	strb	r3, [r7, #13]

    rslt = null_ptr_check(dev);
 8001156:	6838      	ldr	r0, [r7, #0]
 8001158:	f000 f92e 	bl	80013b8 <null_ptr_check>
 800115c:	4603      	mov	r3, r0
 800115e:	73fb      	strb	r3, [r7, #15]
    if ((rslt == BMP280_OK) && (conf != NULL))
 8001160:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001164:	2b00      	cmp	r3, #0
 8001166:	d137      	bne.n	80011d8 <bmp280_get_config+0x94>
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	2b00      	cmp	r3, #0
 800116c:	d034      	beq.n	80011d8 <bmp280_get_config+0x94>
    {
        rslt = bmp280_get_regs(BMP280_CTRL_MEAS_ADDR, temp, 2, dev);
 800116e:	f107 010c 	add.w	r1, r7, #12
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	2202      	movs	r2, #2
 8001176:	20f4      	movs	r0, #244	; 0xf4
 8001178:	f7ff feb4 	bl	8000ee4 <bmp280_get_regs>
 800117c:	4603      	mov	r3, r0
 800117e:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMP280_OK)
 8001180:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001184:	2b00      	cmp	r3, #0
 8001186:	d129      	bne.n	80011dc <bmp280_get_config+0x98>
        {
            conf->os_temp = BMP280_GET_BITS(BMP280_OS_TEMP, temp[0]);
 8001188:	7b3b      	ldrb	r3, [r7, #12]
 800118a:	095b      	lsrs	r3, r3, #5
 800118c:	b2da      	uxtb	r2, r3
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	701a      	strb	r2, [r3, #0]
            conf->os_pres = BMP280_GET_BITS(BMP280_OS_PRES, temp[0]);
 8001192:	7b3b      	ldrb	r3, [r7, #12]
 8001194:	109b      	asrs	r3, r3, #2
 8001196:	b2db      	uxtb	r3, r3
 8001198:	f003 0307 	and.w	r3, r3, #7
 800119c:	b2da      	uxtb	r2, r3
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	705a      	strb	r2, [r3, #1]
            conf->odr = BMP280_GET_BITS(BMP280_STANDBY_DURN, temp[1]);
 80011a2:	7b7b      	ldrb	r3, [r7, #13]
 80011a4:	095b      	lsrs	r3, r3, #5
 80011a6:	b2da      	uxtb	r2, r3
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	709a      	strb	r2, [r3, #2]
            conf->filter = BMP280_GET_BITS(BMP280_FILTER, temp[1]);
 80011ac:	7b7b      	ldrb	r3, [r7, #13]
 80011ae:	109b      	asrs	r3, r3, #2
 80011b0:	b2db      	uxtb	r3, r3
 80011b2:	f003 0307 	and.w	r3, r3, #7
 80011b6:	b2da      	uxtb	r2, r3
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	70da      	strb	r2, [r3, #3]
            conf->spi3w_en = BMP280_GET_BITS_POS_0(BMP280_SPI3_ENABLE, temp[1]);
 80011bc:	7b7b      	ldrb	r3, [r7, #13]
 80011be:	f003 0301 	and.w	r3, r3, #1
 80011c2:	b2da      	uxtb	r2, r3
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	711a      	strb	r2, [r3, #4]
            dev->conf = *conf;
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	687a      	ldr	r2, [r7, #4]
 80011cc:	332c      	adds	r3, #44	; 0x2c
 80011ce:	6810      	ldr	r0, [r2, #0]
 80011d0:	6018      	str	r0, [r3, #0]
 80011d2:	7912      	ldrb	r2, [r2, #4]
 80011d4:	711a      	strb	r2, [r3, #4]
        if (rslt == BMP280_OK)
 80011d6:	e001      	b.n	80011dc <bmp280_get_config+0x98>
        }
    }
    else
    {
        rslt = BMP280_E_NULL_PTR;
 80011d8:	23ff      	movs	r3, #255	; 0xff
 80011da:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80011dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80011e0:	4618      	mov	r0, r3
 80011e2:	3710      	adds	r7, #16
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}

080011e8 <bmp280_set_config>:
 * @brief This API writes the data to the ctrl_meas register and config register.
 * It sets the temperature and pressure over-sampling configuration,
 * power mode configuration, sleep duration and IIR filter coefficient.
 */
int8_t bmp280_set_config(const struct bmp280_config *conf, struct bmp280_dev *dev)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b082      	sub	sp, #8
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
 80011f0:	6039      	str	r1, [r7, #0]
    return conf_sensor(BMP280_SLEEP_MODE, conf, dev);
 80011f2:	683a      	ldr	r2, [r7, #0]
 80011f4:	6879      	ldr	r1, [r7, #4]
 80011f6:	2000      	movs	r0, #0
 80011f8:	f000 f9c6 	bl	8001588 <conf_sensor>
 80011fc:	4603      	mov	r3, r0
}
 80011fe:	4618      	mov	r0, r3
 8001200:	3708      	adds	r7, #8
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}

08001206 <bmp280_set_power_mode>:

/*!
 * @brief This API writes the power mode.
 */
int8_t bmp280_set_power_mode(uint8_t mode, struct bmp280_dev *dev)
{
 8001206:	b580      	push	{r7, lr}
 8001208:	b084      	sub	sp, #16
 800120a:	af00      	add	r7, sp, #0
 800120c:	4603      	mov	r3, r0
 800120e:	6039      	str	r1, [r7, #0]
 8001210:	71fb      	strb	r3, [r7, #7]
    int8_t rslt;

    rslt = null_ptr_check(dev);
 8001212:	6838      	ldr	r0, [r7, #0]
 8001214:	f000 f8d0 	bl	80013b8 <null_ptr_check>
 8001218:	4603      	mov	r3, r0
 800121a:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMP280_OK)
 800121c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001220:	2b00      	cmp	r3, #0
 8001222:	d109      	bne.n	8001238 <bmp280_set_power_mode+0x32>
    {
        rslt = conf_sensor(mode, &dev->conf, dev);
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	f103 012c 	add.w	r1, r3, #44	; 0x2c
 800122a:	79fb      	ldrb	r3, [r7, #7]
 800122c:	683a      	ldr	r2, [r7, #0]
 800122e:	4618      	mov	r0, r3
 8001230:	f000 f9aa 	bl	8001588 <conf_sensor>
 8001234:	4603      	mov	r3, r0
 8001236:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001238:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800123c:	4618      	mov	r0, r3
 800123e:	3710      	adds	r7, #16
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}

08001244 <bmp280_get_uncomp_data>:
/*!
 * @brief This API reads the temperature and pressure data registers.
 * It gives the raw temperature and pressure data .
 */
int8_t bmp280_get_uncomp_data(struct bmp280_uncomp_data *uncomp_data, const struct bmp280_dev *dev)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b084      	sub	sp, #16
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
 800124c:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t temp[6] = { 0 };
 800124e:	f107 0308 	add.w	r3, r7, #8
 8001252:	2200      	movs	r2, #0
 8001254:	601a      	str	r2, [r3, #0]
 8001256:	809a      	strh	r2, [r3, #4]

    rslt = null_ptr_check(dev);
 8001258:	6838      	ldr	r0, [r7, #0]
 800125a:	f000 f8ad 	bl	80013b8 <null_ptr_check>
 800125e:	4603      	mov	r3, r0
 8001260:	73fb      	strb	r3, [r7, #15]
    if ((rslt == BMP280_OK) && (uncomp_data != NULL))
 8001262:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001266:	2b00      	cmp	r3, #0
 8001268:	d133      	bne.n	80012d2 <bmp280_get_uncomp_data+0x8e>
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	2b00      	cmp	r3, #0
 800126e:	d030      	beq.n	80012d2 <bmp280_get_uncomp_data+0x8e>
    {
        rslt = bmp280_get_regs(BMP280_PRES_MSB_ADDR, temp, 6, dev);
 8001270:	f107 0108 	add.w	r1, r7, #8
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	2206      	movs	r2, #6
 8001278:	20f7      	movs	r0, #247	; 0xf7
 800127a:	f7ff fe33 	bl	8000ee4 <bmp280_get_regs>
 800127e:	4603      	mov	r3, r0
 8001280:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMP280_OK)
 8001282:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001286:	2b00      	cmp	r3, #0
 8001288:	d120      	bne.n	80012cc <bmp280_get_uncomp_data+0x88>
        {
            uncomp_data->uncomp_press =
                (int32_t) ((((uint32_t) (temp[0])) << 12) | (((uint32_t) (temp[1])) << 4) | ((uint32_t) temp[2] >> 4));
 800128a:	7a3b      	ldrb	r3, [r7, #8]
 800128c:	031a      	lsls	r2, r3, #12
 800128e:	7a7b      	ldrb	r3, [r7, #9]
 8001290:	011b      	lsls	r3, r3, #4
 8001292:	4313      	orrs	r3, r2
 8001294:	7aba      	ldrb	r2, [r7, #10]
 8001296:	0912      	lsrs	r2, r2, #4
 8001298:	b2d2      	uxtb	r2, r2
 800129a:	431a      	orrs	r2, r3
            uncomp_data->uncomp_press =
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	605a      	str	r2, [r3, #4]
            uncomp_data->uncomp_temp =
                (int32_t) ((((int32_t) (temp[3])) << 12) | (((int32_t) (temp[4])) << 4) | (((int32_t) (temp[5])) >> 4));
 80012a0:	7afb      	ldrb	r3, [r7, #11]
 80012a2:	031a      	lsls	r2, r3, #12
 80012a4:	7b3b      	ldrb	r3, [r7, #12]
 80012a6:	011b      	lsls	r3, r3, #4
 80012a8:	4313      	orrs	r3, r2
 80012aa:	7b7a      	ldrb	r2, [r7, #13]
 80012ac:	0912      	lsrs	r2, r2, #4
 80012ae:	b2d2      	uxtb	r2, r2
 80012b0:	431a      	orrs	r2, r3
            uncomp_data->uncomp_temp =
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	601a      	str	r2, [r3, #0]
            rslt = st_check_boundaries((int32_t)uncomp_data->uncomp_temp, (int32_t)uncomp_data->uncomp_press);
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681a      	ldr	r2, [r3, #0]
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	685b      	ldr	r3, [r3, #4]
 80012be:	4619      	mov	r1, r3
 80012c0:	4610      	mov	r0, r2
 80012c2:	f000 fa1b 	bl	80016fc <st_check_boundaries>
 80012c6:	4603      	mov	r3, r0
 80012c8:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMP280_OK)
 80012ca:	e004      	b.n	80012d6 <bmp280_get_uncomp_data+0x92>
        }
        else
        {
            rslt = BMP280_E_UNCOMP_DATA_CALC;
 80012cc:	23f3      	movs	r3, #243	; 0xf3
 80012ce:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMP280_OK)
 80012d0:	e001      	b.n	80012d6 <bmp280_get_uncomp_data+0x92>
        }
    }
    else
    {
        rslt = BMP280_E_NULL_PTR;
 80012d2:	23ff      	movs	r3, #255	; 0xff
 80012d4:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80012d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80012da:	4618      	mov	r0, r3
 80012dc:	3710      	adds	r7, #16
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}

080012e2 <bmp280_get_comp_temp_32bit>:
/*!
 * @brief This API is used to get the compensated temperature from
 * uncompensated temperature. This API uses 32 bit integers.
 */
int8_t bmp280_get_comp_temp_32bit(int32_t *comp_temp, int32_t uncomp_temp, struct bmp280_dev *dev)
{
 80012e2:	b580      	push	{r7, lr}
 80012e4:	b088      	sub	sp, #32
 80012e6:	af00      	add	r7, sp, #0
 80012e8:	60f8      	str	r0, [r7, #12]
 80012ea:	60b9      	str	r1, [r7, #8]
 80012ec:	607a      	str	r2, [r7, #4]
    int32_t var1, var2;
    int8_t rslt;

    rslt = null_ptr_check(dev);
 80012ee:	6878      	ldr	r0, [r7, #4]
 80012f0:	f000 f862 	bl	80013b8 <null_ptr_check>
 80012f4:	4603      	mov	r3, r0
 80012f6:	77fb      	strb	r3, [r7, #31]
    if (rslt == BMP280_OK)
 80012f8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d150      	bne.n	80013a2 <bmp280_get_comp_temp_32bit+0xc0>
    {
        var1 =
            ((((uncomp_temp / 8) - ((int32_t) dev->calib_param.dig_t1 << 1))) * ((int32_t) dev->calib_param.dig_t2)) /
 8001300:	68bb      	ldr	r3, [r7, #8]
 8001302:	2b00      	cmp	r3, #0
 8001304:	da00      	bge.n	8001308 <bmp280_get_comp_temp_32bit+0x26>
 8001306:	3307      	adds	r3, #7
 8001308:	10db      	asrs	r3, r3, #3
 800130a:	461a      	mov	r2, r3
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	8a1b      	ldrh	r3, [r3, #16]
 8001310:	005b      	lsls	r3, r3, #1
 8001312:	1ad3      	subs	r3, r2, r3
 8001314:	687a      	ldr	r2, [r7, #4]
 8001316:	f9b2 2012 	ldrsh.w	r2, [r2, #18]
 800131a:	fb02 f303 	mul.w	r3, r2, r3
        var1 =
 800131e:	2b00      	cmp	r3, #0
 8001320:	da01      	bge.n	8001326 <bmp280_get_comp_temp_32bit+0x44>
 8001322:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 8001326:	12db      	asrs	r3, r3, #11
 8001328:	61bb      	str	r3, [r7, #24]
            2048;
        var2 =
            (((((uncomp_temp / 16) - ((int32_t) dev->calib_param.dig_t1)) *
 800132a:	68bb      	ldr	r3, [r7, #8]
 800132c:	2b00      	cmp	r3, #0
 800132e:	da00      	bge.n	8001332 <bmp280_get_comp_temp_32bit+0x50>
 8001330:	330f      	adds	r3, #15
 8001332:	111b      	asrs	r3, r3, #4
 8001334:	461a      	mov	r2, r3
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	8a1b      	ldrh	r3, [r3, #16]
 800133a:	1ad2      	subs	r2, r2, r3
               ((uncomp_temp / 16) - ((int32_t) dev->calib_param.dig_t1))) / 4096) *
 800133c:	68bb      	ldr	r3, [r7, #8]
 800133e:	2b00      	cmp	r3, #0
 8001340:	da00      	bge.n	8001344 <bmp280_get_comp_temp_32bit+0x62>
 8001342:	330f      	adds	r3, #15
 8001344:	111b      	asrs	r3, r3, #4
 8001346:	4619      	mov	r1, r3
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	8a1b      	ldrh	r3, [r3, #16]
 800134c:	1acb      	subs	r3, r1, r3
            (((((uncomp_temp / 16) - ((int32_t) dev->calib_param.dig_t1)) *
 800134e:	fb03 f302 	mul.w	r3, r3, r2
               ((uncomp_temp / 16) - ((int32_t) dev->calib_param.dig_t1))) / 4096) *
 8001352:	2b00      	cmp	r3, #0
 8001354:	da01      	bge.n	800135a <bmp280_get_comp_temp_32bit+0x78>
 8001356:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 800135a:	131b      	asrs	r3, r3, #12
 800135c:	461a      	mov	r2, r3
             ((int32_t) dev->calib_param.dig_t3)) /
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
               ((uncomp_temp / 16) - ((int32_t) dev->calib_param.dig_t1))) / 4096) *
 8001364:	fb03 f302 	mul.w	r3, r3, r2
        var2 =
 8001368:	2b00      	cmp	r3, #0
 800136a:	da03      	bge.n	8001374 <bmp280_get_comp_temp_32bit+0x92>
 800136c:	f643 72ff 	movw	r2, #16383	; 0x3fff
 8001370:	441a      	add	r2, r3
 8001372:	4613      	mov	r3, r2
 8001374:	139b      	asrs	r3, r3, #14
 8001376:	617b      	str	r3, [r7, #20]
            16384;
        dev->calib_param.t_fine = var1 + var2;
 8001378:	69ba      	ldr	r2, [r7, #24]
 800137a:	697b      	ldr	r3, [r7, #20]
 800137c:	441a      	add	r2, r3
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	629a      	str	r2, [r3, #40]	; 0x28
        *comp_temp = (dev->calib_param.t_fine * 5 + 128) / 256;
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001386:	4613      	mov	r3, r2
 8001388:	009b      	lsls	r3, r3, #2
 800138a:	4413      	add	r3, r2
 800138c:	3380      	adds	r3, #128	; 0x80
 800138e:	2b00      	cmp	r3, #0
 8001390:	da00      	bge.n	8001394 <bmp280_get_comp_temp_32bit+0xb2>
 8001392:	33ff      	adds	r3, #255	; 0xff
 8001394:	121b      	asrs	r3, r3, #8
 8001396:	461a      	mov	r2, r3
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	601a      	str	r2, [r3, #0]
        rslt = BMP280_OK;
 800139c:	2300      	movs	r3, #0
 800139e:	77fb      	strb	r3, [r7, #31]
 80013a0:	e004      	b.n	80013ac <bmp280_get_comp_temp_32bit+0xca>
    }
    else
    {
        *comp_temp = 0;
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	2200      	movs	r2, #0
 80013a6:	601a      	str	r2, [r3, #0]
        rslt = BMP280_E_32BIT_COMP_TEMP;
 80013a8:	23f2      	movs	r3, #242	; 0xf2
 80013aa:	77fb      	strb	r3, [r7, #31]
    }

    return rslt;
 80013ac:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80013b0:	4618      	mov	r0, r3
 80013b2:	3720      	adds	r7, #32
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd80      	pop	{r7, pc}

080013b8 <null_ptr_check>:
/*!
 * @brief This internal API is used to check for null-pointers in the device
 * structure.
 */
static int8_t null_ptr_check(const struct bmp280_dev *dev)
{
 80013b8:	b480      	push	{r7}
 80013ba:	b085      	sub	sp, #20
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_ms == NULL))
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d00b      	beq.n	80013de <null_ptr_check+0x26>
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	685b      	ldr	r3, [r3, #4]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d007      	beq.n	80013de <null_ptr_check+0x26>
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	689b      	ldr	r3, [r3, #8]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d003      	beq.n	80013de <null_ptr_check+0x26>
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	68db      	ldr	r3, [r3, #12]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d102      	bne.n	80013e4 <null_ptr_check+0x2c>
    {
        /* Null-pointer found */
        rslt = BMP280_E_NULL_PTR;
 80013de:	23ff      	movs	r3, #255	; 0xff
 80013e0:	73fb      	strb	r3, [r7, #15]
 80013e2:	e001      	b.n	80013e8 <null_ptr_check+0x30>
    }
    else
    {
        rslt = BMP280_OK;
 80013e4:	2300      	movs	r3, #0
 80013e6:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80013e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80013ec:	4618      	mov	r0, r3
 80013ee:	3714      	adds	r7, #20
 80013f0:	46bd      	mov	sp, r7
 80013f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f6:	4770      	bx	lr

080013f8 <interleave_data>:
/*!
 * @brief This internal API interleaves the register addresses and respective
 * register data for a burst write
 */
static void interleave_data(const uint8_t *reg_addr, uint8_t *temp_buff, const uint8_t *reg_data, uint8_t len)
{
 80013f8:	b480      	push	{r7}
 80013fa:	b087      	sub	sp, #28
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	60f8      	str	r0, [r7, #12]
 8001400:	60b9      	str	r1, [r7, #8]
 8001402:	607a      	str	r2, [r7, #4]
 8001404:	70fb      	strb	r3, [r7, #3]
    uint8_t index;

    for (index = 1; index < len; index++)
 8001406:	2301      	movs	r3, #1
 8001408:	75fb      	strb	r3, [r7, #23]
 800140a:	e016      	b.n	800143a <interleave_data+0x42>
    {
        temp_buff[(index * 2) - 1] = reg_addr[index];
 800140c:	7dfb      	ldrb	r3, [r7, #23]
 800140e:	68fa      	ldr	r2, [r7, #12]
 8001410:	441a      	add	r2, r3
 8001412:	7dfb      	ldrb	r3, [r7, #23]
 8001414:	005b      	lsls	r3, r3, #1
 8001416:	3b01      	subs	r3, #1
 8001418:	68b9      	ldr	r1, [r7, #8]
 800141a:	440b      	add	r3, r1
 800141c:	7812      	ldrb	r2, [r2, #0]
 800141e:	701a      	strb	r2, [r3, #0]
        temp_buff[index * 2] = reg_data[index];
 8001420:	7dfb      	ldrb	r3, [r7, #23]
 8001422:	687a      	ldr	r2, [r7, #4]
 8001424:	441a      	add	r2, r3
 8001426:	7dfb      	ldrb	r3, [r7, #23]
 8001428:	005b      	lsls	r3, r3, #1
 800142a:	4619      	mov	r1, r3
 800142c:	68bb      	ldr	r3, [r7, #8]
 800142e:	440b      	add	r3, r1
 8001430:	7812      	ldrb	r2, [r2, #0]
 8001432:	701a      	strb	r2, [r3, #0]
    for (index = 1; index < len; index++)
 8001434:	7dfb      	ldrb	r3, [r7, #23]
 8001436:	3301      	adds	r3, #1
 8001438:	75fb      	strb	r3, [r7, #23]
 800143a:	7dfa      	ldrb	r2, [r7, #23]
 800143c:	78fb      	ldrb	r3, [r7, #3]
 800143e:	429a      	cmp	r2, r3
 8001440:	d3e4      	bcc.n	800140c <interleave_data+0x14>
    }
}
 8001442:	bf00      	nop
 8001444:	371c      	adds	r7, #28
 8001446:	46bd      	mov	sp, r7
 8001448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144c:	4770      	bx	lr

0800144e <get_calib_param>:
/*!
 * @brief This API is used to read the calibration parameters used
 * for calculating the compensated data.
 */
static int8_t get_calib_param(struct bmp280_dev *dev)
{
 800144e:	b580      	push	{r7, lr}
 8001450:	b08a      	sub	sp, #40	; 0x28
 8001452:	af00      	add	r7, sp, #0
 8001454:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t temp[BMP280_CALIB_DATA_SIZE] = { 0 };
 8001456:	f107 030c 	add.w	r3, r7, #12
 800145a:	2200      	movs	r2, #0
 800145c:	601a      	str	r2, [r3, #0]
 800145e:	605a      	str	r2, [r3, #4]
 8001460:	609a      	str	r2, [r3, #8]
 8001462:	60da      	str	r2, [r3, #12]
 8001464:	611a      	str	r2, [r3, #16]
 8001466:	615a      	str	r2, [r3, #20]

    rslt = null_ptr_check(dev);
 8001468:	6878      	ldr	r0, [r7, #4]
 800146a:	f7ff ffa5 	bl	80013b8 <null_ptr_check>
 800146e:	4603      	mov	r3, r0
 8001470:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if (rslt == BMP280_OK)
 8001474:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8001478:	2b00      	cmp	r3, #0
 800147a:	d17f      	bne.n	800157c <get_calib_param+0x12e>
    {
        rslt = bmp280_get_regs(BMP280_DIG_T1_LSB_ADDR, temp, BMP280_CALIB_DATA_SIZE, dev);
 800147c:	f107 010c 	add.w	r1, r7, #12
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	2218      	movs	r2, #24
 8001484:	2088      	movs	r0, #136	; 0x88
 8001486:	f7ff fd2d 	bl	8000ee4 <bmp280_get_regs>
 800148a:	4603      	mov	r3, r0
 800148c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (rslt == BMP280_OK)
 8001490:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8001494:	2b00      	cmp	r3, #0
 8001496:	d171      	bne.n	800157c <get_calib_param+0x12e>
        {
            dev->calib_param.dig_t1 =
                (uint16_t) (((uint16_t) temp[BMP280_DIG_T1_MSB_POS] << 8) | ((uint16_t) temp[BMP280_DIG_T1_LSB_POS]));
 8001498:	7b7b      	ldrb	r3, [r7, #13]
 800149a:	021b      	lsls	r3, r3, #8
 800149c:	b21a      	sxth	r2, r3
 800149e:	7b3b      	ldrb	r3, [r7, #12]
 80014a0:	b21b      	sxth	r3, r3
 80014a2:	4313      	orrs	r3, r2
 80014a4:	b21b      	sxth	r3, r3
 80014a6:	b29a      	uxth	r2, r3
            dev->calib_param.dig_t1 =
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	821a      	strh	r2, [r3, #16]
            dev->calib_param.dig_t2 =
                (int16_t) (((int16_t) temp[BMP280_DIG_T2_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_T2_LSB_POS]));
 80014ac:	7bfb      	ldrb	r3, [r7, #15]
 80014ae:	021b      	lsls	r3, r3, #8
 80014b0:	b21a      	sxth	r2, r3
 80014b2:	7bbb      	ldrb	r3, [r7, #14]
 80014b4:	b21b      	sxth	r3, r3
 80014b6:	4313      	orrs	r3, r2
 80014b8:	b21a      	sxth	r2, r3
            dev->calib_param.dig_t2 =
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	825a      	strh	r2, [r3, #18]
            dev->calib_param.dig_t3 =
                (int16_t) (((int16_t) temp[BMP280_DIG_T3_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_T3_LSB_POS]));
 80014be:	7c7b      	ldrb	r3, [r7, #17]
 80014c0:	021b      	lsls	r3, r3, #8
 80014c2:	b21a      	sxth	r2, r3
 80014c4:	7c3b      	ldrb	r3, [r7, #16]
 80014c6:	b21b      	sxth	r3, r3
 80014c8:	4313      	orrs	r3, r2
 80014ca:	b21a      	sxth	r2, r3
            dev->calib_param.dig_t3 =
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	829a      	strh	r2, [r3, #20]
            dev->calib_param.dig_p1 =
                (uint16_t) (((uint16_t) temp[BMP280_DIG_P1_MSB_POS] << 8) | ((uint16_t) temp[BMP280_DIG_P1_LSB_POS]));
 80014d0:	7cfb      	ldrb	r3, [r7, #19]
 80014d2:	021b      	lsls	r3, r3, #8
 80014d4:	b21a      	sxth	r2, r3
 80014d6:	7cbb      	ldrb	r3, [r7, #18]
 80014d8:	b21b      	sxth	r3, r3
 80014da:	4313      	orrs	r3, r2
 80014dc:	b21b      	sxth	r3, r3
 80014de:	b29a      	uxth	r2, r3
            dev->calib_param.dig_p1 =
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	82da      	strh	r2, [r3, #22]
            dev->calib_param.dig_p2 =
                (int16_t) (((int16_t) temp[BMP280_DIG_P2_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_P2_LSB_POS]));
 80014e4:	7d7b      	ldrb	r3, [r7, #21]
 80014e6:	021b      	lsls	r3, r3, #8
 80014e8:	b21a      	sxth	r2, r3
 80014ea:	7d3b      	ldrb	r3, [r7, #20]
 80014ec:	b21b      	sxth	r3, r3
 80014ee:	4313      	orrs	r3, r2
 80014f0:	b21a      	sxth	r2, r3
            dev->calib_param.dig_p2 =
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	831a      	strh	r2, [r3, #24]
            dev->calib_param.dig_p3 =
                (int16_t) (((int16_t) temp[BMP280_DIG_P3_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_P3_LSB_POS]));
 80014f6:	7dfb      	ldrb	r3, [r7, #23]
 80014f8:	021b      	lsls	r3, r3, #8
 80014fa:	b21a      	sxth	r2, r3
 80014fc:	7dbb      	ldrb	r3, [r7, #22]
 80014fe:	b21b      	sxth	r3, r3
 8001500:	4313      	orrs	r3, r2
 8001502:	b21a      	sxth	r2, r3
            dev->calib_param.dig_p3 =
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	835a      	strh	r2, [r3, #26]
            dev->calib_param.dig_p4 =
                (int16_t) (((int16_t) temp[BMP280_DIG_P4_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_P4_LSB_POS]));
 8001508:	7e7b      	ldrb	r3, [r7, #25]
 800150a:	021b      	lsls	r3, r3, #8
 800150c:	b21a      	sxth	r2, r3
 800150e:	7e3b      	ldrb	r3, [r7, #24]
 8001510:	b21b      	sxth	r3, r3
 8001512:	4313      	orrs	r3, r2
 8001514:	b21a      	sxth	r2, r3
            dev->calib_param.dig_p4 =
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	839a      	strh	r2, [r3, #28]
            dev->calib_param.dig_p5 =
                (int16_t) (((int16_t) temp[BMP280_DIG_P5_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_P5_LSB_POS]));
 800151a:	7efb      	ldrb	r3, [r7, #27]
 800151c:	021b      	lsls	r3, r3, #8
 800151e:	b21a      	sxth	r2, r3
 8001520:	7ebb      	ldrb	r3, [r7, #26]
 8001522:	b21b      	sxth	r3, r3
 8001524:	4313      	orrs	r3, r2
 8001526:	b21a      	sxth	r2, r3
            dev->calib_param.dig_p5 =
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	83da      	strh	r2, [r3, #30]
            dev->calib_param.dig_p6 =
                (int16_t) (((int16_t) temp[BMP280_DIG_P6_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_P6_LSB_POS]));
 800152c:	7f7b      	ldrb	r3, [r7, #29]
 800152e:	021b      	lsls	r3, r3, #8
 8001530:	b21a      	sxth	r2, r3
 8001532:	7f3b      	ldrb	r3, [r7, #28]
 8001534:	b21b      	sxth	r3, r3
 8001536:	4313      	orrs	r3, r2
 8001538:	b21a      	sxth	r2, r3
            dev->calib_param.dig_p6 =
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	841a      	strh	r2, [r3, #32]
            dev->calib_param.dig_p7 =
                (int16_t) (((int16_t) temp[BMP280_DIG_P7_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_P7_LSB_POS]));
 800153e:	7ffb      	ldrb	r3, [r7, #31]
 8001540:	021b      	lsls	r3, r3, #8
 8001542:	b21a      	sxth	r2, r3
 8001544:	7fbb      	ldrb	r3, [r7, #30]
 8001546:	b21b      	sxth	r3, r3
 8001548:	4313      	orrs	r3, r2
 800154a:	b21a      	sxth	r2, r3
            dev->calib_param.dig_p7 =
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	845a      	strh	r2, [r3, #34]	; 0x22
            dev->calib_param.dig_p8 =
                (int16_t) (((int16_t) temp[BMP280_DIG_P8_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_P8_LSB_POS]));
 8001550:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8001554:	021b      	lsls	r3, r3, #8
 8001556:	b21a      	sxth	r2, r3
 8001558:	f897 3020 	ldrb.w	r3, [r7, #32]
 800155c:	b21b      	sxth	r3, r3
 800155e:	4313      	orrs	r3, r2
 8001560:	b21a      	sxth	r2, r3
            dev->calib_param.dig_p8 =
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	849a      	strh	r2, [r3, #36]	; 0x24
            dev->calib_param.dig_p9 =
                (int16_t) (((int16_t) temp[BMP280_DIG_P9_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_P9_LSB_POS]));
 8001566:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800156a:	021b      	lsls	r3, r3, #8
 800156c:	b21a      	sxth	r2, r3
 800156e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001572:	b21b      	sxth	r3, r3
 8001574:	4313      	orrs	r3, r2
 8001576:	b21a      	sxth	r2, r3
            dev->calib_param.dig_p9 =
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	84da      	strh	r2, [r3, #38]	; 0x26
        }
    }

    return rslt;
 800157c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8001580:	4618      	mov	r0, r3
 8001582:	3728      	adds	r7, #40	; 0x28
 8001584:	46bd      	mov	sp, r7
 8001586:	bd80      	pop	{r7, pc}

08001588 <conf_sensor>:

/*!
 * @brief This internal API to reset the sensor, restore/set conf, restore/set mode
 */
static int8_t conf_sensor(uint8_t mode, const struct bmp280_config *conf, struct bmp280_dev *dev)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b086      	sub	sp, #24
 800158c:	af00      	add	r7, sp, #0
 800158e:	4603      	mov	r3, r0
 8001590:	60b9      	str	r1, [r7, #8]
 8001592:	607a      	str	r2, [r7, #4]
 8001594:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;
    uint8_t temp[2] = { 0, 0 };
 8001596:	2300      	movs	r3, #0
 8001598:	753b      	strb	r3, [r7, #20]
 800159a:	2300      	movs	r3, #0
 800159c:	757b      	strb	r3, [r7, #21]
    uint8_t reg_addr[2] = { BMP280_CTRL_MEAS_ADDR, BMP280_CONFIG_ADDR };
 800159e:	4b56      	ldr	r3, [pc, #344]	; (80016f8 <conf_sensor+0x170>)
 80015a0:	881b      	ldrh	r3, [r3, #0]
 80015a2:	823b      	strh	r3, [r7, #16]

    rslt = null_ptr_check(dev);
 80015a4:	6878      	ldr	r0, [r7, #4]
 80015a6:	f7ff ff07 	bl	80013b8 <null_ptr_check>
 80015aa:	4603      	mov	r3, r0
 80015ac:	75fb      	strb	r3, [r7, #23]
    if ((rslt == BMP280_OK) && (conf != NULL))
 80015ae:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	f040 8095 	bne.w	80016e2 <conf_sensor+0x15a>
 80015b8:	68bb      	ldr	r3, [r7, #8]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	f000 8091 	beq.w	80016e2 <conf_sensor+0x15a>
    {
        rslt = bmp280_get_regs(BMP280_CTRL_MEAS_ADDR, temp, 2, dev);
 80015c0:	f107 0114 	add.w	r1, r7, #20
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	2202      	movs	r2, #2
 80015c8:	20f4      	movs	r0, #244	; 0xf4
 80015ca:	f7ff fc8b 	bl	8000ee4 <bmp280_get_regs>
 80015ce:	4603      	mov	r3, r0
 80015d0:	75fb      	strb	r3, [r7, #23]
        if (rslt == BMP280_OK)
 80015d2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	f040 8086 	bne.w	80016e8 <conf_sensor+0x160>
        {
            /* Here the intention is to put the device to sleep
             * within the shortest period of time
             */
            rslt = bmp280_soft_reset(dev);
 80015dc:	6878      	ldr	r0, [r7, #4]
 80015de:	f7ff fd26 	bl	800102e <bmp280_soft_reset>
 80015e2:	4603      	mov	r3, r0
 80015e4:	75fb      	strb	r3, [r7, #23]
            if (rslt == BMP280_OK)
 80015e6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d17c      	bne.n	80016e8 <conf_sensor+0x160>
            {
                temp[0] = BMP280_SET_BITS(temp[0], BMP280_OS_TEMP, conf->os_temp);
 80015ee:	7d3b      	ldrb	r3, [r7, #20]
 80015f0:	b25b      	sxtb	r3, r3
 80015f2:	f003 031f 	and.w	r3, r3, #31
 80015f6:	b25a      	sxtb	r2, r3
 80015f8:	68bb      	ldr	r3, [r7, #8]
 80015fa:	781b      	ldrb	r3, [r3, #0]
 80015fc:	015b      	lsls	r3, r3, #5
 80015fe:	b25b      	sxtb	r3, r3
 8001600:	4313      	orrs	r3, r2
 8001602:	b25b      	sxtb	r3, r3
 8001604:	b2db      	uxtb	r3, r3
 8001606:	753b      	strb	r3, [r7, #20]
                temp[0] = BMP280_SET_BITS(temp[0], BMP280_OS_PRES, conf->os_pres);
 8001608:	7d3b      	ldrb	r3, [r7, #20]
 800160a:	b25b      	sxtb	r3, r3
 800160c:	f023 031c 	bic.w	r3, r3, #28
 8001610:	b25a      	sxtb	r2, r3
 8001612:	68bb      	ldr	r3, [r7, #8]
 8001614:	785b      	ldrb	r3, [r3, #1]
 8001616:	009b      	lsls	r3, r3, #2
 8001618:	b25b      	sxtb	r3, r3
 800161a:	f003 031c 	and.w	r3, r3, #28
 800161e:	b25b      	sxtb	r3, r3
 8001620:	4313      	orrs	r3, r2
 8001622:	b25b      	sxtb	r3, r3
 8001624:	b2db      	uxtb	r3, r3
 8001626:	753b      	strb	r3, [r7, #20]
                temp[1] = BMP280_SET_BITS(temp[1], BMP280_STANDBY_DURN, conf->odr);
 8001628:	7d7b      	ldrb	r3, [r7, #21]
 800162a:	b25b      	sxtb	r3, r3
 800162c:	f003 031f 	and.w	r3, r3, #31
 8001630:	b25a      	sxtb	r2, r3
 8001632:	68bb      	ldr	r3, [r7, #8]
 8001634:	789b      	ldrb	r3, [r3, #2]
 8001636:	015b      	lsls	r3, r3, #5
 8001638:	b25b      	sxtb	r3, r3
 800163a:	4313      	orrs	r3, r2
 800163c:	b25b      	sxtb	r3, r3
 800163e:	b2db      	uxtb	r3, r3
 8001640:	757b      	strb	r3, [r7, #21]
                temp[1] = BMP280_SET_BITS(temp[1], BMP280_FILTER, conf->filter);
 8001642:	7d7b      	ldrb	r3, [r7, #21]
 8001644:	b25b      	sxtb	r3, r3
 8001646:	f023 031c 	bic.w	r3, r3, #28
 800164a:	b25a      	sxtb	r2, r3
 800164c:	68bb      	ldr	r3, [r7, #8]
 800164e:	78db      	ldrb	r3, [r3, #3]
 8001650:	009b      	lsls	r3, r3, #2
 8001652:	b25b      	sxtb	r3, r3
 8001654:	f003 031c 	and.w	r3, r3, #28
 8001658:	b25b      	sxtb	r3, r3
 800165a:	4313      	orrs	r3, r2
 800165c:	b25b      	sxtb	r3, r3
 800165e:	b2db      	uxtb	r3, r3
 8001660:	757b      	strb	r3, [r7, #21]
                temp[1] = BMP280_SET_BITS_POS_0(temp[1], BMP280_SPI3_ENABLE, conf->spi3w_en);
 8001662:	7d7b      	ldrb	r3, [r7, #21]
 8001664:	b25b      	sxtb	r3, r3
 8001666:	f023 0301 	bic.w	r3, r3, #1
 800166a:	b25a      	sxtb	r2, r3
 800166c:	68bb      	ldr	r3, [r7, #8]
 800166e:	791b      	ldrb	r3, [r3, #4]
 8001670:	b25b      	sxtb	r3, r3
 8001672:	f003 0301 	and.w	r3, r3, #1
 8001676:	b25b      	sxtb	r3, r3
 8001678:	4313      	orrs	r3, r2
 800167a:	b25b      	sxtb	r3, r3
 800167c:	b2db      	uxtb	r3, r3
 800167e:	757b      	strb	r3, [r7, #21]
                rslt = bmp280_set_regs(reg_addr, temp, 2, dev);
 8001680:	f107 0114 	add.w	r1, r7, #20
 8001684:	f107 0010 	add.w	r0, r7, #16
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	2202      	movs	r2, #2
 800168c:	f7ff fc61 	bl	8000f52 <bmp280_set_regs>
 8001690:	4603      	mov	r3, r0
 8001692:	75fb      	strb	r3, [r7, #23]
                if (rslt == BMP280_OK)
 8001694:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001698:	2b00      	cmp	r3, #0
 800169a:	d125      	bne.n	80016e8 <conf_sensor+0x160>
                {
                    dev->conf = *conf;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	68ba      	ldr	r2, [r7, #8]
 80016a0:	332c      	adds	r3, #44	; 0x2c
 80016a2:	6810      	ldr	r0, [r2, #0]
 80016a4:	6018      	str	r0, [r3, #0]
 80016a6:	7912      	ldrb	r2, [r2, #4]
 80016a8:	711a      	strb	r2, [r3, #4]
                    if (mode != BMP280_SLEEP_MODE)
 80016aa:	7bfb      	ldrb	r3, [r7, #15]
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d01b      	beq.n	80016e8 <conf_sensor+0x160>
                    {
                        /* Write only the power mode register in a separate write */
                        temp[0] = BMP280_SET_BITS_POS_0(temp[0], BMP280_POWER_MODE, mode);
 80016b0:	7d3b      	ldrb	r3, [r7, #20]
 80016b2:	b25b      	sxtb	r3, r3
 80016b4:	f023 0303 	bic.w	r3, r3, #3
 80016b8:	b25a      	sxtb	r2, r3
 80016ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016be:	f003 0303 	and.w	r3, r3, #3
 80016c2:	b25b      	sxtb	r3, r3
 80016c4:	4313      	orrs	r3, r2
 80016c6:	b25b      	sxtb	r3, r3
 80016c8:	b2db      	uxtb	r3, r3
 80016ca:	753b      	strb	r3, [r7, #20]
                        rslt = bmp280_set_regs(reg_addr, temp, 1, dev);
 80016cc:	f107 0114 	add.w	r1, r7, #20
 80016d0:	f107 0010 	add.w	r0, r7, #16
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	2201      	movs	r2, #1
 80016d8:	f7ff fc3b 	bl	8000f52 <bmp280_set_regs>
 80016dc:	4603      	mov	r3, r0
 80016de:	75fb      	strb	r3, [r7, #23]
        if (rslt == BMP280_OK)
 80016e0:	e002      	b.n	80016e8 <conf_sensor+0x160>
            }
        }
    }
    else
    {
        rslt = BMP280_E_NULL_PTR;
 80016e2:	23ff      	movs	r3, #255	; 0xff
 80016e4:	75fb      	strb	r3, [r7, #23]
 80016e6:	e000      	b.n	80016ea <conf_sensor+0x162>
        if (rslt == BMP280_OK)
 80016e8:	bf00      	nop
    }

    return rslt;
 80016ea:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80016ee:	4618      	mov	r0, r3
 80016f0:	3718      	adds	r7, #24
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	bf00      	nop
 80016f8:	08009e00 	.word	0x08009e00

080016fc <st_check_boundaries>:

/*!
 * @This internal API checks whether the uncompensated temperature and pressure are within the range
 */
static int8_t st_check_boundaries(int32_t utemperature, int32_t upressure)
{
 80016fc:	b480      	push	{r7}
 80016fe:	b085      	sub	sp, #20
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
 8001704:	6039      	str	r1, [r7, #0]
    int8_t rslt = 0;
 8001706:	2300      	movs	r3, #0
 8001708:	73fb      	strb	r3, [r7, #15]

    /* check UT and UP for valid range */
    if ((utemperature <= BMP280_ST_ADC_T_MIN || utemperature >= BMP280_ST_ADC_T_MAX) &&
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	2b00      	cmp	r3, #0
 800170e:	dd03      	ble.n	8001718 <st_check_boundaries+0x1c>
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	4a15      	ldr	r2, [pc, #84]	; (8001768 <st_check_boundaries+0x6c>)
 8001714:	4293      	cmp	r3, r2
 8001716:	dd09      	ble.n	800172c <st_check_boundaries+0x30>
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	2b00      	cmp	r3, #0
 800171c:	dd03      	ble.n	8001726 <st_check_boundaries+0x2a>
        (upressure <= BMP280_ST_ADC_P_MIN || upressure >= BMP280_ST_ADC_P_MAX))
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	4a11      	ldr	r2, [pc, #68]	; (8001768 <st_check_boundaries+0x6c>)
 8001722:	4293      	cmp	r3, r2
 8001724:	dd02      	ble.n	800172c <st_check_boundaries+0x30>
    {
        rslt = BMP280_E_UNCOMP_TEMP_AND_PRESS_RANGE;
 8001726:	23f4      	movs	r3, #244	; 0xf4
 8001728:	73fb      	strb	r3, [r7, #15]
 800172a:	e015      	b.n	8001758 <st_check_boundaries+0x5c>
    }
    else if (utemperature <= BMP280_ST_ADC_T_MIN || utemperature >= BMP280_ST_ADC_T_MAX)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	2b00      	cmp	r3, #0
 8001730:	dd03      	ble.n	800173a <st_check_boundaries+0x3e>
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	4a0c      	ldr	r2, [pc, #48]	; (8001768 <st_check_boundaries+0x6c>)
 8001736:	4293      	cmp	r3, r2
 8001738:	dd02      	ble.n	8001740 <st_check_boundaries+0x44>
    {
        rslt = BMP280_E_UNCOMP_TEMP_RANGE;
 800173a:	23f6      	movs	r3, #246	; 0xf6
 800173c:	73fb      	strb	r3, [r7, #15]
 800173e:	e00b      	b.n	8001758 <st_check_boundaries+0x5c>
    }
    else if (upressure <= BMP280_ST_ADC_P_MIN || upressure >= BMP280_ST_ADC_P_MAX)
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	2b00      	cmp	r3, #0
 8001744:	dd03      	ble.n	800174e <st_check_boundaries+0x52>
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	4a07      	ldr	r2, [pc, #28]	; (8001768 <st_check_boundaries+0x6c>)
 800174a:	4293      	cmp	r3, r2
 800174c:	dd02      	ble.n	8001754 <st_check_boundaries+0x58>
    {
        rslt = BMP280_E_UNCOMP_PRES_RANGE;
 800174e:	23f5      	movs	r3, #245	; 0xf5
 8001750:	73fb      	strb	r3, [r7, #15]
 8001752:	e001      	b.n	8001758 <st_check_boundaries+0x5c>
    }
    else
    {
        rslt = BMP280_OK;
 8001754:	2300      	movs	r3, #0
 8001756:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001758:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800175c:	4618      	mov	r0, r3
 800175e:	3714      	adds	r7, #20
 8001760:	46bd      	mov	sp, r7
 8001762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001766:	4770      	bx	lr
 8001768:	000fffef 	.word	0x000fffef

0800176c <BMP280_Init>:
 *  @retval 0  -> Success
 *  @retval >0 -> Failure Info
 *
 */
int8_t BMP280_Init(struct bmp280_dev* bmp)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b084      	sub	sp, #16
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  int8_t rslt;
  struct bmp280_config conf;

  rslt = bmp280_init(bmp);
 8001774:	6878      	ldr	r0, [r7, #4]
 8001776:	f7ff fc7f 	bl	8001078 <bmp280_init>
 800177a:	4603      	mov	r3, r0
 800177c:	73fb      	strb	r3, [r7, #15]

  /* Always read the current settings before writing, especially when all the configuration is not modified  */
  rslt = bmp280_get_config(&conf, bmp);
 800177e:	f107 0308 	add.w	r3, r7, #8
 8001782:	6879      	ldr	r1, [r7, #4]
 8001784:	4618      	mov	r0, r3
 8001786:	f7ff fcdd 	bl	8001144 <bmp280_get_config>
 800178a:	4603      	mov	r3, r0
 800178c:	73fb      	strb	r3, [r7, #15]

  /* configuring the temperature oversampling, filter coefficient and output data rate */
  /* Overwrite the desired settings */
  conf.filter = BMP280_FILTER_OFF;
 800178e:	2300      	movs	r3, #0
 8001790:	72fb      	strb	r3, [r7, #11]

  /* Temperature oversampling set at 1x */
  conf.os_temp = BMP280_OS_1X;
 8001792:	2301      	movs	r3, #1
 8001794:	723b      	strb	r3, [r7, #8]

  /* Temperature oversampling set at 1x */
  conf.os_pres = BMP280_OS_1X;
 8001796:	2301      	movs	r3, #1
 8001798:	727b      	strb	r3, [r7, #9]

  /* Setting the output data rate as 4 Hz (250 ms) */
  conf.odr = BMP280_ODR_250_MS;
 800179a:	2303      	movs	r3, #3
 800179c:	72bb      	strb	r3, [r7, #10]

  rslt = bmp280_set_config(&conf, bmp);
 800179e:	f107 0308 	add.w	r3, r7, #8
 80017a2:	6879      	ldr	r1, [r7, #4]
 80017a4:	4618      	mov	r0, r3
 80017a6:	f7ff fd1f 	bl	80011e8 <bmp280_set_config>
 80017aa:	4603      	mov	r3, r0
 80017ac:	73fb      	strb	r3, [r7, #15]

  /* Always set the power mode after setting the configuration */
  rslt = bmp280_set_power_mode(BMP280_NORMAL_MODE, bmp);
 80017ae:	6879      	ldr	r1, [r7, #4]
 80017b0:	2003      	movs	r0, #3
 80017b2:	f7ff fd28 	bl	8001206 <bmp280_set_power_mode>
 80017b6:	4603      	mov	r3, r0
 80017b8:	73fb      	strb	r3, [r7, #15]

  return rslt;
 80017ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80017be:	4618      	mov	r0, r3
 80017c0:	3710      	adds	r7, #16
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd80      	pop	{r7, pc}
	...

080017c8 <bmp280_spi_reg_write>:
 *  @retval 0 -> Success
 *  @retval >0 -> Failure Info
 *
 */
int8_t bmp280_spi_reg_write(uint8_t cs, uint8_t reg_addr, uint8_t *reg_data, uint16_t length)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b08c      	sub	sp, #48	; 0x30
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	603a      	str	r2, [r7, #0]
 80017d0:	461a      	mov	r2, r3
 80017d2:	4603      	mov	r3, r0
 80017d4:	71fb      	strb	r3, [r7, #7]
 80017d6:	460b      	mov	r3, r1
 80017d8:	71bb      	strb	r3, [r7, #6]
 80017da:	4613      	mov	r3, r2
 80017dc:	80bb      	strh	r3, [r7, #4]
  /* Implement the SPI write routine according to the target machine. */
  HAL_StatusTypeDef status = HAL_OK;
 80017de:	2300      	movs	r3, #0
 80017e0:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  int32_t iError = BMP280_OK;
 80017e4:	2300      	movs	r3, #0
 80017e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint8_t txarray[BMP280_SPI_BUFFER_LEN];

  txarray[BMP280_REG_ADDR_INDEX] = reg_addr;
 80017e8:	79bb      	ldrb	r3, [r7, #6]
 80017ea:	733b      	strb	r3, [r7, #12]
  for(uint8_t i = 0; i < length; i++) 
 80017ec:	2300      	movs	r3, #0
 80017ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80017f2:	e011      	b.n	8001818 <bmp280_spi_reg_write+0x50>
  {
    txarray[i+BMP280_DATA_INDEX] = reg_data[i];
 80017f4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80017f8:	683a      	ldr	r2, [r7, #0]
 80017fa:	441a      	add	r2, r3
 80017fc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001800:	3301      	adds	r3, #1
 8001802:	7812      	ldrb	r2, [r2, #0]
 8001804:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8001808:	440b      	add	r3, r1
 800180a:	f803 2c24 	strb.w	r2, [r3, #-36]
  for(uint8_t i = 0; i < length; i++) 
 800180e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001812:	3301      	adds	r3, #1
 8001814:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8001818:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800181c:	b29b      	uxth	r3, r3
 800181e:	88ba      	ldrh	r2, [r7, #4]
 8001820:	429a      	cmp	r2, r3
 8001822:	d8e7      	bhi.n	80017f4 <bmp280_spi_reg_write+0x2c>
  }
  
  /* Software slave selection procedure */
  HAL_GPIO_WritePin( BMP280_CS_Ports[cs], BMP280_CS_Pins[cs], GPIO_PIN_RESET );
 8001824:	79fb      	ldrb	r3, [r7, #7]
 8001826:	4a1f      	ldr	r2, [pc, #124]	; (80018a4 <bmp280_spi_reg_write+0xdc>)
 8001828:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800182c:	79fb      	ldrb	r3, [r7, #7]
 800182e:	4a1e      	ldr	r2, [pc, #120]	; (80018a8 <bmp280_spi_reg_write+0xe0>)
 8001830:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001834:	2200      	movs	r2, #0
 8001836:	4619      	mov	r1, r3
 8001838:	f003 fc0c 	bl	8005054 <HAL_GPIO_WritePin>

  /* Data exchange */
  status = HAL_SPI_Transmit(BMP280_SPI, (uint8_t*)(&txarray), length+BMP280_REG_ADDR_LEN, BMP280_TIMEOUT);
 800183c:	88bb      	ldrh	r3, [r7, #4]
 800183e:	3301      	adds	r3, #1
 8001840:	b29a      	uxth	r2, r3
 8001842:	f107 010c 	add.w	r1, r7, #12
 8001846:	2305      	movs	r3, #5
 8001848:	4818      	ldr	r0, [pc, #96]	; (80018ac <bmp280_spi_reg_write+0xe4>)
 800184a:	f005 faa3 	bl	8006d94 <HAL_SPI_Transmit>
 800184e:	4603      	mov	r3, r0
 8001850:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  //while( BMP280_SPI->State == HAL_SPI_STATE_BUSY ) {};

  /* Disable all slaves */
  for(uint8_t i = 0; i < BMP280_NUM_OF_SENSORS; i++) 
 8001854:	2300      	movs	r3, #0
 8001856:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800185a:	e012      	b.n	8001882 <bmp280_spi_reg_write+0xba>
  {
    HAL_GPIO_WritePin( BMP280_CS_Ports[i], BMP280_CS_Pins[i], GPIO_PIN_SET );
 800185c:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8001860:	4a10      	ldr	r2, [pc, #64]	; (80018a4 <bmp280_spi_reg_write+0xdc>)
 8001862:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001866:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800186a:	4a0f      	ldr	r2, [pc, #60]	; (80018a8 <bmp280_spi_reg_write+0xe0>)
 800186c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001870:	2201      	movs	r2, #1
 8001872:	4619      	mov	r1, r3
 8001874:	f003 fbee 	bl	8005054 <HAL_GPIO_WritePin>
  for(uint8_t i = 0; i < BMP280_NUM_OF_SENSORS; i++) 
 8001878:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800187c:	3301      	adds	r3, #1
 800187e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8001882:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8001886:	2b01      	cmp	r3, #1
 8001888:	d9e8      	bls.n	800185c <bmp280_spi_reg_write+0x94>
  }

  if (status != HAL_OK)
 800188a:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800188e:	2b00      	cmp	r3, #0
 8001890:	d002      	beq.n	8001898 <bmp280_spi_reg_write+0xd0>
  {
  	// The BMP280 API calls for 0 return value as a success, and -1 returned as failure
  	iError = (-1);
 8001892:	f04f 33ff 	mov.w	r3, #4294967295
 8001896:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
    
  return (int8_t)iError;
 8001898:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800189a:	b25b      	sxtb	r3, r3
}
 800189c:	4618      	mov	r0, r3
 800189e:	3730      	adds	r7, #48	; 0x30
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bd80      	pop	{r7, pc}
 80018a4:	20000018 	.word	0x20000018
 80018a8:	20000020 	.word	0x20000020
 80018ac:	20000358 	.word	0x20000358

080018b0 <bmp280_spi_reg_read>:
 *  @retval 0  -> Success
 *  @retval >0 -> Failure Info
 *
 */
int8_t bmp280_spi_reg_read(uint8_t cs, uint8_t reg_addr, uint8_t *reg_data, uint16_t length)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b094      	sub	sp, #80	; 0x50
 80018b4:	af02      	add	r7, sp, #8
 80018b6:	603a      	str	r2, [r7, #0]
 80018b8:	461a      	mov	r2, r3
 80018ba:	4603      	mov	r3, r0
 80018bc:	71fb      	strb	r3, [r7, #7]
 80018be:	460b      	mov	r3, r1
 80018c0:	71bb      	strb	r3, [r7, #6]
 80018c2:	4613      	mov	r3, r2
 80018c4:	80bb      	strh	r3, [r7, #4]
  /* Implement the SPI read routine according to the target machine. */
  HAL_StatusTypeDef status = HAL_OK;
 80018c6:	2300      	movs	r3, #0
 80018c8:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
  int32_t iError = BMP280_OK;
 80018cc:	2300      	movs	r3, #0
 80018ce:	647b      	str	r3, [r7, #68]	; 0x44
  uint8_t txarray[BMP280_SPI_BUFFER_LEN] = {0,};
 80018d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018d4:	2200      	movs	r2, #0
 80018d6:	601a      	str	r2, [r3, #0]
 80018d8:	605a      	str	r2, [r3, #4]
 80018da:	609a      	str	r2, [r3, #8]
 80018dc:	60da      	str	r2, [r3, #12]
 80018de:	611a      	str	r2, [r3, #16]
 80018e0:	615a      	str	r2, [r3, #20]
 80018e2:	619a      	str	r2, [r3, #24]
  uint8_t rxarray[BMP280_SPI_BUFFER_LEN] = {0,};
 80018e4:	f107 0308 	add.w	r3, r7, #8
 80018e8:	2200      	movs	r2, #0
 80018ea:	601a      	str	r2, [r3, #0]
 80018ec:	605a      	str	r2, [r3, #4]
 80018ee:	609a      	str	r2, [r3, #8]
 80018f0:	60da      	str	r2, [r3, #12]
 80018f2:	611a      	str	r2, [r3, #16]
 80018f4:	615a      	str	r2, [r3, #20]
 80018f6:	619a      	str	r2, [r3, #24]

  txarray[BMP280_REG_ADDR_INDEX] = reg_addr;
 80018f8:	79bb      	ldrb	r3, [r7, #6]
 80018fa:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

  /* Software slave selection procedure */
  HAL_GPIO_WritePin( BMP280_CS_Ports[cs], BMP280_CS_Pins[cs], GPIO_PIN_RESET );
 80018fe:	79fb      	ldrb	r3, [r7, #7]
 8001900:	4a2f      	ldr	r2, [pc, #188]	; (80019c0 <bmp280_spi_reg_read+0x110>)
 8001902:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001906:	79fb      	ldrb	r3, [r7, #7]
 8001908:	4a2e      	ldr	r2, [pc, #184]	; (80019c4 <bmp280_spi_reg_read+0x114>)
 800190a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800190e:	2200      	movs	r2, #0
 8001910:	4619      	mov	r1, r3
 8001912:	f003 fb9f 	bl	8005054 <HAL_GPIO_WritePin>

  /* Data exchange */
  status = HAL_SPI_TransmitReceive(BMP280_SPI, (uint8_t*)(&txarray), (uint8_t*)(&rxarray), length+BMP280_REG_ADDR_LEN, BMP280_TIMEOUT);
 8001916:	88bb      	ldrh	r3, [r7, #4]
 8001918:	3301      	adds	r3, #1
 800191a:	b298      	uxth	r0, r3
 800191c:	f107 0208 	add.w	r2, r7, #8
 8001920:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8001924:	2305      	movs	r3, #5
 8001926:	9300      	str	r3, [sp, #0]
 8001928:	4603      	mov	r3, r0
 800192a:	4827      	ldr	r0, [pc, #156]	; (80019c8 <bmp280_spi_reg_read+0x118>)
 800192c:	f005 fb98 	bl	8007060 <HAL_SPI_TransmitReceive>
 8001930:	4603      	mov	r3, r0
 8001932:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
  //while( BMP280_SPI->State == HAL_SPI_STATE_BUSY ) {};

  /* Disable all slaves */
  for(uint8_t i = 0; i < BMP280_NUM_OF_SENSORS; i++) 
 8001936:	2300      	movs	r3, #0
 8001938:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800193c:	e012      	b.n	8001964 <bmp280_spi_reg_read+0xb4>
  {
    HAL_GPIO_WritePin( BMP280_CS_Ports[i], BMP280_CS_Pins[i], GPIO_PIN_SET );
 800193e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8001942:	4a1f      	ldr	r2, [pc, #124]	; (80019c0 <bmp280_spi_reg_read+0x110>)
 8001944:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001948:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800194c:	4a1d      	ldr	r2, [pc, #116]	; (80019c4 <bmp280_spi_reg_read+0x114>)
 800194e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001952:	2201      	movs	r2, #1
 8001954:	4619      	mov	r1, r3
 8001956:	f003 fb7d 	bl	8005054 <HAL_GPIO_WritePin>
  for(uint8_t i = 0; i < BMP280_NUM_OF_SENSORS; i++) 
 800195a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800195e:	3301      	adds	r3, #1
 8001960:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8001964:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8001968:	2b01      	cmp	r3, #1
 800196a:	d9e8      	bls.n	800193e <bmp280_spi_reg_read+0x8e>
  }

  for (uint8_t i = 0; i < length; i++) {
 800196c:	2300      	movs	r3, #0
 800196e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8001972:	e011      	b.n	8001998 <bmp280_spi_reg_read+0xe8>
    reg_data[i] = rxarray[i+BMP280_DATA_INDEX];
 8001974:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8001978:	1c5a      	adds	r2, r3, #1
 800197a:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 800197e:	6839      	ldr	r1, [r7, #0]
 8001980:	440b      	add	r3, r1
 8001982:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8001986:	440a      	add	r2, r1
 8001988:	f812 2c40 	ldrb.w	r2, [r2, #-64]
 800198c:	701a      	strb	r2, [r3, #0]
  for (uint8_t i = 0; i < length; i++) {
 800198e:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8001992:	3301      	adds	r3, #1
 8001994:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8001998:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 800199c:	b29b      	uxth	r3, r3
 800199e:	88ba      	ldrh	r2, [r7, #4]
 80019a0:	429a      	cmp	r2, r3
 80019a2:	d8e7      	bhi.n	8001974 <bmp280_spi_reg_read+0xc4>
  }

  if (status != HAL_OK)
 80019a4:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d002      	beq.n	80019b2 <bmp280_spi_reg_read+0x102>
  {
  	// The BME280 API calls for 0 return value as a success, and -1 returned as failure
  	iError = (-1);
 80019ac:	f04f 33ff 	mov.w	r3, #4294967295
 80019b0:	647b      	str	r3, [r7, #68]	; 0x44
  }
  
  return (int8_t)iError;
 80019b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80019b4:	b25b      	sxtb	r3, r3
}
 80019b6:	4618      	mov	r0, r3
 80019b8:	3748      	adds	r7, #72	; 0x48
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}
 80019be:	bf00      	nop
 80019c0:	20000018 	.word	0x20000018
 80019c4:	20000020 	.word	0x20000020
 80019c8:	20000358 	.word	0x20000358

080019cc <LAMP_StartTimer>:
 * @param[in] hlamp Lamp handler
 * @param[in] ang   Triac firing angle [degrees]
 * @return None
 */
void LAMP_StartTimer(LAMP_HandleTypeDef* hlamp, float ang)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b084      	sub	sp, #16
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
 80019d4:	ed87 0a00 	vstr	s0, [r7]
  if(ang > hlamp->TriacFiringAngleMax)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	edd3 7a07 	vldr	s15, [r3, #28]
 80019de:	ed97 7a00 	vldr	s14, [r7]
 80019e2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80019e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019ea:	dd03      	ble.n	80019f4 <LAMP_StartTimer+0x28>
    ang = hlamp->TriacFiringAngleMax;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	69db      	ldr	r3, [r3, #28]
 80019f0:	603b      	str	r3, [r7, #0]
 80019f2:	e00c      	b.n	8001a0e <LAMP_StartTimer+0x42>
  else if(ang < hlamp->TriacFiringAngleMin)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	edd3 7a06 	vldr	s15, [r3, #24]
 80019fa:	ed97 7a00 	vldr	s14, [r7]
 80019fe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001a02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a06:	d502      	bpl.n	8001a0e <LAMP_StartTimer+0x42>
    ang = hlamp->TriacFiringAngleMin;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	699b      	ldr	r3, [r3, #24]
 8001a0c:	603b      	str	r3, [r7, #0]
  
  hlamp->TriacFiringAngle = ang; 
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	683a      	ldr	r2, [r7, #0]
 8001a12:	615a      	str	r2, [r3, #20]
  
  uint32_t TIM_Counter = __LAMP_DEG_TO_MICROSECONDS(hlamp->TriacFiringAngle);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	edd3 7a05 	vldr	s15, [r3, #20]
 8001a1a:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8001a58 <LAMP_StartTimer+0x8c>
 8001a1e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001a22:	eddf 6a0e 	vldr	s13, [pc, #56]	; 8001a5c <LAMP_StartTimer+0x90>
 8001a26:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a2a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001a2e:	ee17 3a90 	vmov	r3, s15
 8001a32:	60fb      	str	r3, [r7, #12]

  __HAL_TIM_SetAutoreload(hlamp->Timer, TIM_Counter);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	68fa      	ldr	r2, [r7, #12]
 8001a3c:	62da      	str	r2, [r3, #44]	; 0x2c
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	68fa      	ldr	r2, [r7, #12]
 8001a44:	60da      	str	r2, [r3, #12]
  HAL_TIM_Base_Start_IT(hlamp->Timer);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	f005 fe64 	bl	8007718 <HAL_TIM_Base_Start_IT>
}
 8001a50:	bf00      	nop
 8001a52:	3710      	adds	r7, #16
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bd80      	pop	{r7, pc}
 8001a58:	49742400 	.word	0x49742400
 8001a5c:	468ca000 	.word	0x468ca000

08001a60 <LAMP_TriacFiring>:
 * @brief Triac firing procedure: sets triac output on high for short period (<100us).
 * @param[in] hlamp Lamp handler
 * @return None
 */
void LAMP_TriacFiring(LAMP_HandleTypeDef* hlamp)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b084      	sub	sp, #16
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
  HAL_GPIO_WritePin(hlamp->TRIAC_Port, hlamp->TRIAC_Pin, GPIO_PIN_SET);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	68d8      	ldr	r0, [r3, #12]
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	8a1b      	ldrh	r3, [r3, #16]
 8001a70:	2201      	movs	r2, #1
 8001a72:	4619      	mov	r1, r3
 8001a74:	f003 faee 	bl	8005054 <HAL_GPIO_WritePin>
  __LAMP_SOFT_DELAY(LAMP_TRIAC_DELAY);
 8001a78:	2300      	movs	r3, #0
 8001a7a:	60fb      	str	r3, [r7, #12]
 8001a7c:	e003      	b.n	8001a86 <LAMP_TriacFiring+0x26>
 8001a7e:	bf00      	nop
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	3301      	adds	r3, #1
 8001a84:	60fb      	str	r3, [r7, #12]
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001a8c:	d3f7      	bcc.n	8001a7e <LAMP_TriacFiring+0x1e>
  HAL_GPIO_WritePin(hlamp->TRIAC_Port, hlamp->TRIAC_Pin, GPIO_PIN_RESET);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	68d8      	ldr	r0, [r3, #12]
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	8a1b      	ldrh	r3, [r3, #16]
 8001a96:	2200      	movs	r2, #0
 8001a98:	4619      	mov	r1, r3
 8001a9a:	f003 fadb 	bl	8005054 <HAL_GPIO_WritePin>
 8001a9e:	bf00      	nop
 8001aa0:	3710      	adds	r7, #16
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}

08001aa6 <ENC_Init>:
 * @brief Rotary quadrature encoder hardware initialization.
 * @param[in] hbtn Encoder handler
 * @return None
 */
void ENC_Init(ENC_HandleTypeDef* henc)
{
 8001aa6:	b580      	push	{r7, lr}
 8001aa8:	b082      	sub	sp, #8
 8001aaa:	af00      	add	r7, sp, #0
 8001aac:	6078      	str	r0, [r7, #4]
	HAL_TIM_Encoder_Start(henc->Timer, TIM_CHANNEL_ALL);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	213c      	movs	r1, #60	; 0x3c
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	f005 ffab 	bl	8007a10 <HAL_TIM_Encoder_Start>
}
 8001aba:	bf00      	nop
 8001abc:	3708      	adds	r7, #8
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}

08001ac2 <ENC_GetCounter>:
 * @brief Rotary quadrature encoder hardware counter read.
 * @param[in] hbtn Encoder handler
 * @return Current counter value
 */
uint32_t ENC_GetCounter(ENC_HandleTypeDef* henc)
{
 8001ac2:	b480      	push	{r7}
 8001ac4:	b083      	sub	sp, #12
 8001ac6:	af00      	add	r7, sp, #0
 8001ac8:	6078      	str	r0, [r7, #4]
  henc->Counter = henc->Timer->Instance->CNT;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	605a      	str	r2, [r3, #4]
  return henc->Counter;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	685b      	ldr	r3, [r3, #4]
}
 8001ada:	4618      	mov	r0, r3
 8001adc:	370c      	adds	r7, #12
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae4:	4770      	bx	lr

08001ae6 <HEATER_PWM_Init>:
 * @brief PWM-controlled heater initialization.
 * @param[in] hheaterpwm Heater handler
 * @return None
 */
void HEATER_PWM_Init(HEATER_PWM_HandleTypeDef* hheaterpwm)
{
 8001ae6:	b580      	push	{r7, lr}
 8001ae8:	b082      	sub	sp, #8
 8001aea:	af00      	add	r7, sp, #0
 8001aec:	6078      	str	r0, [r7, #4]
  HAL_TIM_PWM_Start(hheaterpwm->Timer, hheaterpwm->Channel);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681a      	ldr	r2, [r3, #0]
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	889b      	ldrh	r3, [r3, #4]
 8001af6:	4619      	mov	r1, r3
 8001af8:	4610      	mov	r0, r2
 8001afa:	f005 fe6d 	bl	80077d8 <HAL_TIM_PWM_Start>
}
 8001afe:	bf00      	nop
 8001b00:	3708      	adds	r7, #8
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}
	...

08001b08 <HEATER_PWM_SetDuty>:
 * @param[in] hheaterpwm Heater handler
 * @param[in] duty       PWM duty in percents
 * @return None
 */
void HEATER_PWM_SetDuty(HEATER_PWM_HandleTypeDef* hheaterpwm, float duty)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	b085      	sub	sp, #20
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
 8001b10:	ed87 0a00 	vstr	s0, [r7]
  int COMPARE = (duty * (__HAL_TIM_GET_AUTORELOAD(hheaterpwm->Timer)+1)) / 100;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b1c:	3301      	adds	r3, #1
 8001b1e:	ee07 3a90 	vmov	s15, r3
 8001b22:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001b26:	edd7 7a00 	vldr	s15, [r7]
 8001b2a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b2e:	eddf 6a23 	vldr	s13, [pc, #140]	; 8001bbc <HEATER_PWM_SetDuty+0xb4>
 8001b32:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b36:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b3a:	ee17 3a90 	vmov	r3, s15
 8001b3e:	60fb      	str	r3, [r7, #12]
  __HAL_TIM_SET_COMPARE(hheaterpwm->Timer, hheaterpwm->Channel, COMPARE);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	889b      	ldrh	r3, [r3, #4]
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d105      	bne.n	8001b54 <HEATER_PWM_SetDuty+0x4c>
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	68fa      	ldr	r2, [r7, #12]
 8001b50:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001b52:	e02c      	b.n	8001bae <HEATER_PWM_SetDuty+0xa6>
  __HAL_TIM_SET_COMPARE(hheaterpwm->Timer, hheaterpwm->Channel, COMPARE);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	889b      	ldrh	r3, [r3, #4]
 8001b58:	2b04      	cmp	r3, #4
 8001b5a:	d105      	bne.n	8001b68 <HEATER_PWM_SetDuty+0x60>
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	68fa      	ldr	r2, [r7, #12]
 8001b64:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001b66:	e022      	b.n	8001bae <HEATER_PWM_SetDuty+0xa6>
  __HAL_TIM_SET_COMPARE(hheaterpwm->Timer, hheaterpwm->Channel, COMPARE);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	889b      	ldrh	r3, [r3, #4]
 8001b6c:	2b08      	cmp	r3, #8
 8001b6e:	d105      	bne.n	8001b7c <HEATER_PWM_SetDuty+0x74>
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	68fa      	ldr	r2, [r7, #12]
 8001b78:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001b7a:	e018      	b.n	8001bae <HEATER_PWM_SetDuty+0xa6>
  __HAL_TIM_SET_COMPARE(hheaterpwm->Timer, hheaterpwm->Channel, COMPARE);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	889b      	ldrh	r3, [r3, #4]
 8001b80:	2b0c      	cmp	r3, #12
 8001b82:	d105      	bne.n	8001b90 <HEATER_PWM_SetDuty+0x88>
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	68fa      	ldr	r2, [r7, #12]
 8001b8c:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001b8e:	e00e      	b.n	8001bae <HEATER_PWM_SetDuty+0xa6>
  __HAL_TIM_SET_COMPARE(hheaterpwm->Timer, hheaterpwm->Channel, COMPARE);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	889b      	ldrh	r3, [r3, #4]
 8001b94:	2b10      	cmp	r3, #16
 8001b96:	d105      	bne.n	8001ba4 <HEATER_PWM_SetDuty+0x9c>
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	68fa      	ldr	r2, [r7, #12]
 8001ba0:	659a      	str	r2, [r3, #88]	; 0x58
}
 8001ba2:	e004      	b.n	8001bae <HEATER_PWM_SetDuty+0xa6>
  __HAL_TIM_SET_COMPARE(hheaterpwm->Timer, hheaterpwm->Channel, COMPARE);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	68fa      	ldr	r2, [r7, #12]
 8001bac:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8001bae:	bf00      	nop
 8001bb0:	3714      	adds	r7, #20
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb8:	4770      	bx	lr
 8001bba:	bf00      	nop
 8001bbc:	42c80000 	.word	0x42c80000

08001bc0 <lcd_write_command>:
 * @param[in] hlcd LCD handler
 * @param[in] data Display command @see lcd.h/Define
 * @return None
 */
void lcd_write_command(LCD_HandleTypeDef* hlcd, uint8_t command)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b082      	sub	sp, #8
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
 8001bc8:	460b      	mov	r3, r1
 8001bca:	70fb      	strb	r3, [r7, #3]
  HAL_GPIO_WritePin(hlcd->RS_Port, hlcd->RS_Pin, LCD_COMMAND_REG);    // Write to command register
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	6898      	ldr	r0, [r3, #8]
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	899b      	ldrh	r3, [r3, #12]
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	4619      	mov	r1, r3
 8001bd8:	f003 fa3c 	bl	8005054 <HAL_GPIO_WritePin>

  if(hlcd->Mode == LCD_4_BIT_MODE)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	7d9b      	ldrb	r3, [r3, #22]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d111      	bne.n	8001c08 <lcd_write_command+0x48>
  {
    lcd_write(hlcd, (command >> 4), LCD_NIB);
 8001be4:	78fb      	ldrb	r3, [r7, #3]
 8001be6:	091b      	lsrs	r3, r3, #4
 8001be8:	b2db      	uxtb	r3, r3
 8001bea:	2204      	movs	r2, #4
 8001bec:	4619      	mov	r1, r3
 8001bee:	6878      	ldr	r0, [r7, #4]
 8001bf0:	f000 f842 	bl	8001c78 <lcd_write>
    lcd_write(hlcd, command & 0x0F, LCD_NIB);
 8001bf4:	78fb      	ldrb	r3, [r7, #3]
 8001bf6:	f003 030f 	and.w	r3, r3, #15
 8001bfa:	b2db      	uxtb	r3, r3
 8001bfc:	2204      	movs	r2, #4
 8001bfe:	4619      	mov	r1, r3
 8001c00:	6878      	ldr	r0, [r7, #4]
 8001c02:	f000 f839 	bl	8001c78 <lcd_write>
  }
  else
  {
     lcd_write(hlcd, command, LCD_BYTE);
  }
}
 8001c06:	e005      	b.n	8001c14 <lcd_write_command+0x54>
     lcd_write(hlcd, command, LCD_BYTE);
 8001c08:	78fb      	ldrb	r3, [r7, #3]
 8001c0a:	2208      	movs	r2, #8
 8001c0c:	4619      	mov	r1, r3
 8001c0e:	6878      	ldr	r0, [r7, #4]
 8001c10:	f000 f832 	bl	8001c78 <lcd_write>
}
 8001c14:	bf00      	nop
 8001c16:	3708      	adds	r7, #8
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	bd80      	pop	{r7, pc}

08001c1c <lcd_write_data>:
 * @param[in] hlcd LCD handler
 * @param[in] data Display data byte
 * @return None
 */
void lcd_write_data(LCD_HandleTypeDef* hlcd, uint8_t data)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b082      	sub	sp, #8
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
 8001c24:	460b      	mov	r3, r1
 8001c26:	70fb      	strb	r3, [r7, #3]
  HAL_GPIO_WritePin(hlcd->RS_Port, hlcd->RS_Pin, LCD_DATA_REG);     // Write to data register
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	6898      	ldr	r0, [r3, #8]
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	899b      	ldrh	r3, [r3, #12]
 8001c30:	2201      	movs	r2, #1
 8001c32:	4619      	mov	r1, r3
 8001c34:	f003 fa0e 	bl	8005054 <HAL_GPIO_WritePin>

  if(hlcd->Mode == LCD_4_BIT_MODE)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	7d9b      	ldrb	r3, [r3, #22]
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d111      	bne.n	8001c64 <lcd_write_data+0x48>
  {
    lcd_write(hlcd, data >> 4, LCD_NIB);
 8001c40:	78fb      	ldrb	r3, [r7, #3]
 8001c42:	091b      	lsrs	r3, r3, #4
 8001c44:	b2db      	uxtb	r3, r3
 8001c46:	2204      	movs	r2, #4
 8001c48:	4619      	mov	r1, r3
 8001c4a:	6878      	ldr	r0, [r7, #4]
 8001c4c:	f000 f814 	bl	8001c78 <lcd_write>
    lcd_write(hlcd, data & 0x0F, LCD_NIB);
 8001c50:	78fb      	ldrb	r3, [r7, #3]
 8001c52:	f003 030f 	and.w	r3, r3, #15
 8001c56:	b2db      	uxtb	r3, r3
 8001c58:	2204      	movs	r2, #4
 8001c5a:	4619      	mov	r1, r3
 8001c5c:	6878      	ldr	r0, [r7, #4]
 8001c5e:	f000 f80b 	bl	8001c78 <lcd_write>
  }
  else
  {
    lcd_write(hlcd, data, LCD_BYTE);
  }
}
 8001c62:	e005      	b.n	8001c70 <lcd_write_data+0x54>
    lcd_write(hlcd, data, LCD_BYTE);
 8001c64:	78fb      	ldrb	r3, [r7, #3]
 8001c66:	2208      	movs	r2, #8
 8001c68:	4619      	mov	r1, r3
 8001c6a:	6878      	ldr	r0, [r7, #4]
 8001c6c:	f000 f804 	bl	8001c78 <lcd_write>
}
 8001c70:	bf00      	nop
 8001c72:	3708      	adds	r7, #8
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bd80      	pop	{r7, pc}

08001c78 <lcd_write>:
 * @param[in] data Data byte
 * @param[in] len  Data port size (length): 4 ( LCD_NIB )or 8 ( LCD_BYTE ) bits
 * @return None
 */
void lcd_write(LCD_HandleTypeDef* hlcd, uint8_t data, uint8_t len)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b084      	sub	sp, #16
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
 8001c80:	460b      	mov	r3, r1
 8001c82:	70fb      	strb	r3, [r7, #3]
 8001c84:	4613      	mov	r3, r2
 8001c86:	70bb      	strb	r3, [r7, #2]
  for(uint8_t i = 0; i < len; i++)
 8001c88:	2300      	movs	r3, #0
 8001c8a:	73fb      	strb	r3, [r7, #15]
 8001c8c:	e019      	b.n	8001cc2 <lcd_write+0x4a>
  {
    HAL_GPIO_WritePin(hlcd->Data_Port[i], hlcd->Data_Pin[i], (data >> i) & 0x01);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681a      	ldr	r2, [r3, #0]
 8001c92:	7bfb      	ldrb	r3, [r7, #15]
 8001c94:	009b      	lsls	r3, r3, #2
 8001c96:	4413      	add	r3, r2
 8001c98:	6818      	ldr	r0, [r3, #0]
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	685a      	ldr	r2, [r3, #4]
 8001c9e:	7bfb      	ldrb	r3, [r7, #15]
 8001ca0:	005b      	lsls	r3, r3, #1
 8001ca2:	4413      	add	r3, r2
 8001ca4:	8819      	ldrh	r1, [r3, #0]
 8001ca6:	78fa      	ldrb	r2, [r7, #3]
 8001ca8:	7bfb      	ldrb	r3, [r7, #15]
 8001caa:	fa42 f303 	asr.w	r3, r2, r3
 8001cae:	b2db      	uxtb	r3, r3
 8001cb0:	f003 0301 	and.w	r3, r3, #1
 8001cb4:	b2db      	uxtb	r3, r3
 8001cb6:	461a      	mov	r2, r3
 8001cb8:	f003 f9cc 	bl	8005054 <HAL_GPIO_WritePin>
  for(uint8_t i = 0; i < len; i++)
 8001cbc:	7bfb      	ldrb	r3, [r7, #15]
 8001cbe:	3301      	adds	r3, #1
 8001cc0:	73fb      	strb	r3, [r7, #15]
 8001cc2:	7bfa      	ldrb	r2, [r7, #15]
 8001cc4:	78bb      	ldrb	r3, [r7, #2]
 8001cc6:	429a      	cmp	r2, r3
 8001cc8:	d3e1      	bcc.n	8001c8e <lcd_write+0x16>
  }

  HAL_GPIO_WritePin(hlcd->EN_Port, hlcd->EN_Pin, GPIO_PIN_SET);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	6918      	ldr	r0, [r3, #16]
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	8a9b      	ldrh	r3, [r3, #20]
 8001cd2:	2201      	movs	r2, #1
 8001cd4:	4619      	mov	r1, r3
 8001cd6:	f003 f9bd 	bl	8005054 <HAL_GPIO_WritePin>
  __LCD_Delay(1);
 8001cda:	2001      	movs	r0, #1
 8001cdc:	f001 fe6c 	bl	80039b8 <HAL_Delay>
  HAL_GPIO_WritePin(hlcd->EN_Port, hlcd->EN_Pin, GPIO_PIN_RESET); // Data receive on falling edge
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	6918      	ldr	r0, [r3, #16]
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	8a9b      	ldrh	r3, [r3, #20]
 8001ce8:	2200      	movs	r2, #0
 8001cea:	4619      	mov	r1, r3
 8001cec:	f003 f9b2 	bl	8005054 <HAL_GPIO_WritePin>
}
 8001cf0:	bf00      	nop
 8001cf2:	3710      	adds	r7, #16
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bd80      	pop	{r7, pc}

08001cf8 <LCD_Init>:
 * @note Cursor off, Cursor increment on, No blink @see HD44780 technical note.
 * @param[in] hlcd LCD handler
 * @return None 
 */
void LCD_Init(LCD_HandleTypeDef* hlcd)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b082      	sub	sp, #8
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  if(hlcd->Mode == LCD_4_BIT_MODE)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	7d9b      	ldrb	r3, [r3, #22]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d10c      	bne.n	8001d22 <LCD_Init+0x2a>
  {
    lcd_write_command(hlcd, 0x33); // 0011 0011
 8001d08:	2133      	movs	r1, #51	; 0x33
 8001d0a:	6878      	ldr	r0, [r7, #4]
 8001d0c:	f7ff ff58 	bl	8001bc0 <lcd_write_command>
    lcd_write_command(hlcd, 0x32); // 0011 0010
 8001d10:	2132      	movs	r1, #50	; 0x32
 8001d12:	6878      	ldr	r0, [r7, #4]
 8001d14:	f7ff ff54 	bl	8001bc0 <lcd_write_command>
    lcd_write_command(hlcd, LCD_FUNCTION_SET | LCD_OPT_N);       // 4-bit mode
 8001d18:	2128      	movs	r1, #40	; 0x28
 8001d1a:	6878      	ldr	r0, [r7, #4]
 8001d1c:	f7ff ff50 	bl	8001bc0 <lcd_write_command>
 8001d20:	e003      	b.n	8001d2a <LCD_Init+0x32>
  }
  else
    lcd_write_command(hlcd, LCD_FUNCTION_SET | LCD_OPT_DL | LCD_OPT_N);
 8001d22:	2138      	movs	r1, #56	; 0x38
 8001d24:	6878      	ldr	r0, [r7, #4]
 8001d26:	f7ff ff4b 	bl	8001bc0 <lcd_write_command>

  lcd_write_command(hlcd, LCD_CLEAR_DISPLAY);                    // Clear screen
 8001d2a:	2101      	movs	r1, #1
 8001d2c:	6878      	ldr	r0, [r7, #4]
 8001d2e:	f7ff ff47 	bl	8001bc0 <lcd_write_command>
  lcd_write_command(hlcd, LCD_DISPLAY_ON_OFF_CONTROL | LCD_OPT_D);   // LCD on, Cursor off, No blink
 8001d32:	210c      	movs	r1, #12
 8001d34:	6878      	ldr	r0, [r7, #4]
 8001d36:	f7ff ff43 	bl	8001bc0 <lcd_write_command>
  lcd_write_command(hlcd, LCD_ENTRY_MODE_SET | LCD_OPT_INC);         // Cursor increment on
 8001d3a:	2106      	movs	r1, #6
 8001d3c:	6878      	ldr	r0, [r7, #4]
 8001d3e:	f7ff ff3f 	bl	8001bc0 <lcd_write_command>
}
 8001d42:	bf00      	nop
 8001d44:	3708      	adds	r7, #8
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}

08001d4a <LCD_printStr>:
 * @param[in] hlcd LCD handler
 * @param[in] str  Null-terminated string
 * @return None 
 */
void LCD_printStr(LCD_HandleTypeDef* hlcd, char* str)
{
 8001d4a:	b590      	push	{r4, r7, lr}
 8001d4c:	b085      	sub	sp, #20
 8001d4e:	af00      	add	r7, sp, #0
 8001d50:	6078      	str	r0, [r7, #4]
 8001d52:	6039      	str	r1, [r7, #0]
  for(uint8_t i = 0; i < strlen(str); i++)
 8001d54:	2300      	movs	r3, #0
 8001d56:	73fb      	strb	r3, [r7, #15]
 8001d58:	e00a      	b.n	8001d70 <LCD_printStr+0x26>
    lcd_write_data(hlcd, str[i]);
 8001d5a:	7bfb      	ldrb	r3, [r7, #15]
 8001d5c:	683a      	ldr	r2, [r7, #0]
 8001d5e:	4413      	add	r3, r2
 8001d60:	781b      	ldrb	r3, [r3, #0]
 8001d62:	4619      	mov	r1, r3
 8001d64:	6878      	ldr	r0, [r7, #4]
 8001d66:	f7ff ff59 	bl	8001c1c <lcd_write_data>
  for(uint8_t i = 0; i < strlen(str); i++)
 8001d6a:	7bfb      	ldrb	r3, [r7, #15]
 8001d6c:	3301      	adds	r3, #1
 8001d6e:	73fb      	strb	r3, [r7, #15]
 8001d70:	7bfc      	ldrb	r4, [r7, #15]
 8001d72:	6838      	ldr	r0, [r7, #0]
 8001d74:	f7fe fa4c 	bl	8000210 <strlen>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	429c      	cmp	r4, r3
 8001d7c:	d3ed      	bcc.n	8001d5a <LCD_printStr+0x10>
}
 8001d7e:	bf00      	nop
 8001d80:	3714      	adds	r7, #20
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd90      	pop	{r4, r7, pc}
	...

08001d88 <LCD_SetCursor>:
 * @param[in] row  Display row (line): 0 to N
 * @param[in] col  Display column: 0 to 15 (16 character display) or 19 (20 character display)
 * @return None 
 */
void LCD_SetCursor(LCD_HandleTypeDef* hlcd, uint8_t row, uint8_t col)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b082      	sub	sp, #8
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
 8001d90:	460b      	mov	r3, r1
 8001d92:	70fb      	strb	r3, [r7, #3]
 8001d94:	4613      	mov	r3, r2
 8001d96:	70bb      	strb	r3, [r7, #2]
  #ifdef LCD20xN
  lcd_write_command(hlcd, LCD_SET_DDRAM_ADDR + LCD_ROW_20[row] + col);
  #endif

  #ifdef LCD16xN
  lcd_write_command(hlcd, LCD_SET_DDRAM_ADDR + LCD_ROW_16[row] + col);
 8001d98:	78fb      	ldrb	r3, [r7, #3]
 8001d9a:	4a07      	ldr	r2, [pc, #28]	; (8001db8 <LCD_SetCursor+0x30>)
 8001d9c:	5cd2      	ldrb	r2, [r2, r3]
 8001d9e:	78bb      	ldrb	r3, [r7, #2]
 8001da0:	4413      	add	r3, r2
 8001da2:	b2db      	uxtb	r3, r3
 8001da4:	3b80      	subs	r3, #128	; 0x80
 8001da6:	b2db      	uxtb	r3, r3
 8001da8:	4619      	mov	r1, r3
 8001daa:	6878      	ldr	r0, [r7, #4]
 8001dac:	f7ff ff08 	bl	8001bc0 <lcd_write_command>
  #endif
}
 8001db0:	bf00      	nop
 8001db2:	3708      	adds	r7, #8
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bd80      	pop	{r7, pc}
 8001db8:	08009ef4 	.word	0x08009ef4

08001dbc <LCD_printf>:
 * @param[in] format Text format @see http://www.cplusplus.com/reference/cstdio/printf/
 * @param[in] ...    Variadic arguments
 * @return None
 */
void LCD_printf(LCD_HandleTypeDef * lcd, const char* format, ...)
{
 8001dbc:	b40e      	push	{r1, r2, r3}
 8001dbe:	b580      	push	{r7, lr}
 8001dc0:	b095      	sub	sp, #84	; 0x54
 8001dc2:	af00      	add	r7, sp, #0
 8001dc4:	6078      	str	r0, [r7, #4]
  char buffer[LCD_PRINTF_BUF_SIZE];
  va_list args;
  va_start(args, format);
 8001dc6:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001dca:	60fb      	str	r3, [r7, #12]
  vsprintf(buffer,format, args);
 8001dcc:	f107 0310 	add.w	r3, r7, #16
 8001dd0:	68fa      	ldr	r2, [r7, #12]
 8001dd2:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	f007 fc17 	bl	8009608 <vsiprintf>
  LCD_printStr(lcd, buffer);
 8001dda:	f107 0310 	add.w	r3, r7, #16
 8001dde:	4619      	mov	r1, r3
 8001de0:	6878      	ldr	r0, [r7, #4]
 8001de2:	f7ff ffb2 	bl	8001d4a <LCD_printStr>
  va_end(args);
}
 8001de6:	bf00      	nop
 8001de8:	3754      	adds	r7, #84	; 0x54
 8001dea:	46bd      	mov	sp, r7
 8001dec:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001df0:	b003      	add	sp, #12
 8001df2:	4770      	bx	lr

08001df4 <LED_On>:
 * @brief Turns LED on.
 * @param[in] hled LED handle
 * @return None
 */
void LED_On(LED_HandleTypeDef* hled)
{
 8001df4:	b480      	push	{r7}
 8001df6:	b083      	sub	sp, #12
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
	__led_on(hled);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	799b      	ldrb	r3, [r3, #6]
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d00a      	beq.n	8001e1a <LED_On+0x26>
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	699a      	ldr	r2, [r3, #24]
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	889b      	ldrh	r3, [r3, #4]
 8001e0e:	4619      	mov	r1, r3
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	430a      	orrs	r2, r1
 8001e16:	619a      	str	r2, [r3, #24]
}
 8001e18:	e00a      	b.n	8001e30 <LED_On+0x3c>
	__led_on(hled);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	699a      	ldr	r2, [r3, #24]
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	889b      	ldrh	r3, [r3, #4]
 8001e24:	041b      	lsls	r3, r3, #16
 8001e26:	4619      	mov	r1, r3
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	430a      	orrs	r2, r1
 8001e2e:	619a      	str	r2, [r3, #24]
}
 8001e30:	bf00      	nop
 8001e32:	370c      	adds	r7, #12
 8001e34:	46bd      	mov	sp, r7
 8001e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3a:	4770      	bx	lr

08001e3c <LED_Off>:
 * @brief Turns LED off
 * @param[in] hled LED handle
 * @return None
 */
void LED_Off(LED_HandleTypeDef* hled)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b083      	sub	sp, #12
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
	__led_off(hled);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	799b      	ldrb	r3, [r3, #6]
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d00b      	beq.n	8001e64 <LED_Off+0x28>
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	699a      	ldr	r2, [r3, #24]
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	889b      	ldrh	r3, [r3, #4]
 8001e56:	041b      	lsls	r3, r3, #16
 8001e58:	4619      	mov	r1, r3
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	430a      	orrs	r2, r1
 8001e60:	619a      	str	r2, [r3, #24]
}
 8001e62:	e009      	b.n	8001e78 <LED_Off+0x3c>
	__led_off(hled);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	699a      	ldr	r2, [r3, #24]
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	889b      	ldrh	r3, [r3, #4]
 8001e6e:	4619      	mov	r1, r3
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	430a      	orrs	r2, r1
 8001e76:	619a      	str	r2, [r3, #24]
}
 8001e78:	bf00      	nop
 8001e7a:	370c      	adds	r7, #12
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e82:	4770      	bx	lr

08001e84 <LED_Check>:
 * @return LED state
 * @retval 0 -> LED is off
 * @retval 1 -> LED is on
 */
uint8_t LED_Check(LED_HandleTypeDef* hled)
{
 8001e84:	b480      	push	{r7}
 8001e86:	b083      	sub	sp, #12
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
  if((hled)->Logic)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	799b      	ldrb	r3, [r3, #6]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d00b      	beq.n	8001eac <LED_Check+0x28>
    return (__led_read(hled)) ? (1) : (0);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	695b      	ldr	r3, [r3, #20]
 8001e9a:	687a      	ldr	r2, [r7, #4]
 8001e9c:	8892      	ldrh	r2, [r2, #4]
 8001e9e:	4013      	ands	r3, r2
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	bf14      	ite	ne
 8001ea4:	2301      	movne	r3, #1
 8001ea6:	2300      	moveq	r3, #0
 8001ea8:	b2db      	uxtb	r3, r3
 8001eaa:	e00a      	b.n	8001ec2 <LED_Check+0x3e>
  else
    return (__led_read(hled)) ? (0) : (1);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	695b      	ldr	r3, [r3, #20]
 8001eb2:	687a      	ldr	r2, [r7, #4]
 8001eb4:	8892      	ldrh	r2, [r2, #4]
 8001eb6:	4013      	ands	r3, r2
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	bf0c      	ite	eq
 8001ebc:	2301      	moveq	r3, #1
 8001ebe:	2300      	movne	r3, #0
 8001ec0:	b2db      	uxtb	r3, r3
}
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	370c      	adds	r7, #12
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ecc:	4770      	bx	lr

08001ece <LED_RGB_Init>:
 * @brief LED RGB initialization.
 * @param[in] hledrgb LED RGB handler
 * @return None
 */
void LED_RGB_Init(LED_RGB_HandleTypeDef* hledrgb)
{
 8001ece:	b580      	push	{r7, lr}
 8001ed0:	b082      	sub	sp, #8
 8001ed2:	af00      	add	r7, sp, #0
 8001ed4:	6078      	str	r0, [r7, #4]
  HAL_TIM_PWM_Start(hledrgb->Timer, hledrgb->ChannelR);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681a      	ldr	r2, [r3, #0]
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	889b      	ldrh	r3, [r3, #4]
 8001ede:	4619      	mov	r1, r3
 8001ee0:	4610      	mov	r0, r2
 8001ee2:	f005 fc79 	bl	80077d8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(hledrgb->Timer, hledrgb->ChannelG);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681a      	ldr	r2, [r3, #0]
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	88db      	ldrh	r3, [r3, #6]
 8001eee:	4619      	mov	r1, r3
 8001ef0:	4610      	mov	r0, r2
 8001ef2:	f005 fc71 	bl	80077d8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(hledrgb->Timer, hledrgb->ChannelB);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681a      	ldr	r2, [r3, #0]
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	891b      	ldrh	r3, [r3, #8]
 8001efe:	4619      	mov	r1, r3
 8001f00:	4610      	mov	r0, r2
 8001f02:	f005 fc69 	bl	80077d8 <HAL_TIM_PWM_Start>
}
 8001f06:	bf00      	nop
 8001f08:	3708      	adds	r7, #8
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}
	...

08001f10 <LED_RGB_SetDuty>:
 *     @arg LED_CHANNEL_B: Blue channel selected
 * @param[in] duty    PWM duty in percents
 * @return None
 */
void LED_RGB_SetDuty(LED_RGB_HandleTypeDef* hledrgb, LED_Channel ch, float duty)
{
 8001f10:	b480      	push	{r7}
 8001f12:	b087      	sub	sp, #28
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	60f8      	str	r0, [r7, #12]
 8001f18:	460b      	mov	r3, r1
 8001f1a:	ed87 0a01 	vstr	s0, [r7, #4]
 8001f1e:	72fb      	strb	r3, [r7, #11]
  LED_RGB_ChannelType channel = 0;
 8001f20:	2300      	movs	r3, #0
 8001f22:	82fb      	strh	r3, [r7, #22]
  switch(ch)
 8001f24:	7afb      	ldrb	r3, [r7, #11]
 8001f26:	2b01      	cmp	r3, #1
 8001f28:	d008      	beq.n	8001f3c <LED_RGB_SetDuty+0x2c>
 8001f2a:	2b02      	cmp	r3, #2
 8001f2c:	d00a      	beq.n	8001f44 <LED_RGB_SetDuty+0x34>
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d000      	beq.n	8001f34 <LED_RGB_SetDuty+0x24>
	  break;
    case LED_CHANNEL_B:
	  channel = hledrgb->ChannelB;
	  break;
    default:
      break;
 8001f32:	e00b      	b.n	8001f4c <LED_RGB_SetDuty+0x3c>
	  channel = hledrgb->ChannelR;
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	889b      	ldrh	r3, [r3, #4]
 8001f38:	82fb      	strh	r3, [r7, #22]
	  break;
 8001f3a:	e007      	b.n	8001f4c <LED_RGB_SetDuty+0x3c>
	  channel = hledrgb->ChannelG;
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	88db      	ldrh	r3, [r3, #6]
 8001f40:	82fb      	strh	r3, [r7, #22]
	  break;
 8001f42:	e003      	b.n	8001f4c <LED_RGB_SetDuty+0x3c>
	  channel = hledrgb->ChannelB;
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	891b      	ldrh	r3, [r3, #8]
 8001f48:	82fb      	strh	r3, [r7, #22]
	  break;
 8001f4a:	bf00      	nop
  }

  int COMPARE = (duty * (__HAL_TIM_GET_AUTORELOAD(hledrgb->Timer)+1)) / 100;
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f54:	3301      	adds	r3, #1
 8001f56:	ee07 3a90 	vmov	s15, r3
 8001f5a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001f5e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001f62:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f66:	eddf 6a20 	vldr	s13, [pc, #128]	; 8001fe8 <LED_RGB_SetDuty+0xd8>
 8001f6a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001f6e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001f72:	ee17 3a90 	vmov	r3, s15
 8001f76:	613b      	str	r3, [r7, #16]
  __HAL_TIM_SET_COMPARE(hledrgb->Timer, channel, COMPARE);
 8001f78:	8afb      	ldrh	r3, [r7, #22]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d105      	bne.n	8001f8a <LED_RGB_SetDuty+0x7a>
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	693a      	ldr	r2, [r7, #16]
 8001f86:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001f88:	e028      	b.n	8001fdc <LED_RGB_SetDuty+0xcc>
  __HAL_TIM_SET_COMPARE(hledrgb->Timer, channel, COMPARE);
 8001f8a:	8afb      	ldrh	r3, [r7, #22]
 8001f8c:	2b04      	cmp	r3, #4
 8001f8e:	d105      	bne.n	8001f9c <LED_RGB_SetDuty+0x8c>
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	693a      	ldr	r2, [r7, #16]
 8001f98:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001f9a:	e01f      	b.n	8001fdc <LED_RGB_SetDuty+0xcc>
  __HAL_TIM_SET_COMPARE(hledrgb->Timer, channel, COMPARE);
 8001f9c:	8afb      	ldrh	r3, [r7, #22]
 8001f9e:	2b08      	cmp	r3, #8
 8001fa0:	d105      	bne.n	8001fae <LED_RGB_SetDuty+0x9e>
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	693a      	ldr	r2, [r7, #16]
 8001faa:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001fac:	e016      	b.n	8001fdc <LED_RGB_SetDuty+0xcc>
  __HAL_TIM_SET_COMPARE(hledrgb->Timer, channel, COMPARE);
 8001fae:	8afb      	ldrh	r3, [r7, #22]
 8001fb0:	2b0c      	cmp	r3, #12
 8001fb2:	d105      	bne.n	8001fc0 <LED_RGB_SetDuty+0xb0>
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	693a      	ldr	r2, [r7, #16]
 8001fbc:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001fbe:	e00d      	b.n	8001fdc <LED_RGB_SetDuty+0xcc>
  __HAL_TIM_SET_COMPARE(hledrgb->Timer, channel, COMPARE);
 8001fc0:	8afb      	ldrh	r3, [r7, #22]
 8001fc2:	2b10      	cmp	r3, #16
 8001fc4:	d105      	bne.n	8001fd2 <LED_RGB_SetDuty+0xc2>
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	693a      	ldr	r2, [r7, #16]
 8001fce:	659a      	str	r2, [r3, #88]	; 0x58
}
 8001fd0:	e004      	b.n	8001fdc <LED_RGB_SetDuty+0xcc>
  __HAL_TIM_SET_COMPARE(hledrgb->Timer, channel, COMPARE);
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	693a      	ldr	r2, [r7, #16]
 8001fda:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8001fdc:	bf00      	nop
 8001fde:	371c      	adds	r7, #28
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe6:	4770      	bx	lr
 8001fe8:	42c80000 	.word	0x42c80000

08001fec <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b084      	sub	sp, #16
 8001ff0:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8001ff2:	463b      	mov	r3, r7
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	601a      	str	r2, [r3, #0]
 8001ff8:	605a      	str	r2, [r3, #4]
 8001ffa:	609a      	str	r2, [r3, #8]
 8001ffc:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001ffe:	4b28      	ldr	r3, [pc, #160]	; (80020a0 <MX_ADC1_Init+0xb4>)
 8002000:	4a28      	ldr	r2, [pc, #160]	; (80020a4 <MX_ADC1_Init+0xb8>)
 8002002:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8002004:	4b26      	ldr	r3, [pc, #152]	; (80020a0 <MX_ADC1_Init+0xb4>)
 8002006:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800200a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800200c:	4b24      	ldr	r3, [pc, #144]	; (80020a0 <MX_ADC1_Init+0xb4>)
 800200e:	2200      	movs	r2, #0
 8002010:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8002012:	4b23      	ldr	r3, [pc, #140]	; (80020a0 <MX_ADC1_Init+0xb4>)
 8002014:	2201      	movs	r2, #1
 8002016:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002018:	4b21      	ldr	r3, [pc, #132]	; (80020a0 <MX_ADC1_Init+0xb4>)
 800201a:	2200      	movs	r2, #0
 800201c:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800201e:	4b20      	ldr	r3, [pc, #128]	; (80020a0 <MX_ADC1_Init+0xb4>)
 8002020:	2200      	movs	r2, #0
 8002022:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002026:	4b1e      	ldr	r3, [pc, #120]	; (80020a0 <MX_ADC1_Init+0xb4>)
 8002028:	2200      	movs	r2, #0
 800202a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800202c:	4b1c      	ldr	r3, [pc, #112]	; (80020a0 <MX_ADC1_Init+0xb4>)
 800202e:	4a1e      	ldr	r2, [pc, #120]	; (80020a8 <MX_ADC1_Init+0xbc>)
 8002030:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002032:	4b1b      	ldr	r3, [pc, #108]	; (80020a0 <MX_ADC1_Init+0xb4>)
 8002034:	2200      	movs	r2, #0
 8002036:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8002038:	4b19      	ldr	r3, [pc, #100]	; (80020a0 <MX_ADC1_Init+0xb4>)
 800203a:	2202      	movs	r2, #2
 800203c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800203e:	4b18      	ldr	r3, [pc, #96]	; (80020a0 <MX_ADC1_Init+0xb4>)
 8002040:	2201      	movs	r2, #1
 8002042:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8002046:	4b16      	ldr	r3, [pc, #88]	; (80020a0 <MX_ADC1_Init+0xb4>)
 8002048:	2200      	movs	r2, #0
 800204a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800204c:	4814      	ldr	r0, [pc, #80]	; (80020a0 <MX_ADC1_Init+0xb4>)
 800204e:	f001 fcd5 	bl	80039fc <HAL_ADC_Init>
 8002052:	4603      	mov	r3, r0
 8002054:	2b00      	cmp	r3, #0
 8002056:	d001      	beq.n	800205c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8002058:	f001 f802 	bl	8003060 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 800205c:	230c      	movs	r3, #12
 800205e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002060:	2301      	movs	r3, #1
 8002062:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8002064:	2307      	movs	r3, #7
 8002066:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002068:	463b      	mov	r3, r7
 800206a:	4619      	mov	r1, r3
 800206c:	480c      	ldr	r0, [pc, #48]	; (80020a0 <MX_ADC1_Init+0xb4>)
 800206e:	f001 fe0b 	bl	8003c88 <HAL_ADC_ConfigChannel>
 8002072:	4603      	mov	r3, r0
 8002074:	2b00      	cmp	r3, #0
 8002076:	d001      	beq.n	800207c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8002078:	f000 fff2 	bl	8003060 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800207c:	2306      	movs	r3, #6
 800207e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8002080:	2302      	movs	r3, #2
 8002082:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002084:	463b      	mov	r3, r7
 8002086:	4619      	mov	r1, r3
 8002088:	4805      	ldr	r0, [pc, #20]	; (80020a0 <MX_ADC1_Init+0xb4>)
 800208a:	f001 fdfd 	bl	8003c88 <HAL_ADC_ConfigChannel>
 800208e:	4603      	mov	r3, r0
 8002090:	2b00      	cmp	r3, #0
 8002092:	d001      	beq.n	8002098 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8002094:	f000 ffe4 	bl	8003060 <Error_Handler>
  }

}
 8002098:	bf00      	nop
 800209a:	3710      	adds	r7, #16
 800209c:	46bd      	mov	sp, r7
 800209e:	bd80      	pop	{r7, pc}
 80020a0:	200001f0 	.word	0x200001f0
 80020a4:	40012000 	.word	0x40012000
 80020a8:	0f000001 	.word	0x0f000001

080020ac <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b08a      	sub	sp, #40	; 0x28
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020b4:	f107 0314 	add.w	r3, r7, #20
 80020b8:	2200      	movs	r2, #0
 80020ba:	601a      	str	r2, [r3, #0]
 80020bc:	605a      	str	r2, [r3, #4]
 80020be:	609a      	str	r2, [r3, #8]
 80020c0:	60da      	str	r2, [r3, #12]
 80020c2:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4a39      	ldr	r2, [pc, #228]	; (80021b0 <HAL_ADC_MspInit+0x104>)
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d16b      	bne.n	80021a6 <HAL_ADC_MspInit+0xfa>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80020ce:	4b39      	ldr	r3, [pc, #228]	; (80021b4 <HAL_ADC_MspInit+0x108>)
 80020d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020d2:	4a38      	ldr	r2, [pc, #224]	; (80021b4 <HAL_ADC_MspInit+0x108>)
 80020d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020d8:	6453      	str	r3, [r2, #68]	; 0x44
 80020da:	4b36      	ldr	r3, [pc, #216]	; (80021b4 <HAL_ADC_MspInit+0x108>)
 80020dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020e2:	613b      	str	r3, [r7, #16]
 80020e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80020e6:	4b33      	ldr	r3, [pc, #204]	; (80021b4 <HAL_ADC_MspInit+0x108>)
 80020e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ea:	4a32      	ldr	r2, [pc, #200]	; (80021b4 <HAL_ADC_MspInit+0x108>)
 80020ec:	f043 0304 	orr.w	r3, r3, #4
 80020f0:	6313      	str	r3, [r2, #48]	; 0x30
 80020f2:	4b30      	ldr	r3, [pc, #192]	; (80021b4 <HAL_ADC_MspInit+0x108>)
 80020f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020f6:	f003 0304 	and.w	r3, r3, #4
 80020fa:	60fb      	str	r3, [r7, #12]
 80020fc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020fe:	4b2d      	ldr	r3, [pc, #180]	; (80021b4 <HAL_ADC_MspInit+0x108>)
 8002100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002102:	4a2c      	ldr	r2, [pc, #176]	; (80021b4 <HAL_ADC_MspInit+0x108>)
 8002104:	f043 0301 	orr.w	r3, r3, #1
 8002108:	6313      	str	r3, [r2, #48]	; 0x30
 800210a:	4b2a      	ldr	r3, [pc, #168]	; (80021b4 <HAL_ADC_MspInit+0x108>)
 800210c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800210e:	f003 0301 	and.w	r3, r3, #1
 8002112:	60bb      	str	r3, [r7, #8]
 8002114:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC2     ------> ADC1_IN12
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = POT1_AIN_Pin;
 8002116:	2304      	movs	r3, #4
 8002118:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800211a:	2303      	movs	r3, #3
 800211c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800211e:	2300      	movs	r3, #0
 8002120:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(POT1_AIN_GPIO_Port, &GPIO_InitStruct);
 8002122:	f107 0314 	add.w	r3, r7, #20
 8002126:	4619      	mov	r1, r3
 8002128:	4823      	ldr	r0, [pc, #140]	; (80021b8 <HAL_ADC_MspInit+0x10c>)
 800212a:	f002 fde9 	bl	8004d00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = POT2_AIN_Pin;
 800212e:	2340      	movs	r3, #64	; 0x40
 8002130:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002132:	2303      	movs	r3, #3
 8002134:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002136:	2300      	movs	r3, #0
 8002138:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(POT2_AIN_GPIO_Port, &GPIO_InitStruct);
 800213a:	f107 0314 	add.w	r3, r7, #20
 800213e:	4619      	mov	r1, r3
 8002140:	481e      	ldr	r0, [pc, #120]	; (80021bc <HAL_ADC_MspInit+0x110>)
 8002142:	f002 fddd 	bl	8004d00 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8002146:	4b1e      	ldr	r3, [pc, #120]	; (80021c0 <HAL_ADC_MspInit+0x114>)
 8002148:	4a1e      	ldr	r2, [pc, #120]	; (80021c4 <HAL_ADC_MspInit+0x118>)
 800214a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800214c:	4b1c      	ldr	r3, [pc, #112]	; (80021c0 <HAL_ADC_MspInit+0x114>)
 800214e:	2200      	movs	r2, #0
 8002150:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002152:	4b1b      	ldr	r3, [pc, #108]	; (80021c0 <HAL_ADC_MspInit+0x114>)
 8002154:	2200      	movs	r2, #0
 8002156:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002158:	4b19      	ldr	r3, [pc, #100]	; (80021c0 <HAL_ADC_MspInit+0x114>)
 800215a:	2200      	movs	r2, #0
 800215c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800215e:	4b18      	ldr	r3, [pc, #96]	; (80021c0 <HAL_ADC_MspInit+0x114>)
 8002160:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002164:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002166:	4b16      	ldr	r3, [pc, #88]	; (80021c0 <HAL_ADC_MspInit+0x114>)
 8002168:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800216c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800216e:	4b14      	ldr	r3, [pc, #80]	; (80021c0 <HAL_ADC_MspInit+0x114>)
 8002170:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002174:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002176:	4b12      	ldr	r3, [pc, #72]	; (80021c0 <HAL_ADC_MspInit+0x114>)
 8002178:	f44f 7280 	mov.w	r2, #256	; 0x100
 800217c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800217e:	4b10      	ldr	r3, [pc, #64]	; (80021c0 <HAL_ADC_MspInit+0x114>)
 8002180:	2200      	movs	r2, #0
 8002182:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002184:	4b0e      	ldr	r3, [pc, #56]	; (80021c0 <HAL_ADC_MspInit+0x114>)
 8002186:	2200      	movs	r2, #0
 8002188:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800218a:	480d      	ldr	r0, [pc, #52]	; (80021c0 <HAL_ADC_MspInit+0x114>)
 800218c:	f002 fa20 	bl	80045d0 <HAL_DMA_Init>
 8002190:	4603      	mov	r3, r0
 8002192:	2b00      	cmp	r3, #0
 8002194:	d001      	beq.n	800219a <HAL_ADC_MspInit+0xee>
    {
      Error_Handler();
 8002196:	f000 ff63 	bl	8003060 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	4a08      	ldr	r2, [pc, #32]	; (80021c0 <HAL_ADC_MspInit+0x114>)
 800219e:	639a      	str	r2, [r3, #56]	; 0x38
 80021a0:	4a07      	ldr	r2, [pc, #28]	; (80021c0 <HAL_ADC_MspInit+0x114>)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80021a6:	bf00      	nop
 80021a8:	3728      	adds	r7, #40	; 0x28
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd80      	pop	{r7, pc}
 80021ae:	bf00      	nop
 80021b0:	40012000 	.word	0x40012000
 80021b4:	40023800 	.word	0x40023800
 80021b8:	40020800 	.word	0x40020800
 80021bc:	40020000 	.word	0x40020000
 80021c0:	20000238 	.word	0x20000238
 80021c4:	40026410 	.word	0x40026410

080021c8 <MX_DAC_Init>:
DAC_HandleTypeDef hdac;
DMA_HandleTypeDef hdma_dac1;

/* DAC init function */
void MX_DAC_Init(void)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b082      	sub	sp, #8
 80021cc:	af00      	add	r7, sp, #0
  DAC_ChannelConfTypeDef sConfig = {0};
 80021ce:	463b      	mov	r3, r7
 80021d0:	2200      	movs	r2, #0
 80021d2:	601a      	str	r2, [r3, #0]
 80021d4:	605a      	str	r2, [r3, #4]

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 80021d6:	4b0f      	ldr	r3, [pc, #60]	; (8002214 <MX_DAC_Init+0x4c>)
 80021d8:	4a0f      	ldr	r2, [pc, #60]	; (8002218 <MX_DAC_Init+0x50>)
 80021da:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80021dc:	480d      	ldr	r0, [pc, #52]	; (8002214 <MX_DAC_Init+0x4c>)
 80021de:	f002 f92a 	bl	8004436 <HAL_DAC_Init>
 80021e2:	4603      	mov	r3, r0
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d001      	beq.n	80021ec <MX_DAC_Init+0x24>
  {
    Error_Handler();
 80021e8:	f000 ff3a 	bl	8003060 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80021ec:	2300      	movs	r3, #0
 80021ee:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80021f0:	2300      	movs	r3, #0
 80021f2:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80021f4:	463b      	mov	r3, r7
 80021f6:	2200      	movs	r2, #0
 80021f8:	4619      	mov	r1, r3
 80021fa:	4806      	ldr	r0, [pc, #24]	; (8002214 <MX_DAC_Init+0x4c>)
 80021fc:	f002 f991 	bl	8004522 <HAL_DAC_ConfigChannel>
 8002200:	4603      	mov	r3, r0
 8002202:	2b00      	cmp	r3, #0
 8002204:	d001      	beq.n	800220a <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8002206:	f000 ff2b 	bl	8003060 <Error_Handler>
  }

}
 800220a:	bf00      	nop
 800220c:	3708      	adds	r7, #8
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}
 8002212:	bf00      	nop
 8002214:	200002f8 	.word	0x200002f8
 8002218:	40007400 	.word	0x40007400

0800221c <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b08a      	sub	sp, #40	; 0x28
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002224:	f107 0314 	add.w	r3, r7, #20
 8002228:	2200      	movs	r2, #0
 800222a:	601a      	str	r2, [r3, #0]
 800222c:	605a      	str	r2, [r3, #4]
 800222e:	609a      	str	r2, [r3, #8]
 8002230:	60da      	str	r2, [r3, #12]
 8002232:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4a31      	ldr	r2, [pc, #196]	; (8002300 <HAL_DAC_MspInit+0xe4>)
 800223a:	4293      	cmp	r3, r2
 800223c:	d15b      	bne.n	80022f6 <HAL_DAC_MspInit+0xda>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* DAC clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 800223e:	4b31      	ldr	r3, [pc, #196]	; (8002304 <HAL_DAC_MspInit+0xe8>)
 8002240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002242:	4a30      	ldr	r2, [pc, #192]	; (8002304 <HAL_DAC_MspInit+0xe8>)
 8002244:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002248:	6413      	str	r3, [r2, #64]	; 0x40
 800224a:	4b2e      	ldr	r3, [pc, #184]	; (8002304 <HAL_DAC_MspInit+0xe8>)
 800224c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800224e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002252:	613b      	str	r3, [r7, #16]
 8002254:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002256:	4b2b      	ldr	r3, [pc, #172]	; (8002304 <HAL_DAC_MspInit+0xe8>)
 8002258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800225a:	4a2a      	ldr	r2, [pc, #168]	; (8002304 <HAL_DAC_MspInit+0xe8>)
 800225c:	f043 0301 	orr.w	r3, r3, #1
 8002260:	6313      	str	r3, [r2, #48]	; 0x30
 8002262:	4b28      	ldr	r3, [pc, #160]	; (8002304 <HAL_DAC_MspInit+0xe8>)
 8002264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002266:	f003 0301 	and.w	r3, r3, #1
 800226a:	60fb      	str	r3, [r7, #12]
 800226c:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = OSC_AOUT_Pin;
 800226e:	2310      	movs	r3, #16
 8002270:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002272:	2303      	movs	r3, #3
 8002274:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002276:	2300      	movs	r3, #0
 8002278:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(OSC_AOUT_GPIO_Port, &GPIO_InitStruct);
 800227a:	f107 0314 	add.w	r3, r7, #20
 800227e:	4619      	mov	r1, r3
 8002280:	4821      	ldr	r0, [pc, #132]	; (8002308 <HAL_DAC_MspInit+0xec>)
 8002282:	f002 fd3d 	bl	8004d00 <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC1 Init */
    hdma_dac1.Instance = DMA1_Stream5;
 8002286:	4b21      	ldr	r3, [pc, #132]	; (800230c <HAL_DAC_MspInit+0xf0>)
 8002288:	4a21      	ldr	r2, [pc, #132]	; (8002310 <HAL_DAC_MspInit+0xf4>)
 800228a:	601a      	str	r2, [r3, #0]
    hdma_dac1.Init.Channel = DMA_CHANNEL_7;
 800228c:	4b1f      	ldr	r3, [pc, #124]	; (800230c <HAL_DAC_MspInit+0xf0>)
 800228e:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 8002292:	605a      	str	r2, [r3, #4]
    hdma_dac1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002294:	4b1d      	ldr	r3, [pc, #116]	; (800230c <HAL_DAC_MspInit+0xf0>)
 8002296:	2240      	movs	r2, #64	; 0x40
 8002298:	609a      	str	r2, [r3, #8]
    hdma_dac1.Init.PeriphInc = DMA_PINC_DISABLE;
 800229a:	4b1c      	ldr	r3, [pc, #112]	; (800230c <HAL_DAC_MspInit+0xf0>)
 800229c:	2200      	movs	r2, #0
 800229e:	60da      	str	r2, [r3, #12]
    hdma_dac1.Init.MemInc = DMA_MINC_ENABLE;
 80022a0:	4b1a      	ldr	r3, [pc, #104]	; (800230c <HAL_DAC_MspInit+0xf0>)
 80022a2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80022a6:	611a      	str	r2, [r3, #16]
    hdma_dac1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80022a8:	4b18      	ldr	r3, [pc, #96]	; (800230c <HAL_DAC_MspInit+0xf0>)
 80022aa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80022ae:	615a      	str	r2, [r3, #20]
    hdma_dac1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80022b0:	4b16      	ldr	r3, [pc, #88]	; (800230c <HAL_DAC_MspInit+0xf0>)
 80022b2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80022b6:	619a      	str	r2, [r3, #24]
    hdma_dac1.Init.Mode = DMA_NORMAL;
 80022b8:	4b14      	ldr	r3, [pc, #80]	; (800230c <HAL_DAC_MspInit+0xf0>)
 80022ba:	2200      	movs	r2, #0
 80022bc:	61da      	str	r2, [r3, #28]
    hdma_dac1.Init.Priority = DMA_PRIORITY_LOW;
 80022be:	4b13      	ldr	r3, [pc, #76]	; (800230c <HAL_DAC_MspInit+0xf0>)
 80022c0:	2200      	movs	r2, #0
 80022c2:	621a      	str	r2, [r3, #32]
    hdma_dac1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80022c4:	4b11      	ldr	r3, [pc, #68]	; (800230c <HAL_DAC_MspInit+0xf0>)
 80022c6:	2200      	movs	r2, #0
 80022c8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1) != HAL_OK)
 80022ca:	4810      	ldr	r0, [pc, #64]	; (800230c <HAL_DAC_MspInit+0xf0>)
 80022cc:	f002 f980 	bl	80045d0 <HAL_DMA_Init>
 80022d0:	4603      	mov	r3, r0
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d001      	beq.n	80022da <HAL_DAC_MspInit+0xbe>
    {
      Error_Handler();
 80022d6:	f000 fec3 	bl	8003060 <Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac1);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	4a0b      	ldr	r2, [pc, #44]	; (800230c <HAL_DAC_MspInit+0xf0>)
 80022de:	609a      	str	r2, [r3, #8]
 80022e0:	4a0a      	ldr	r2, [pc, #40]	; (800230c <HAL_DAC_MspInit+0xf0>)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6393      	str	r3, [r2, #56]	; 0x38

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80022e6:	2200      	movs	r2, #0
 80022e8:	2100      	movs	r1, #0
 80022ea:	2036      	movs	r0, #54	; 0x36
 80022ec:	f002 f86d 	bl	80043ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80022f0:	2036      	movs	r0, #54	; 0x36
 80022f2:	f002 f886 	bl	8004402 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }
}
 80022f6:	bf00      	nop
 80022f8:	3728      	adds	r7, #40	; 0x28
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}
 80022fe:	bf00      	nop
 8002300:	40007400 	.word	0x40007400
 8002304:	40023800 	.word	0x40023800
 8002308:	40020000 	.word	0x40020000
 800230c:	20000298 	.word	0x20000298
 8002310:	40026088 	.word	0x40026088

08002314 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b082      	sub	sp, #8
 8002318:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800231a:	4b16      	ldr	r3, [pc, #88]	; (8002374 <MX_DMA_Init+0x60>)
 800231c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800231e:	4a15      	ldr	r2, [pc, #84]	; (8002374 <MX_DMA_Init+0x60>)
 8002320:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002324:	6313      	str	r3, [r2, #48]	; 0x30
 8002326:	4b13      	ldr	r3, [pc, #76]	; (8002374 <MX_DMA_Init+0x60>)
 8002328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800232a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800232e:	607b      	str	r3, [r7, #4]
 8002330:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002332:	4b10      	ldr	r3, [pc, #64]	; (8002374 <MX_DMA_Init+0x60>)
 8002334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002336:	4a0f      	ldr	r2, [pc, #60]	; (8002374 <MX_DMA_Init+0x60>)
 8002338:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800233c:	6313      	str	r3, [r2, #48]	; 0x30
 800233e:	4b0d      	ldr	r3, [pc, #52]	; (8002374 <MX_DMA_Init+0x60>)
 8002340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002342:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002346:	603b      	str	r3, [r7, #0]
 8002348:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800234a:	2200      	movs	r2, #0
 800234c:	2100      	movs	r1, #0
 800234e:	2010      	movs	r0, #16
 8002350:	f002 f83b 	bl	80043ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8002354:	2010      	movs	r0, #16
 8002356:	f002 f854 	bl	8004402 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800235a:	2200      	movs	r2, #0
 800235c:	2100      	movs	r1, #0
 800235e:	2038      	movs	r0, #56	; 0x38
 8002360:	f002 f833 	bl	80043ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8002364:	2038      	movs	r0, #56	; 0x38
 8002366:	f002 f84c 	bl	8004402 <HAL_NVIC_EnableIRQ>

}
 800236a:	bf00      	nop
 800236c:	3708      	adds	r7, #8
 800236e:	46bd      	mov	sp, r7
 8002370:	bd80      	pop	{r7, pc}
 8002372:	bf00      	nop
 8002374:	40023800 	.word	0x40023800

08002378 <MX_GPIO_Init>:
     PA12   ------> USB_OTG_FS_DP
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b08e      	sub	sp, #56	; 0x38
 800237c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800237e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002382:	2200      	movs	r2, #0
 8002384:	601a      	str	r2, [r3, #0]
 8002386:	605a      	str	r2, [r3, #4]
 8002388:	609a      	str	r2, [r3, #8]
 800238a:	60da      	str	r2, [r3, #12]
 800238c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800238e:	4bb1      	ldr	r3, [pc, #708]	; (8002654 <MX_GPIO_Init+0x2dc>)
 8002390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002392:	4ab0      	ldr	r2, [pc, #704]	; (8002654 <MX_GPIO_Init+0x2dc>)
 8002394:	f043 0310 	orr.w	r3, r3, #16
 8002398:	6313      	str	r3, [r2, #48]	; 0x30
 800239a:	4bae      	ldr	r3, [pc, #696]	; (8002654 <MX_GPIO_Init+0x2dc>)
 800239c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800239e:	f003 0310 	and.w	r3, r3, #16
 80023a2:	623b      	str	r3, [r7, #32]
 80023a4:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80023a6:	4bab      	ldr	r3, [pc, #684]	; (8002654 <MX_GPIO_Init+0x2dc>)
 80023a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023aa:	4aaa      	ldr	r2, [pc, #680]	; (8002654 <MX_GPIO_Init+0x2dc>)
 80023ac:	f043 0304 	orr.w	r3, r3, #4
 80023b0:	6313      	str	r3, [r2, #48]	; 0x30
 80023b2:	4ba8      	ldr	r3, [pc, #672]	; (8002654 <MX_GPIO_Init+0x2dc>)
 80023b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023b6:	f003 0304 	and.w	r3, r3, #4
 80023ba:	61fb      	str	r3, [r7, #28]
 80023bc:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80023be:	4ba5      	ldr	r3, [pc, #660]	; (8002654 <MX_GPIO_Init+0x2dc>)
 80023c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023c2:	4aa4      	ldr	r2, [pc, #656]	; (8002654 <MX_GPIO_Init+0x2dc>)
 80023c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80023c8:	6313      	str	r3, [r2, #48]	; 0x30
 80023ca:	4ba2      	ldr	r3, [pc, #648]	; (8002654 <MX_GPIO_Init+0x2dc>)
 80023cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023d2:	61bb      	str	r3, [r7, #24]
 80023d4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80023d6:	4b9f      	ldr	r3, [pc, #636]	; (8002654 <MX_GPIO_Init+0x2dc>)
 80023d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023da:	4a9e      	ldr	r2, [pc, #632]	; (8002654 <MX_GPIO_Init+0x2dc>)
 80023dc:	f043 0301 	orr.w	r3, r3, #1
 80023e0:	6313      	str	r3, [r2, #48]	; 0x30
 80023e2:	4b9c      	ldr	r3, [pc, #624]	; (8002654 <MX_GPIO_Init+0x2dc>)
 80023e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023e6:	f003 0301 	and.w	r3, r3, #1
 80023ea:	617b      	str	r3, [r7, #20]
 80023ec:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80023ee:	4b99      	ldr	r3, [pc, #612]	; (8002654 <MX_GPIO_Init+0x2dc>)
 80023f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023f2:	4a98      	ldr	r2, [pc, #608]	; (8002654 <MX_GPIO_Init+0x2dc>)
 80023f4:	f043 0302 	orr.w	r3, r3, #2
 80023f8:	6313      	str	r3, [r2, #48]	; 0x30
 80023fa:	4b96      	ldr	r3, [pc, #600]	; (8002654 <MX_GPIO_Init+0x2dc>)
 80023fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023fe:	f003 0302 	and.w	r3, r3, #2
 8002402:	613b      	str	r3, [r7, #16]
 8002404:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002406:	4b93      	ldr	r3, [pc, #588]	; (8002654 <MX_GPIO_Init+0x2dc>)
 8002408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800240a:	4a92      	ldr	r2, [pc, #584]	; (8002654 <MX_GPIO_Init+0x2dc>)
 800240c:	f043 0320 	orr.w	r3, r3, #32
 8002410:	6313      	str	r3, [r2, #48]	; 0x30
 8002412:	4b90      	ldr	r3, [pc, #576]	; (8002654 <MX_GPIO_Init+0x2dc>)
 8002414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002416:	f003 0320 	and.w	r3, r3, #32
 800241a:	60fb      	str	r3, [r7, #12]
 800241c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800241e:	4b8d      	ldr	r3, [pc, #564]	; (8002654 <MX_GPIO_Init+0x2dc>)
 8002420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002422:	4a8c      	ldr	r2, [pc, #560]	; (8002654 <MX_GPIO_Init+0x2dc>)
 8002424:	f043 0308 	orr.w	r3, r3, #8
 8002428:	6313      	str	r3, [r2, #48]	; 0x30
 800242a:	4b8a      	ldr	r3, [pc, #552]	; (8002654 <MX_GPIO_Init+0x2dc>)
 800242c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800242e:	f003 0308 	and.w	r3, r3, #8
 8002432:	60bb      	str	r3, [r7, #8]
 8002434:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002436:	4b87      	ldr	r3, [pc, #540]	; (8002654 <MX_GPIO_Init+0x2dc>)
 8002438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800243a:	4a86      	ldr	r2, [pc, #536]	; (8002654 <MX_GPIO_Init+0x2dc>)
 800243c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002440:	6313      	str	r3, [r2, #48]	; 0x30
 8002442:	4b84      	ldr	r3, [pc, #528]	; (8002654 <MX_GPIO_Init+0x2dc>)
 8002444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002446:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800244a:	607b      	str	r3, [r7, #4]
 800244c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, BMP280_CS2_Pin|BMP280_CS1_Pin, GPIO_PIN_SET);
 800244e:	2201      	movs	r2, #1
 8002450:	2118      	movs	r1, #24
 8002452:	4881      	ldr	r0, [pc, #516]	; (8002658 <MX_GPIO_Init+0x2e0>)
 8002454:	f002 fdfe 	bl	8005054 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LCD_RW_Pin|LCD_RS_Pin|LAMP_TRIAC_Pin, GPIO_PIN_RESET);
 8002458:	2200      	movs	r2, #0
 800245a:	2149      	movs	r1, #73	; 0x49
 800245c:	487f      	ldr	r0, [pc, #508]	; (800265c <MX_GPIO_Init+0x2e4>)
 800245e:	f002 fdf9 	bl	8005054 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_EN_GPIO_Port, LCD_EN_Pin, GPIO_PIN_RESET);
 8002462:	2200      	movs	r2, #0
 8002464:	2108      	movs	r1, #8
 8002466:	487e      	ldr	r0, [pc, #504]	; (8002660 <MX_GPIO_Init+0x2e8>)
 8002468:	f002 fdf4 	bl	8005054 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD2EX_Pin|LD3EX_Pin|LD3_Pin
 800246c:	2200      	movs	r2, #0
 800246e:	f644 4181 	movw	r1, #19585	; 0x4c81
 8002472:	487c      	ldr	r0, [pc, #496]	; (8002664 <MX_GPIO_Init+0x2ec>)
 8002474:	f002 fdee 	bl	8005054 <HAL_GPIO_WritePin>
                          |LD2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD1EX_GPIO_Port, LD1EX_Pin, GPIO_PIN_RESET);
 8002478:	2200      	movs	r2, #0
 800247a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800247e:	4876      	ldr	r0, [pc, #472]	; (8002658 <MX_GPIO_Init+0x2e0>)
 8002480:	f002 fde8 	bl	8005054 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8002484:	2200      	movs	r2, #0
 8002486:	2140      	movs	r1, #64	; 0x40
 8002488:	4877      	ldr	r0, [pc, #476]	; (8002668 <MX_GPIO_Init+0x2f0>)
 800248a:	f002 fde3 	bl	8005054 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LCD_D4_Pin|LCD_D5_Pin|LCD_D6_Pin|LCD_D7_Pin, GPIO_PIN_RESET);
 800248e:	2200      	movs	r2, #0
 8002490:	21f0      	movs	r1, #240	; 0xf0
 8002492:	4876      	ldr	r0, [pc, #472]	; (800266c <MX_GPIO_Init+0x2f4>)
 8002494:	f002 fdde 	bl	8005054 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = BMP280_CS2_Pin|BMP280_CS1_Pin;
 8002498:	2318      	movs	r3, #24
 800249a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800249c:	2301      	movs	r3, #1
 800249e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024a0:	2300      	movs	r3, #0
 80024a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024a4:	2303      	movs	r3, #3
 80024a6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80024a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024ac:	4619      	mov	r1, r3
 80024ae:	486a      	ldr	r0, [pc, #424]	; (8002658 <MX_GPIO_Init+0x2e0>)
 80024b0:	f002 fc26 	bl	8004d00 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80024b4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80024b8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80024ba:	4b6d      	ldr	r3, [pc, #436]	; (8002670 <MX_GPIO_Init+0x2f8>)
 80024bc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024be:	2300      	movs	r3, #0
 80024c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80024c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024c6:	4619      	mov	r1, r3
 80024c8:	4864      	ldr	r0, [pc, #400]	; (800265c <MX_GPIO_Init+0x2e4>)
 80024ca:	f002 fc19 	bl	8004d00 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = LCD_RW_Pin|LCD_RS_Pin;
 80024ce:	2309      	movs	r3, #9
 80024d0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024d2:	2301      	movs	r3, #1
 80024d4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024d6:	2300      	movs	r3, #0
 80024d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024da:	2300      	movs	r3, #0
 80024dc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80024de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024e2:	4619      	mov	r1, r3
 80024e4:	485d      	ldr	r0, [pc, #372]	; (800265c <MX_GPIO_Init+0x2e4>)
 80024e6:	f002 fc0b 	bl	8004d00 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80024ea:	2332      	movs	r3, #50	; 0x32
 80024ec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024ee:	2302      	movs	r3, #2
 80024f0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024f2:	2300      	movs	r3, #0
 80024f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024f6:	2303      	movs	r3, #3
 80024f8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80024fa:	230b      	movs	r3, #11
 80024fc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80024fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002502:	4619      	mov	r1, r3
 8002504:	4855      	ldr	r0, [pc, #340]	; (800265c <MX_GPIO_Init+0x2e4>)
 8002506:	f002 fbfb 	bl	8004d00 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin;
 800250a:	2306      	movs	r3, #6
 800250c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800250e:	2302      	movs	r3, #2
 8002510:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002512:	2300      	movs	r3, #0
 8002514:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002516:	2303      	movs	r3, #3
 8002518:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800251a:	230b      	movs	r3, #11
 800251c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800251e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002522:	4619      	mov	r1, r3
 8002524:	484e      	ldr	r0, [pc, #312]	; (8002660 <MX_GPIO_Init+0x2e8>)
 8002526:	f002 fbeb 	bl	8004d00 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_EN_Pin;
 800252a:	2308      	movs	r3, #8
 800252c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800252e:	2301      	movs	r3, #1
 8002530:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002532:	2300      	movs	r3, #0
 8002534:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002536:	2300      	movs	r3, #0
 8002538:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_EN_GPIO_Port, &GPIO_InitStruct);
 800253a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800253e:	4619      	mov	r1, r3
 8002540:	4847      	ldr	r0, [pc, #284]	; (8002660 <MX_GPIO_Init+0x2e8>)
 8002542:	f002 fbdd 	bl	8004d00 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = EX1_Btn_Pin;
 8002546:	2320      	movs	r3, #32
 8002548:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800254a:	4b4a      	ldr	r3, [pc, #296]	; (8002674 <MX_GPIO_Init+0x2fc>)
 800254c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800254e:	2300      	movs	r3, #0
 8002550:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(EX1_Btn_GPIO_Port, &GPIO_InitStruct);
 8002552:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002556:	4619      	mov	r1, r3
 8002558:	4841      	ldr	r0, [pc, #260]	; (8002660 <MX_GPIO_Init+0x2e8>)
 800255a:	f002 fbd1 	bl	8004d00 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD2EX_Pin|LD3EX_Pin|LD3_Pin
 800255e:	f644 4381 	movw	r3, #19585	; 0x4c81
 8002562:	627b      	str	r3, [r7, #36]	; 0x24
                          |LD2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002564:	2301      	movs	r3, #1
 8002566:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002568:	2300      	movs	r3, #0
 800256a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800256c:	2300      	movs	r3, #0
 800256e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002570:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002574:	4619      	mov	r1, r3
 8002576:	483b      	ldr	r0, [pc, #236]	; (8002664 <MX_GPIO_Init+0x2ec>)
 8002578:	f002 fbc2 	bl	8004d00 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = EX2_Btn_Pin;
 800257c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002580:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002582:	4b3b      	ldr	r3, [pc, #236]	; (8002670 <MX_GPIO_Init+0x2f8>)
 8002584:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002586:	2300      	movs	r3, #0
 8002588:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(EX2_Btn_GPIO_Port, &GPIO_InitStruct);
 800258a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800258e:	4619      	mov	r1, r3
 8002590:	4839      	ldr	r0, [pc, #228]	; (8002678 <MX_GPIO_Init+0x300>)
 8002592:	f002 fbb5 	bl	8004d00 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD1EX_Pin;
 8002596:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800259a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800259c:	2301      	movs	r3, #1
 800259e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025a0:	2300      	movs	r3, #0
 80025a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025a4:	2300      	movs	r3, #0
 80025a6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD1EX_GPIO_Port, &GPIO_InitStruct);
 80025a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80025ac:	4619      	mov	r1, r3
 80025ae:	482a      	ldr	r0, [pc, #168]	; (8002658 <MX_GPIO_Init+0x2e0>)
 80025b0:	f002 fba6 	bl	8004d00 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80025b4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80025b8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025ba:	2302      	movs	r3, #2
 80025bc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025be:	2300      	movs	r3, #0
 80025c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025c2:	2303      	movs	r3, #3
 80025c4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80025c6:	230b      	movs	r3, #11
 80025c8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80025ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80025ce:	4619      	mov	r1, r3
 80025d0:	4824      	ldr	r0, [pc, #144]	; (8002664 <MX_GPIO_Init+0x2ec>)
 80025d2:	f002 fb95 	bl	8004d00 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LAMP_SYNC_Pin;
 80025d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80025da:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80025dc:	4b24      	ldr	r3, [pc, #144]	; (8002670 <MX_GPIO_Init+0x2f8>)
 80025de:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025e0:	2300      	movs	r3, #0
 80025e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(LAMP_SYNC_GPIO_Port, &GPIO_InitStruct);
 80025e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80025e8:	4619      	mov	r1, r3
 80025ea:	481e      	ldr	r0, [pc, #120]	; (8002664 <MX_GPIO_Init+0x2ec>)
 80025ec:	f002 fb88 	bl	8004d00 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ENC_CLK_Pin;
 80025f0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80025f4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80025f6:	4b1f      	ldr	r3, [pc, #124]	; (8002674 <MX_GPIO_Init+0x2fc>)
 80025f8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025fa:	2300      	movs	r3, #0
 80025fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(ENC_CLK_GPIO_Port, &GPIO_InitStruct);
 80025fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002602:	4619      	mov	r1, r3
 8002604:	4819      	ldr	r0, [pc, #100]	; (800266c <MX_GPIO_Init+0x2f4>)
 8002606:	f002 fb7b 	bl	8004d00 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ENC_DT_Pin;
 800260a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800260e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002610:	2300      	movs	r3, #0
 8002612:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002614:	2300      	movs	r3, #0
 8002616:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(ENC_DT_GPIO_Port, &GPIO_InitStruct);
 8002618:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800261c:	4619      	mov	r1, r3
 800261e:	4813      	ldr	r0, [pc, #76]	; (800266c <MX_GPIO_Init+0x2f4>)
 8002620:	f002 fb6e 	bl	8004d00 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8002624:	2340      	movs	r3, #64	; 0x40
 8002626:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002628:	2301      	movs	r3, #1
 800262a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800262c:	2300      	movs	r3, #0
 800262e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002630:	2300      	movs	r3, #0
 8002632:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8002634:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002638:	4619      	mov	r1, r3
 800263a:	480b      	ldr	r0, [pc, #44]	; (8002668 <MX_GPIO_Init+0x2f0>)
 800263c:	f002 fb60 	bl	8004d00 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8002640:	2380      	movs	r3, #128	; 0x80
 8002642:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002644:	2300      	movs	r3, #0
 8002646:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002648:	2300      	movs	r3, #0
 800264a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800264c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002650:	4619      	mov	r1, r3
 8002652:	e013      	b.n	800267c <MX_GPIO_Init+0x304>
 8002654:	40023800 	.word	0x40023800
 8002658:	40021000 	.word	0x40021000
 800265c:	40020800 	.word	0x40020800
 8002660:	40020000 	.word	0x40020000
 8002664:	40020400 	.word	0x40020400
 8002668:	40021800 	.word	0x40021800
 800266c:	40020c00 	.word	0x40020c00
 8002670:	10110000 	.word	0x10110000
 8002674:	10210000 	.word	0x10210000
 8002678:	40021400 	.word	0x40021400
 800267c:	4830      	ldr	r0, [pc, #192]	; (8002740 <MX_GPIO_Init+0x3c8>)
 800267e:	f002 fb3f 	bl	8004d00 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LAMP_TRIAC_Pin;
 8002682:	2340      	movs	r3, #64	; 0x40
 8002684:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002686:	2301      	movs	r3, #1
 8002688:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800268a:	2300      	movs	r3, #0
 800268c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800268e:	2302      	movs	r3, #2
 8002690:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LAMP_TRIAC_GPIO_Port, &GPIO_InitStruct);
 8002692:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002696:	4619      	mov	r1, r3
 8002698:	482a      	ldr	r0, [pc, #168]	; (8002744 <MX_GPIO_Init+0x3cc>)
 800269a:	f002 fb31 	bl	8004d00 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800269e:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80026a2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026a4:	2302      	movs	r3, #2
 80026a6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026a8:	2300      	movs	r3, #0
 80026aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026ac:	2303      	movs	r3, #3
 80026ae:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80026b0:	230a      	movs	r3, #10
 80026b2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80026b8:	4619      	mov	r1, r3
 80026ba:	4823      	ldr	r0, [pc, #140]	; (8002748 <MX_GPIO_Init+0x3d0>)
 80026bc:	f002 fb20 	bl	8004d00 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80026c0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80026c4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80026c6:	2300      	movs	r3, #0
 80026c8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026ca:	2300      	movs	r3, #0
 80026cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80026ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80026d2:	4619      	mov	r1, r3
 80026d4:	481c      	ldr	r0, [pc, #112]	; (8002748 <MX_GPIO_Init+0x3d0>)
 80026d6:	f002 fb13 	bl	8004d00 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = LCD_D4_Pin|LCD_D5_Pin|LCD_D6_Pin|LCD_D7_Pin;
 80026da:	23f0      	movs	r3, #240	; 0xf0
 80026dc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80026de:	2301      	movs	r3, #1
 80026e0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026e2:	2300      	movs	r3, #0
 80026e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026e6:	2300      	movs	r3, #0
 80026e8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80026ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80026ee:	4619      	mov	r1, r3
 80026f0:	4816      	ldr	r0, [pc, #88]	; (800274c <MX_GPIO_Init+0x3d4>)
 80026f2:	f002 fb05 	bl	8004d00 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80026f6:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80026fa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026fc:	2302      	movs	r3, #2
 80026fe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002700:	2300      	movs	r3, #0
 8002702:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002704:	2303      	movs	r3, #3
 8002706:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002708:	230b      	movs	r3, #11
 800270a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800270c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002710:	4619      	mov	r1, r3
 8002712:	480b      	ldr	r0, [pc, #44]	; (8002740 <MX_GPIO_Init+0x3c8>)
 8002714:	f002 faf4 	bl	8004d00 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8002718:	2200      	movs	r2, #0
 800271a:	2100      	movs	r1, #0
 800271c:	2017      	movs	r0, #23
 800271e:	f001 fe54 	bl	80043ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002722:	2017      	movs	r0, #23
 8002724:	f001 fe6d 	bl	8004402 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002728:	2200      	movs	r2, #0
 800272a:	2100      	movs	r1, #0
 800272c:	2028      	movs	r0, #40	; 0x28
 800272e:	f001 fe4c 	bl	80043ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002732:	2028      	movs	r0, #40	; 0x28
 8002734:	f001 fe65 	bl	8004402 <HAL_NVIC_EnableIRQ>

}
 8002738:	bf00      	nop
 800273a:	3738      	adds	r7, #56	; 0x38
 800273c:	46bd      	mov	sp, r7
 800273e:	bd80      	pop	{r7, pc}
 8002740:	40021800 	.word	0x40021800
 8002744:	40020800 	.word	0x40020800
 8002748:	40020000 	.word	0x40020000
 800274c:	40020c00 	.word	0x40020c00

08002750 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8002754:	4b1b      	ldr	r3, [pc, #108]	; (80027c4 <MX_I2C1_Init+0x74>)
 8002756:	4a1c      	ldr	r2, [pc, #112]	; (80027c8 <MX_I2C1_Init+0x78>)
 8002758:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20404768;
 800275a:	4b1a      	ldr	r3, [pc, #104]	; (80027c4 <MX_I2C1_Init+0x74>)
 800275c:	4a1b      	ldr	r2, [pc, #108]	; (80027cc <MX_I2C1_Init+0x7c>)
 800275e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002760:	4b18      	ldr	r3, [pc, #96]	; (80027c4 <MX_I2C1_Init+0x74>)
 8002762:	2200      	movs	r2, #0
 8002764:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002766:	4b17      	ldr	r3, [pc, #92]	; (80027c4 <MX_I2C1_Init+0x74>)
 8002768:	2201      	movs	r2, #1
 800276a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800276c:	4b15      	ldr	r3, [pc, #84]	; (80027c4 <MX_I2C1_Init+0x74>)
 800276e:	2200      	movs	r2, #0
 8002770:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002772:	4b14      	ldr	r3, [pc, #80]	; (80027c4 <MX_I2C1_Init+0x74>)
 8002774:	2200      	movs	r2, #0
 8002776:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002778:	4b12      	ldr	r3, [pc, #72]	; (80027c4 <MX_I2C1_Init+0x74>)
 800277a:	2200      	movs	r2, #0
 800277c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800277e:	4b11      	ldr	r3, [pc, #68]	; (80027c4 <MX_I2C1_Init+0x74>)
 8002780:	2200      	movs	r2, #0
 8002782:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002784:	4b0f      	ldr	r3, [pc, #60]	; (80027c4 <MX_I2C1_Init+0x74>)
 8002786:	2200      	movs	r2, #0
 8002788:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800278a:	480e      	ldr	r0, [pc, #56]	; (80027c4 <MX_I2C1_Init+0x74>)
 800278c:	f002 fc94 	bl	80050b8 <HAL_I2C_Init>
 8002790:	4603      	mov	r3, r0
 8002792:	2b00      	cmp	r3, #0
 8002794:	d001      	beq.n	800279a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8002796:	f000 fc63 	bl	8003060 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800279a:	2100      	movs	r1, #0
 800279c:	4809      	ldr	r0, [pc, #36]	; (80027c4 <MX_I2C1_Init+0x74>)
 800279e:	f003 f8e5 	bl	800596c <HAL_I2CEx_ConfigAnalogFilter>
 80027a2:	4603      	mov	r3, r0
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d001      	beq.n	80027ac <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80027a8:	f000 fc5a 	bl	8003060 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80027ac:	2100      	movs	r1, #0
 80027ae:	4805      	ldr	r0, [pc, #20]	; (80027c4 <MX_I2C1_Init+0x74>)
 80027b0:	f003 f927 	bl	8005a02 <HAL_I2CEx_ConfigDigitalFilter>
 80027b4:	4603      	mov	r3, r0
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d001      	beq.n	80027be <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80027ba:	f000 fc51 	bl	8003060 <Error_Handler>
  }

}
 80027be:	bf00      	nop
 80027c0:	bd80      	pop	{r7, pc}
 80027c2:	bf00      	nop
 80027c4:	2000030c 	.word	0x2000030c
 80027c8:	40005400 	.word	0x40005400
 80027cc:	20404768 	.word	0x20404768

080027d0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b08a      	sub	sp, #40	; 0x28
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027d8:	f107 0314 	add.w	r3, r7, #20
 80027dc:	2200      	movs	r2, #0
 80027de:	601a      	str	r2, [r3, #0]
 80027e0:	605a      	str	r2, [r3, #4]
 80027e2:	609a      	str	r2, [r3, #8]
 80027e4:	60da      	str	r2, [r3, #12]
 80027e6:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4a17      	ldr	r2, [pc, #92]	; (800284c <HAL_I2C_MspInit+0x7c>)
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d128      	bne.n	8002844 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80027f2:	4b17      	ldr	r3, [pc, #92]	; (8002850 <HAL_I2C_MspInit+0x80>)
 80027f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027f6:	4a16      	ldr	r2, [pc, #88]	; (8002850 <HAL_I2C_MspInit+0x80>)
 80027f8:	f043 0302 	orr.w	r3, r3, #2
 80027fc:	6313      	str	r3, [r2, #48]	; 0x30
 80027fe:	4b14      	ldr	r3, [pc, #80]	; (8002850 <HAL_I2C_MspInit+0x80>)
 8002800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002802:	f003 0302 	and.w	r3, r3, #2
 8002806:	613b      	str	r3, [r7, #16]
 8002808:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = BH1750_SCL_Pin|BH1750_SDA_Pin;
 800280a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800280e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002810:	2312      	movs	r3, #18
 8002812:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002814:	2301      	movs	r3, #1
 8002816:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002818:	2303      	movs	r3, #3
 800281a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800281c:	2304      	movs	r3, #4
 800281e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002820:	f107 0314 	add.w	r3, r7, #20
 8002824:	4619      	mov	r1, r3
 8002826:	480b      	ldr	r0, [pc, #44]	; (8002854 <HAL_I2C_MspInit+0x84>)
 8002828:	f002 fa6a 	bl	8004d00 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800282c:	4b08      	ldr	r3, [pc, #32]	; (8002850 <HAL_I2C_MspInit+0x80>)
 800282e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002830:	4a07      	ldr	r2, [pc, #28]	; (8002850 <HAL_I2C_MspInit+0x80>)
 8002832:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002836:	6413      	str	r3, [r2, #64]	; 0x40
 8002838:	4b05      	ldr	r3, [pc, #20]	; (8002850 <HAL_I2C_MspInit+0x80>)
 800283a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800283c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002840:	60fb      	str	r3, [r7, #12]
 8002842:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8002844:	bf00      	nop
 8002846:	3728      	adds	r7, #40	; 0x28
 8002848:	46bd      	mov	sp, r7
 800284a:	bd80      	pop	{r7, pc}
 800284c:	40005400 	.word	0x40005400
 8002850:	40023800 	.word	0x40023800
 8002854:	40020400 	.word	0x40020400

08002858 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b082      	sub	sp, #8
 800285c:	af00      	add	r7, sp, #0
 800285e:	4603      	mov	r3, r0
 8002860:	80fb      	strh	r3, [r7, #6]
  /* Push buttons handling */
  if(GPIO_Pin == hbtn1.Pin)
 8002862:	4b1a      	ldr	r3, [pc, #104]	; (80028cc <HAL_GPIO_EXTI_Callback+0x74>)
 8002864:	889b      	ldrh	r3, [r3, #4]
 8002866:	88fa      	ldrh	r2, [r7, #6]
 8002868:	429a      	cmp	r2, r3
 800286a:	d10c      	bne.n	8002886 <HAL_GPIO_EXTI_Callback+0x2e>
	 menu_item = (menu_item < HEATER) ? (menu_item + 1) : (LED_R1);
 800286c:	4b18      	ldr	r3, [pc, #96]	; (80028d0 <HAL_GPIO_EXTI_Callback+0x78>)
 800286e:	781b      	ldrb	r3, [r3, #0]
 8002870:	2b0f      	cmp	r3, #15
 8002872:	d804      	bhi.n	800287e <HAL_GPIO_EXTI_Callback+0x26>
 8002874:	4b16      	ldr	r3, [pc, #88]	; (80028d0 <HAL_GPIO_EXTI_Callback+0x78>)
 8002876:	781b      	ldrb	r3, [r3, #0]
 8002878:	3301      	adds	r3, #1
 800287a:	b2db      	uxtb	r3, r3
 800287c:	e000      	b.n	8002880 <HAL_GPIO_EXTI_Callback+0x28>
 800287e:	2300      	movs	r3, #0
 8002880:	4a13      	ldr	r2, [pc, #76]	; (80028d0 <HAL_GPIO_EXTI_Callback+0x78>)
 8002882:	7013      	strb	r3, [r2, #0]
	 menu_item = (menu_item > LED_R1) ? (menu_item - 1) : (HEATER);

  /* Dimmer (LAMP) handling */
  else if(GPIO_Pin == hlamp1.SYNC_Pin)
	LAMP_StartTimer(&hlamp1, triac_firing_ang);
}
 8002884:	e01e      	b.n	80028c4 <HAL_GPIO_EXTI_Callback+0x6c>
  else if(GPIO_Pin == hbtn2.Pin)
 8002886:	4b13      	ldr	r3, [pc, #76]	; (80028d4 <HAL_GPIO_EXTI_Callback+0x7c>)
 8002888:	889b      	ldrh	r3, [r3, #4]
 800288a:	88fa      	ldrh	r2, [r7, #6]
 800288c:	429a      	cmp	r2, r3
 800288e:	d10c      	bne.n	80028aa <HAL_GPIO_EXTI_Callback+0x52>
	 menu_item = (menu_item > LED_R1) ? (menu_item - 1) : (HEATER);
 8002890:	4b0f      	ldr	r3, [pc, #60]	; (80028d0 <HAL_GPIO_EXTI_Callback+0x78>)
 8002892:	781b      	ldrb	r3, [r3, #0]
 8002894:	2b00      	cmp	r3, #0
 8002896:	d004      	beq.n	80028a2 <HAL_GPIO_EXTI_Callback+0x4a>
 8002898:	4b0d      	ldr	r3, [pc, #52]	; (80028d0 <HAL_GPIO_EXTI_Callback+0x78>)
 800289a:	781b      	ldrb	r3, [r3, #0]
 800289c:	3b01      	subs	r3, #1
 800289e:	b2db      	uxtb	r3, r3
 80028a0:	e000      	b.n	80028a4 <HAL_GPIO_EXTI_Callback+0x4c>
 80028a2:	2310      	movs	r3, #16
 80028a4:	4a0a      	ldr	r2, [pc, #40]	; (80028d0 <HAL_GPIO_EXTI_Callback+0x78>)
 80028a6:	7013      	strb	r3, [r2, #0]
}
 80028a8:	e00c      	b.n	80028c4 <HAL_GPIO_EXTI_Callback+0x6c>
  else if(GPIO_Pin == hlamp1.SYNC_Pin)
 80028aa:	4b0b      	ldr	r3, [pc, #44]	; (80028d8 <HAL_GPIO_EXTI_Callback+0x80>)
 80028ac:	891b      	ldrh	r3, [r3, #8]
 80028ae:	88fa      	ldrh	r2, [r7, #6]
 80028b0:	429a      	cmp	r2, r3
 80028b2:	d107      	bne.n	80028c4 <HAL_GPIO_EXTI_Callback+0x6c>
	LAMP_StartTimer(&hlamp1, triac_firing_ang);
 80028b4:	4b09      	ldr	r3, [pc, #36]	; (80028dc <HAL_GPIO_EXTI_Callback+0x84>)
 80028b6:	edd3 7a00 	vldr	s15, [r3]
 80028ba:	eeb0 0a67 	vmov.f32	s0, s15
 80028be:	4806      	ldr	r0, [pc, #24]	; (80028d8 <HAL_GPIO_EXTI_Callback+0x80>)
 80028c0:	f7ff f884 	bl	80019cc <LAMP_StartTimer>
}
 80028c4:	bf00      	nop
 80028c6:	3708      	adds	r7, #8
 80028c8:	46bd      	mov	sp, r7
 80028ca:	bd80      	pop	{r7, pc}
 80028cc:	2000008c 	.word	0x2000008c
 80028d0:	200001d0 	.word	0x200001d0
 80028d4:	20000094 	.word	0x20000094
 80028d8:	2000009c 	.word	0x2000009c
 80028dc:	20000140 	.word	0x20000140

080028e0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b082      	sub	sp, #8
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
  /* Dimmer (LAMP) handling */
  if(htim->Instance == hlamp1.Timer->Instance)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681a      	ldr	r2, [r3, #0]
 80028ec:	4b05      	ldr	r3, [pc, #20]	; (8002904 <HAL_TIM_PeriodElapsedCallback+0x24>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	429a      	cmp	r2, r3
 80028f4:	d102      	bne.n	80028fc <HAL_TIM_PeriodElapsedCallback+0x1c>
    LAMP_TriacFiring(&hlamp1);
 80028f6:	4803      	ldr	r0, [pc, #12]	; (8002904 <HAL_TIM_PeriodElapsedCallback+0x24>)
 80028f8:	f7ff f8b2 	bl	8001a60 <LAMP_TriacFiring>
}
 80028fc:	bf00      	nop
 80028fe:	3708      	adds	r7, #8
 8002900:	46bd      	mov	sp, r7
 8002902:	bd80      	pop	{r7, pc}
 8002904:	2000009c 	.word	0x2000009c

08002908 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002908:	b590      	push	{r4, r7, lr}
 800290a:	b083      	sub	sp, #12
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
  if(hadc->Instance == ADC1)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4a3c      	ldr	r2, [pc, #240]	; (8002a08 <HAL_ADC_ConvCpltCallback+0x100>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d167      	bne.n	80029ea <HAL_ADC_ConvCpltCallback+0xe2>
  {
    adc_voltage_mV[ADC_POT1] = ADC_REG2VOLTAGE(adc_measurement[ADC_POT1]);
 800291a:	4b3c      	ldr	r3, [pc, #240]	; (8002a0c <HAL_ADC_ConvCpltCallback+0x104>)
 800291c:	881b      	ldrh	r3, [r3, #0]
 800291e:	ee07 3a90 	vmov	s15, r3
 8002922:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002926:	ee17 0a90 	vmov	r0, s15
 800292a:	f7fd fe2d 	bl	8000588 <__aeabi_f2d>
 800292e:	a332      	add	r3, pc, #200	; (adr r3, 80029f8 <HAL_ADC_ConvCpltCallback+0xf0>)
 8002930:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002934:	f7fd ffaa 	bl	800088c <__aeabi_ddiv>
 8002938:	4603      	mov	r3, r0
 800293a:	460c      	mov	r4, r1
 800293c:	4618      	mov	r0, r3
 800293e:	4621      	mov	r1, r4
 8002940:	a32f      	add	r3, pc, #188	; (adr r3, 8002a00 <HAL_ADC_ConvCpltCallback+0xf8>)
 8002942:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002946:	f7fd fe77 	bl	8000638 <__aeabi_dmul>
 800294a:	4603      	mov	r3, r0
 800294c:	460c      	mov	r4, r1
 800294e:	4618      	mov	r0, r3
 8002950:	4621      	mov	r1, r4
 8002952:	f04f 0200 	mov.w	r2, #0
 8002956:	f04f 0300 	mov.w	r3, #0
 800295a:	f7fd fcb7 	bl	80002cc <__adddf3>
 800295e:	4603      	mov	r3, r0
 8002960:	460c      	mov	r4, r1
 8002962:	4618      	mov	r0, r3
 8002964:	4621      	mov	r1, r4
 8002966:	f04f 0200 	mov.w	r2, #0
 800296a:	4b29      	ldr	r3, [pc, #164]	; (8002a10 <HAL_ADC_ConvCpltCallback+0x108>)
 800296c:	f7fd fe64 	bl	8000638 <__aeabi_dmul>
 8002970:	4603      	mov	r3, r0
 8002972:	460c      	mov	r4, r1
 8002974:	4618      	mov	r0, r3
 8002976:	4621      	mov	r1, r4
 8002978:	f7fe f870 	bl	8000a5c <__aeabi_d2uiz>
 800297c:	4602      	mov	r2, r0
 800297e:	4b25      	ldr	r3, [pc, #148]	; (8002a14 <HAL_ADC_ConvCpltCallback+0x10c>)
 8002980:	601a      	str	r2, [r3, #0]
    adc_voltage_mV[ADC_POT2] = ADC_REG2VOLTAGE(adc_measurement[ADC_POT2]);
 8002982:	4b22      	ldr	r3, [pc, #136]	; (8002a0c <HAL_ADC_ConvCpltCallback+0x104>)
 8002984:	885b      	ldrh	r3, [r3, #2]
 8002986:	ee07 3a90 	vmov	s15, r3
 800298a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800298e:	ee17 0a90 	vmov	r0, s15
 8002992:	f7fd fdf9 	bl	8000588 <__aeabi_f2d>
 8002996:	a318      	add	r3, pc, #96	; (adr r3, 80029f8 <HAL_ADC_ConvCpltCallback+0xf0>)
 8002998:	e9d3 2300 	ldrd	r2, r3, [r3]
 800299c:	f7fd ff76 	bl	800088c <__aeabi_ddiv>
 80029a0:	4603      	mov	r3, r0
 80029a2:	460c      	mov	r4, r1
 80029a4:	4618      	mov	r0, r3
 80029a6:	4621      	mov	r1, r4
 80029a8:	a315      	add	r3, pc, #84	; (adr r3, 8002a00 <HAL_ADC_ConvCpltCallback+0xf8>)
 80029aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029ae:	f7fd fe43 	bl	8000638 <__aeabi_dmul>
 80029b2:	4603      	mov	r3, r0
 80029b4:	460c      	mov	r4, r1
 80029b6:	4618      	mov	r0, r3
 80029b8:	4621      	mov	r1, r4
 80029ba:	f04f 0200 	mov.w	r2, #0
 80029be:	f04f 0300 	mov.w	r3, #0
 80029c2:	f7fd fc83 	bl	80002cc <__adddf3>
 80029c6:	4603      	mov	r3, r0
 80029c8:	460c      	mov	r4, r1
 80029ca:	4618      	mov	r0, r3
 80029cc:	4621      	mov	r1, r4
 80029ce:	f04f 0200 	mov.w	r2, #0
 80029d2:	4b0f      	ldr	r3, [pc, #60]	; (8002a10 <HAL_ADC_ConvCpltCallback+0x108>)
 80029d4:	f7fd fe30 	bl	8000638 <__aeabi_dmul>
 80029d8:	4603      	mov	r3, r0
 80029da:	460c      	mov	r4, r1
 80029dc:	4618      	mov	r0, r3
 80029de:	4621      	mov	r1, r4
 80029e0:	f7fe f83c 	bl	8000a5c <__aeabi_d2uiz>
 80029e4:	4602      	mov	r2, r0
 80029e6:	4b0b      	ldr	r3, [pc, #44]	; (8002a14 <HAL_ADC_ConvCpltCallback+0x10c>)
 80029e8:	605a      	str	r2, [r3, #4]
  }
}
 80029ea:	bf00      	nop
 80029ec:	370c      	adds	r7, #12
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bd90      	pop	{r4, r7, pc}
 80029f2:	bf00      	nop
 80029f4:	f3af 8000 	nop.w
 80029f8:	00000000 	.word	0x00000000
 80029fc:	40affe00 	.word	0x40affe00
 8002a00:	60000000 	.word	0x60000000
 8002a04:	400a6666 	.word	0x400a6666
 8002a08:	40012000 	.word	0x40012000
 8002a0c:	200001d8 	.word	0x200001d8
 8002a10:	408f4000 	.word	0x408f4000
 8002a14:	200001dc 	.word	0x200001dc

08002a18 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b08e      	sub	sp, #56	; 0x38
 8002a1c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002a1e:	f000 ff6e 	bl	80038fe <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002a22:	f000 fa41 	bl	8002ea8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002a26:	f7ff fca7 	bl	8002378 <MX_GPIO_Init>
  MX_DMA_Init();
 8002a2a:	f7ff fc73 	bl	8002314 <MX_DMA_Init>
  MX_USART3_UART_Init();
 8002a2e:	f000 fec1 	bl	80037b4 <MX_USART3_UART_Init>
  MX_TIM2_Init();
 8002a32:	f000 fc8f 	bl	8003354 <MX_TIM2_Init>
  MX_TIM3_Init();
 8002a36:	f000 fce3 	bl	8003400 <MX_TIM3_Init>
  MX_TIM4_Init();
 8002a3a:	f000 fd79 	bl	8003530 <MX_TIM4_Init>
  MX_I2C1_Init();
 8002a3e:	f7ff fe87 	bl	8002750 <MX_I2C1_Init>
  MX_SPI4_Init();
 8002a42:	f000 fb15 	bl	8003070 <MX_SPI4_Init>
  MX_ADC1_Init();
 8002a46:	f7ff fad1 	bl	8001fec <MX_ADC1_Init>
  MX_DAC_Init();
 8002a4a:	f7ff fbbd 	bl	80021c8 <MX_DAC_Init>
  /* USER CODE BEGIN 2 */

  LCD_Init(&hlcd1);
 8002a4e:	48cc      	ldr	r0, [pc, #816]	; (8002d80 <main+0x368>)
 8002a50:	f7ff f952 	bl	8001cf8 <LCD_Init>
  LED_RGB_Init(&hledrgb1);
 8002a54:	48cb      	ldr	r0, [pc, #812]	; (8002d84 <main+0x36c>)
 8002a56:	f7ff fa3a 	bl	8001ece <LED_RGB_Init>
  HEATER_PWM_Init(&hheaterpwm1);
 8002a5a:	48cb      	ldr	r0, [pc, #812]	; (8002d88 <main+0x370>)
 8002a5c:	f7ff f843 	bl	8001ae6 <HEATER_PWM_Init>
  ENC_Init(&henc1);
 8002a60:	48ca      	ldr	r0, [pc, #808]	; (8002d8c <main+0x374>)
 8002a62:	f7ff f820 	bl	8001aa6 <ENC_Init>
  BH1750_Init(&hbh1750_1);
 8002a66:	48ca      	ldr	r0, [pc, #808]	; (8002d90 <main+0x378>)
 8002a68:	f7fe f9e8 	bl	8000e3c <BH1750_Init>
  BH1750_Init(&hbh1750_2);
 8002a6c:	48c9      	ldr	r0, [pc, #804]	; (8002d94 <main+0x37c>)
 8002a6e:	f7fe f9e5 	bl	8000e3c <BH1750_Init>
  BMP280_Init(&bmp280_1);
 8002a72:	48c9      	ldr	r0, [pc, #804]	; (8002d98 <main+0x380>)
 8002a74:	f7fe fe7a 	bl	800176c <BMP280_Init>
  BMP280_Init(&bmp280_2);
 8002a78:	48c8      	ldr	r0, [pc, #800]	; (8002d9c <main+0x384>)
 8002a7a:	f7fe fe77 	bl	800176c <BMP280_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	/* Multiple channels | Independent mode | Direct memory access mode */
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_measurement, ADC_CHANNEL_NUMBER);
 8002a7e:	2202      	movs	r2, #2
 8002a80:	49c7      	ldr	r1, [pc, #796]	; (8002da0 <main+0x388>)
 8002a82:	48c8      	ldr	r0, [pc, #800]	; (8002da4 <main+0x38c>)
 8002a84:	f000 fffe 	bl	8003a84 <HAL_ADC_Start_DMA>

	switch(menu_item)
 8002a88:	4bc7      	ldr	r3, [pc, #796]	; (8002da8 <main+0x390>)
 8002a8a:	781b      	ldrb	r3, [r3, #0]
 8002a8c:	2b10      	cmp	r3, #16
 8002a8e:	f200 81ce 	bhi.w	8002e2e <main+0x416>
 8002a92:	a201      	add	r2, pc, #4	; (adr r2, 8002a98 <main+0x80>)
 8002a94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a98:	08002add 	.word	0x08002add
 8002a9c:	08002af5 	.word	0x08002af5
 8002aa0:	08002b0d 	.word	0x08002b0d
 8002aa4:	08002b25 	.word	0x08002b25
 8002aa8:	08002b3d 	.word	0x08002b3d
 8002aac:	08002b55 	.word	0x08002b55
 8002ab0:	08002b6d 	.word	0x08002b6d
 8002ab4:	08002ba5 	.word	0x08002ba5
 8002ab8:	08002bdd 	.word	0x08002bdd
 8002abc:	08002c15 	.word	0x08002c15
 8002ac0:	08002c2f 	.word	0x08002c2f
 8002ac4:	08002c49 	.word	0x08002c49
 8002ac8:	08002ccd 	.word	0x08002ccd
 8002acc:	08002cf3 	.word	0x08002cf3
 8002ad0:	08002d19 	.word	0x08002d19
 8002ad4:	08002d4d 	.word	0x08002d4d
 8002ad8:	08002df9 	.word	0x08002df9
	{
	/* LEDR1: On-board red LED *****************************************/
	case LED_R1:
	  LED_Handler(&hledr1, 'R', 1, lcd_buffer, &lcd_text_len);
 8002adc:	f107 021c 	add.w	r2, r7, #28
 8002ae0:	f107 031b 	add.w	r3, r7, #27
 8002ae4:	9300      	str	r3, [sp, #0]
 8002ae6:	4613      	mov	r3, r2
 8002ae8:	2201      	movs	r2, #1
 8002aea:	2152      	movs	r1, #82	; 0x52
 8002aec:	48af      	ldr	r0, [pc, #700]	; (8002dac <main+0x394>)
 8002aee:	f000 fa6f 	bl	8002fd0 <LED_Handler>
      break;
 8002af2:	e19d      	b.n	8002e30 <main+0x418>

    /* LEDR2: External (breadboard) red LED ***************************/
	case LED_R2:
	  LED_Handler(&hledr2, 'R', 2, lcd_buffer, &lcd_text_len);
 8002af4:	f107 021c 	add.w	r2, r7, #28
 8002af8:	f107 031b 	add.w	r3, r7, #27
 8002afc:	9300      	str	r3, [sp, #0]
 8002afe:	4613      	mov	r3, r2
 8002b00:	2202      	movs	r2, #2
 8002b02:	2152      	movs	r1, #82	; 0x52
 8002b04:	48aa      	ldr	r0, [pc, #680]	; (8002db0 <main+0x398>)
 8002b06:	f000 fa63 	bl	8002fd0 <LED_Handler>
      break;
 8002b0a:	e191      	b.n	8002e30 <main+0x418>

    /* LEDG1: On-board green LED **************************************/
	case LED_G1:
	  LED_Handler(&hledg1, 'G', 1, lcd_buffer, &lcd_text_len);
 8002b0c:	f107 021c 	add.w	r2, r7, #28
 8002b10:	f107 031b 	add.w	r3, r7, #27
 8002b14:	9300      	str	r3, [sp, #0]
 8002b16:	4613      	mov	r3, r2
 8002b18:	2201      	movs	r2, #1
 8002b1a:	2147      	movs	r1, #71	; 0x47
 8002b1c:	48a5      	ldr	r0, [pc, #660]	; (8002db4 <main+0x39c>)
 8002b1e:	f000 fa57 	bl	8002fd0 <LED_Handler>
      break;
 8002b22:	e185      	b.n	8002e30 <main+0x418>

    /* LEDG2: External (breadboard) green LED *************************/
	case LED_G2:
	  LED_Handler(&hledg2, 'G', 2, lcd_buffer, &lcd_text_len);
 8002b24:	f107 021c 	add.w	r2, r7, #28
 8002b28:	f107 031b 	add.w	r3, r7, #27
 8002b2c:	9300      	str	r3, [sp, #0]
 8002b2e:	4613      	mov	r3, r2
 8002b30:	2202      	movs	r2, #2
 8002b32:	2147      	movs	r1, #71	; 0x47
 8002b34:	48a0      	ldr	r0, [pc, #640]	; (8002db8 <main+0x3a0>)
 8002b36:	f000 fa4b 	bl	8002fd0 <LED_Handler>
      break;
 8002b3a:	e179      	b.n	8002e30 <main+0x418>

    /* LEDB1: On-board blue LED ***************************************/
	case LED_B1:
	  LED_Handler(&hledb1, 'B', 1, lcd_buffer, &lcd_text_len);
 8002b3c:	f107 021c 	add.w	r2, r7, #28
 8002b40:	f107 031b 	add.w	r3, r7, #27
 8002b44:	9300      	str	r3, [sp, #0]
 8002b46:	4613      	mov	r3, r2
 8002b48:	2201      	movs	r2, #1
 8002b4a:	2142      	movs	r1, #66	; 0x42
 8002b4c:	489b      	ldr	r0, [pc, #620]	; (8002dbc <main+0x3a4>)
 8002b4e:	f000 fa3f 	bl	8002fd0 <LED_Handler>
      break;
 8002b52:	e16d      	b.n	8002e30 <main+0x418>

    /* LEDB2: External (breadboard) blue LED *************************/
	case LED_B2:
	  LED_Handler(&hledb2, 'B', 2, lcd_buffer, &lcd_text_len);
 8002b54:	f107 021c 	add.w	r2, r7, #28
 8002b58:	f107 031b 	add.w	r3, r7, #27
 8002b5c:	9300      	str	r3, [sp, #0]
 8002b5e:	4613      	mov	r3, r2
 8002b60:	2202      	movs	r2, #2
 8002b62:	2142      	movs	r1, #66	; 0x42
 8002b64:	4896      	ldr	r0, [pc, #600]	; (8002dc0 <main+0x3a8>)
 8002b66:	f000 fa33 	bl	8002fd0 <LED_Handler>
	  break;
 8002b6a:	e161      	b.n	8002e30 <main+0x418>

	/* LED RGB - channel red PWM control *****************************/
	case LED_RGB_R:
	  lcd_text_len = sprintf(lcd_buffer, "RGB (R): %03d [%%]", (int)(ENC_GetCounter(&henc1)));
 8002b6c:	4887      	ldr	r0, [pc, #540]	; (8002d8c <main+0x374>)
 8002b6e:	f7fe ffa8 	bl	8001ac2 <ENC_GetCounter>
 8002b72:	4603      	mov	r3, r0
 8002b74:	461a      	mov	r2, r3
 8002b76:	f107 031c 	add.w	r3, r7, #28
 8002b7a:	4992      	ldr	r1, [pc, #584]	; (8002dc4 <main+0x3ac>)
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	f006 fd0d 	bl	800959c <siprintf>
 8002b82:	4603      	mov	r3, r0
 8002b84:	b2db      	uxtb	r3, r3
 8002b86:	76fb      	strb	r3, [r7, #27]
	  LED_RGB_SetDuty(&hledrgb1, LED_CHANNEL_R, (float)(ENC_GetCounter(&henc1)));
 8002b88:	4880      	ldr	r0, [pc, #512]	; (8002d8c <main+0x374>)
 8002b8a:	f7fe ff9a 	bl	8001ac2 <ENC_GetCounter>
 8002b8e:	ee07 0a90 	vmov	s15, r0
 8002b92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b96:	eeb0 0a67 	vmov.f32	s0, s15
 8002b9a:	2100      	movs	r1, #0
 8002b9c:	4879      	ldr	r0, [pc, #484]	; (8002d84 <main+0x36c>)
 8002b9e:	f7ff f9b7 	bl	8001f10 <LED_RGB_SetDuty>
      break;
 8002ba2:	e145      	b.n	8002e30 <main+0x418>

    /* LED RGB - channel green PWM control ***************************/
	case LED_RGB_G:
	  lcd_text_len = sprintf(lcd_buffer, "RGB (G): %03d [%%]", (int)(ENC_GetCounter(&henc1)));
 8002ba4:	4879      	ldr	r0, [pc, #484]	; (8002d8c <main+0x374>)
 8002ba6:	f7fe ff8c 	bl	8001ac2 <ENC_GetCounter>
 8002baa:	4603      	mov	r3, r0
 8002bac:	461a      	mov	r2, r3
 8002bae:	f107 031c 	add.w	r3, r7, #28
 8002bb2:	4985      	ldr	r1, [pc, #532]	; (8002dc8 <main+0x3b0>)
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	f006 fcf1 	bl	800959c <siprintf>
 8002bba:	4603      	mov	r3, r0
 8002bbc:	b2db      	uxtb	r3, r3
 8002bbe:	76fb      	strb	r3, [r7, #27]
	  LED_RGB_SetDuty(&hledrgb1, LED_CHANNEL_G, (float)(ENC_GetCounter(&henc1)));
 8002bc0:	4872      	ldr	r0, [pc, #456]	; (8002d8c <main+0x374>)
 8002bc2:	f7fe ff7e 	bl	8001ac2 <ENC_GetCounter>
 8002bc6:	ee07 0a90 	vmov	s15, r0
 8002bca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002bce:	eeb0 0a67 	vmov.f32	s0, s15
 8002bd2:	2101      	movs	r1, #1
 8002bd4:	486b      	ldr	r0, [pc, #428]	; (8002d84 <main+0x36c>)
 8002bd6:	f7ff f99b 	bl	8001f10 <LED_RGB_SetDuty>
      break;
 8002bda:	e129      	b.n	8002e30 <main+0x418>

    /* LED RGB - channel blue PWM control ****************************/
	case LED_RGB_B:
	  lcd_text_len = sprintf(lcd_buffer, "RGB (B): %03d [%%]", (int)(ENC_GetCounter(&henc1)));
 8002bdc:	486b      	ldr	r0, [pc, #428]	; (8002d8c <main+0x374>)
 8002bde:	f7fe ff70 	bl	8001ac2 <ENC_GetCounter>
 8002be2:	4603      	mov	r3, r0
 8002be4:	461a      	mov	r2, r3
 8002be6:	f107 031c 	add.w	r3, r7, #28
 8002bea:	4978      	ldr	r1, [pc, #480]	; (8002dcc <main+0x3b4>)
 8002bec:	4618      	mov	r0, r3
 8002bee:	f006 fcd5 	bl	800959c <siprintf>
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	b2db      	uxtb	r3, r3
 8002bf6:	76fb      	strb	r3, [r7, #27]
	  LED_RGB_SetDuty(&hledrgb1, LED_CHANNEL_B, (float)(ENC_GetCounter(&henc1)));
 8002bf8:	4864      	ldr	r0, [pc, #400]	; (8002d8c <main+0x374>)
 8002bfa:	f7fe ff62 	bl	8001ac2 <ENC_GetCounter>
 8002bfe:	ee07 0a90 	vmov	s15, r0
 8002c02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c06:	eeb0 0a67 	vmov.f32	s0, s15
 8002c0a:	2102      	movs	r1, #2
 8002c0c:	485d      	ldr	r0, [pc, #372]	; (8002d84 <main+0x36c>)
 8002c0e:	f7ff f97f 	bl	8001f10 <LED_RGB_SetDuty>
      break;
 8002c12:	e10d      	b.n	8002e30 <main+0x418>

    /* Potentiometer #1 (ADC channel of rank 1) *********************/
	case POT1:
	  lcd_text_len = sprintf(lcd_buffer, "POT1: %04d [mV]", (int)adc_voltage_mV[ADC_POT1]);
 8002c14:	4b6e      	ldr	r3, [pc, #440]	; (8002dd0 <main+0x3b8>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	461a      	mov	r2, r3
 8002c1a:	f107 031c 	add.w	r3, r7, #28
 8002c1e:	496d      	ldr	r1, [pc, #436]	; (8002dd4 <main+0x3bc>)
 8002c20:	4618      	mov	r0, r3
 8002c22:	f006 fcbb 	bl	800959c <siprintf>
 8002c26:	4603      	mov	r3, r0
 8002c28:	b2db      	uxtb	r3, r3
 8002c2a:	76fb      	strb	r3, [r7, #27]
	  break;
 8002c2c:	e100      	b.n	8002e30 <main+0x418>

	/* Potentiometer #2 (ADC channel of rank 2) *********************/
	case POT2:
	  lcd_text_len = sprintf(lcd_buffer, "POT2: %04d [mV]", (int)adc_voltage_mV[ADC_POT2]);
 8002c2e:	4b68      	ldr	r3, [pc, #416]	; (8002dd0 <main+0x3b8>)
 8002c30:	685b      	ldr	r3, [r3, #4]
 8002c32:	461a      	mov	r2, r3
 8002c34:	f107 031c 	add.w	r3, r7, #28
 8002c38:	4967      	ldr	r1, [pc, #412]	; (8002dd8 <main+0x3c0>)
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	f006 fcae 	bl	800959c <siprintf>
 8002c40:	4603      	mov	r3, r0
 8002c42:	b2db      	uxtb	r3, r3
 8002c44:	76fb      	strb	r3, [r7, #27]
	  break;
 8002c46:	e0f3      	b.n	8002e30 <main+0x418>

	/* Dimmer (lamp controller) ************************************/
	case LAMP:
	  triac_firing_ang = ENC2ANG(&henc1, &hlamp1);
 8002c48:	4850      	ldr	r0, [pc, #320]	; (8002d8c <main+0x374>)
 8002c4a:	f7fe ff3a 	bl	8001ac2 <ENC_GetCounter>
 8002c4e:	ee07 0a90 	vmov	s15, r0
 8002c52:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002c56:	4b4d      	ldr	r3, [pc, #308]	; (8002d8c <main+0x374>)
 8002c58:	68db      	ldr	r3, [r3, #12]
 8002c5a:	ee07 3a90 	vmov	s15, r3
 8002c5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c62:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002c66:	4b49      	ldr	r3, [pc, #292]	; (8002d8c <main+0x374>)
 8002c68:	689b      	ldr	r3, [r3, #8]
 8002c6a:	ee07 3a90 	vmov	s15, r3
 8002c6e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002c72:	4b46      	ldr	r3, [pc, #280]	; (8002d8c <main+0x374>)
 8002c74:	68db      	ldr	r3, [r3, #12]
 8002c76:	ee07 3a90 	vmov	s15, r3
 8002c7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c7e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002c82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002c86:	4b55      	ldr	r3, [pc, #340]	; (8002ddc <main+0x3c4>)
 8002c88:	edd3 6a07 	vldr	s13, [r3, #28]
 8002c8c:	4b53      	ldr	r3, [pc, #332]	; (8002ddc <main+0x3c4>)
 8002c8e:	edd3 7a06 	vldr	s15, [r3, #24]
 8002c92:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002c96:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002c9a:	4b50      	ldr	r3, [pc, #320]	; (8002ddc <main+0x3c4>)
 8002c9c:	edd3 7a06 	vldr	s15, [r3, #24]
 8002ca0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ca4:	4b4e      	ldr	r3, [pc, #312]	; (8002de0 <main+0x3c8>)
 8002ca6:	edc3 7a00 	vstr	s15, [r3]
	  lcd_text_len = sprintf(lcd_buffer, "LAMP: %03d [%%]", (int)(100 - ENC_GetCounter(&henc1)));
 8002caa:	4838      	ldr	r0, [pc, #224]	; (8002d8c <main+0x374>)
 8002cac:	f7fe ff09 	bl	8001ac2 <ENC_GetCounter>
 8002cb0:	4603      	mov	r3, r0
 8002cb2:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 8002cb6:	461a      	mov	r2, r3
 8002cb8:	f107 031c 	add.w	r3, r7, #28
 8002cbc:	4949      	ldr	r1, [pc, #292]	; (8002de4 <main+0x3cc>)
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	f006 fc6c 	bl	800959c <siprintf>
 8002cc4:	4603      	mov	r3, r0
 8002cc6:	b2db      	uxtb	r3, r3
 8002cc8:	76fb      	strb	r3, [r7, #27]
	  break;
 8002cca:	e0b1      	b.n	8002e30 <main+0x418>

	/* Digital light sensor (BH1750) #1 ****************************/
	case LIGHT_SENSOR_1:
	  lcd_text_len = sprintf(lcd_buffer, "L1: %05d [LX]", (int)(BH1750_ReadLux(&hbh1750_1)));
 8002ccc:	4830      	ldr	r0, [pc, #192]	; (8002d90 <main+0x378>)
 8002cce:	f7fe f8db 	bl	8000e88 <BH1750_ReadLux>
 8002cd2:	eef0 7a40 	vmov.f32	s15, s0
 8002cd6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002cda:	f107 031c 	add.w	r3, r7, #28
 8002cde:	ee17 2a90 	vmov	r2, s15
 8002ce2:	4941      	ldr	r1, [pc, #260]	; (8002de8 <main+0x3d0>)
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	f006 fc59 	bl	800959c <siprintf>
 8002cea:	4603      	mov	r3, r0
 8002cec:	b2db      	uxtb	r3, r3
 8002cee:	76fb      	strb	r3, [r7, #27]
	  break;
 8002cf0:	e09e      	b.n	8002e30 <main+0x418>

	/* Digital light sensor (BH1750) #2 ****************************/
	case LIGHT_SENSOR_2:
	  lcd_text_len = sprintf(lcd_buffer, "L2: %05d [LX]", (int)(BH1750_ReadLux(&hbh1750_2)));
 8002cf2:	4828      	ldr	r0, [pc, #160]	; (8002d94 <main+0x37c>)
 8002cf4:	f7fe f8c8 	bl	8000e88 <BH1750_ReadLux>
 8002cf8:	eef0 7a40 	vmov.f32	s15, s0
 8002cfc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002d00:	f107 031c 	add.w	r3, r7, #28
 8002d04:	ee17 2a90 	vmov	r2, s15
 8002d08:	4938      	ldr	r1, [pc, #224]	; (8002dec <main+0x3d4>)
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	f006 fc46 	bl	800959c <siprintf>
 8002d10:	4603      	mov	r3, r0
 8002d12:	b2db      	uxtb	r3, r3
 8002d14:	76fb      	strb	r3, [r7, #27]
	  break;
 8002d16:	e08b      	b.n	8002e30 <main+0x418>

	/* Digital temperature and pressure sensor (BMP280) #1 ********/
	case TEMP_SENSOR_1:
	  bmp280_get_uncomp_data(&bmp280_1_data, &bmp280_1);
 8002d18:	f107 0310 	add.w	r3, r7, #16
 8002d1c:	491e      	ldr	r1, [pc, #120]	; (8002d98 <main+0x380>)
 8002d1e:	4618      	mov	r0, r3
 8002d20:	f7fe fa90 	bl	8001244 <bmp280_get_uncomp_data>
	  bmp280_get_comp_temp_32bit(&temp, bmp280_1_data.uncomp_temp, &bmp280_1);
 8002d24:	6939      	ldr	r1, [r7, #16]
 8002d26:	1d3b      	adds	r3, r7, #4
 8002d28:	4a1b      	ldr	r2, [pc, #108]	; (8002d98 <main+0x380>)
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	f7fe fad9 	bl	80012e2 <bmp280_get_comp_temp_32bit>
	  lcd_text_len = sprintf(lcd_buffer, "TEMP1: %04d [*C]", (int)temp);
 8002d30:	687a      	ldr	r2, [r7, #4]
 8002d32:	f107 031c 	add.w	r3, r7, #28
 8002d36:	492e      	ldr	r1, [pc, #184]	; (8002df0 <main+0x3d8>)
 8002d38:	4618      	mov	r0, r3
 8002d3a:	f006 fc2f 	bl	800959c <siprintf>
 8002d3e:	4603      	mov	r3, r0
 8002d40:	b2db      	uxtb	r3, r3
 8002d42:	76fb      	strb	r3, [r7, #27]
	  HAL_Delay(150);
 8002d44:	2096      	movs	r0, #150	; 0x96
 8002d46:	f000 fe37 	bl	80039b8 <HAL_Delay>
	  break;
 8002d4a:	e071      	b.n	8002e30 <main+0x418>

	/* Digital temperature and pressure sensor (BMP280) #2 ********/
	case TEMP_SENSOR_2:
	  bmp280_get_uncomp_data(&bmp280_2_data, &bmp280_2);
 8002d4c:	f107 0308 	add.w	r3, r7, #8
 8002d50:	4912      	ldr	r1, [pc, #72]	; (8002d9c <main+0x384>)
 8002d52:	4618      	mov	r0, r3
 8002d54:	f7fe fa76 	bl	8001244 <bmp280_get_uncomp_data>
	  bmp280_get_comp_temp_32bit(&temp, bmp280_2_data.uncomp_temp, &bmp280_2);
 8002d58:	68b9      	ldr	r1, [r7, #8]
 8002d5a:	1d3b      	adds	r3, r7, #4
 8002d5c:	4a0f      	ldr	r2, [pc, #60]	; (8002d9c <main+0x384>)
 8002d5e:	4618      	mov	r0, r3
 8002d60:	f7fe fabf 	bl	80012e2 <bmp280_get_comp_temp_32bit>
	  lcd_text_len = sprintf(lcd_buffer, "TEMP2: %04d [*C]", (int)temp);
 8002d64:	687a      	ldr	r2, [r7, #4]
 8002d66:	f107 031c 	add.w	r3, r7, #28
 8002d6a:	4922      	ldr	r1, [pc, #136]	; (8002df4 <main+0x3dc>)
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	f006 fc15 	bl	800959c <siprintf>
 8002d72:	4603      	mov	r3, r0
 8002d74:	b2db      	uxtb	r3, r3
 8002d76:	76fb      	strb	r3, [r7, #27]
      HAL_Delay(150);
 8002d78:	2096      	movs	r0, #150	; 0x96
 8002d7a:	f000 fe1d 	bl	80039b8 <HAL_Delay>
	  break;
 8002d7e:	e057      	b.n	8002e30 <main+0x418>
 8002d80:	200000ec 	.word	0x200000ec
 8002d84:	20000134 	.word	0x20000134
 8002d88:	200000cc 	.word	0x200000cc
 8002d8c:	200000bc 	.word	0x200000bc
 8002d90:	20000000 	.word	0x20000000
 8002d94:	2000000c 	.word	0x2000000c
 8002d98:	20000024 	.word	0x20000024
 8002d9c:	20000058 	.word	0x20000058
 8002da0:	200001d8 	.word	0x200001d8
 8002da4:	200001f0 	.word	0x200001f0
 8002da8:	200001d0 	.word	0x200001d0
 8002dac:	20000114 	.word	0x20000114
 8002db0:	2000012c 	.word	0x2000012c
 8002db4:	20000104 	.word	0x20000104
 8002db8:	2000011c 	.word	0x2000011c
 8002dbc:	2000010c 	.word	0x2000010c
 8002dc0:	20000124 	.word	0x20000124
 8002dc4:	08009e04 	.word	0x08009e04
 8002dc8:	08009e18 	.word	0x08009e18
 8002dcc:	08009e2c 	.word	0x08009e2c
 8002dd0:	200001dc 	.word	0x200001dc
 8002dd4:	08009e40 	.word	0x08009e40
 8002dd8:	08009e50 	.word	0x08009e50
 8002ddc:	2000009c 	.word	0x2000009c
 8002de0:	20000140 	.word	0x20000140
 8002de4:	08009e60 	.word	0x08009e60
 8002de8:	08009e70 	.word	0x08009e70
 8002dec:	08009e80 	.word	0x08009e80
 8002df0:	08009e90 	.word	0x08009e90
 8002df4:	08009ea4 	.word	0x08009ea4

	/* PWM-controller resistor as heater **************************/
	case HEATER:
	  HEATER_PWM_SetDuty(&hheaterpwm1, (float)(ENC_GetCounter(&henc1)));
 8002df8:	4825      	ldr	r0, [pc, #148]	; (8002e90 <main+0x478>)
 8002dfa:	f7fe fe62 	bl	8001ac2 <ENC_GetCounter>
 8002dfe:	ee07 0a90 	vmov	s15, r0
 8002e02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e06:	eeb0 0a67 	vmov.f32	s0, s15
 8002e0a:	4822      	ldr	r0, [pc, #136]	; (8002e94 <main+0x47c>)
 8002e0c:	f7fe fe7c 	bl	8001b08 <HEATER_PWM_SetDuty>
	  lcd_text_len = sprintf(lcd_buffer, "HEATER: %d [%%]", (int)(ENC_GetCounter(&henc1)));
 8002e10:	481f      	ldr	r0, [pc, #124]	; (8002e90 <main+0x478>)
 8002e12:	f7fe fe56 	bl	8001ac2 <ENC_GetCounter>
 8002e16:	4603      	mov	r3, r0
 8002e18:	461a      	mov	r2, r3
 8002e1a:	f107 031c 	add.w	r3, r7, #28
 8002e1e:	491e      	ldr	r1, [pc, #120]	; (8002e98 <main+0x480>)
 8002e20:	4618      	mov	r0, r3
 8002e22:	f006 fbbb 	bl	800959c <siprintf>
 8002e26:	4603      	mov	r3, r0
 8002e28:	b2db      	uxtb	r3, r3
 8002e2a:	76fb      	strb	r3, [r7, #27]
	  break;
 8002e2c:	e000      	b.n	8002e30 <main+0x418>

	default: break;
 8002e2e:	bf00      	nop
	}

	enc_cnt = ENC_GetCounter(&henc1);
 8002e30:	4817      	ldr	r0, [pc, #92]	; (8002e90 <main+0x478>)
 8002e32:	f7fe fe46 	bl	8001ac2 <ENC_GetCounter>
 8002e36:	4603      	mov	r3, r0
 8002e38:	461a      	mov	r2, r3
 8002e3a:	4b18      	ldr	r3, [pc, #96]	; (8002e9c <main+0x484>)
 8002e3c:	601a      	str	r2, [r3, #0]

	/* LCD menu  **************************************************/
	memset(lcd_buffer + lcd_text_len, ' ', (LCD_LINE_BUF_LEN-1) - lcd_text_len);
 8002e3e:	7efb      	ldrb	r3, [r7, #27]
 8002e40:	461a      	mov	r2, r3
 8002e42:	f107 031c 	add.w	r3, r7, #28
 8002e46:	4413      	add	r3, r2
 8002e48:	7efa      	ldrb	r2, [r7, #27]
 8002e4a:	f1c2 0210 	rsb	r2, r2, #16
 8002e4e:	2120      	movs	r1, #32
 8002e50:	4618      	mov	r0, r3
 8002e52:	f006 fb9b 	bl	800958c <memset>
	LCD_SetCursor(&hlcd1, 0, 0);
 8002e56:	2200      	movs	r2, #0
 8002e58:	2100      	movs	r1, #0
 8002e5a:	4811      	ldr	r0, [pc, #68]	; (8002ea0 <main+0x488>)
 8002e5c:	f7fe ff94 	bl	8001d88 <LCD_SetCursor>
	LCD_printStr(&hlcd1, lcd_buffer);
 8002e60:	f107 031c 	add.w	r3, r7, #28
 8002e64:	4619      	mov	r1, r3
 8002e66:	480e      	ldr	r0, [pc, #56]	; (8002ea0 <main+0x488>)
 8002e68:	f7fe ff6f 	bl	8001d4a <LCD_printStr>
	LCD_SetCursor(&hlcd1, 1, 0);
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	2101      	movs	r1, #1
 8002e70:	480b      	ldr	r0, [pc, #44]	; (8002ea0 <main+0x488>)
 8002e72:	f7fe ff89 	bl	8001d88 <LCD_SetCursor>
	LCD_printf(&hlcd1, "ENC: %03d", ENC_GetCounter(&henc1));
 8002e76:	4806      	ldr	r0, [pc, #24]	; (8002e90 <main+0x478>)
 8002e78:	f7fe fe23 	bl	8001ac2 <ENC_GetCounter>
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	461a      	mov	r2, r3
 8002e80:	4908      	ldr	r1, [pc, #32]	; (8002ea4 <main+0x48c>)
 8002e82:	4807      	ldr	r0, [pc, #28]	; (8002ea0 <main+0x488>)
 8002e84:	f7fe ff9a 	bl	8001dbc <LCD_printf>

	HAL_Delay(100);
 8002e88:	2064      	movs	r0, #100	; 0x64
 8002e8a:	f000 fd95 	bl	80039b8 <HAL_Delay>
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_measurement, ADC_CHANNEL_NUMBER);
 8002e8e:	e5f6      	b.n	8002a7e <main+0x66>
 8002e90:	200000bc 	.word	0x200000bc
 8002e94:	200000cc 	.word	0x200000cc
 8002e98:	08009eb8 	.word	0x08009eb8
 8002e9c:	200001d4 	.word	0x200001d4
 8002ea0:	200000ec 	.word	0x200000ec
 8002ea4:	08009ec8 	.word	0x08009ec8

08002ea8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b0b4      	sub	sp, #208	; 0xd0
 8002eac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002eae:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002eb2:	2230      	movs	r2, #48	; 0x30
 8002eb4:	2100      	movs	r1, #0
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	f006 fb68 	bl	800958c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002ebc:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	601a      	str	r2, [r3, #0]
 8002ec4:	605a      	str	r2, [r3, #4]
 8002ec6:	609a      	str	r2, [r3, #8]
 8002ec8:	60da      	str	r2, [r3, #12]
 8002eca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002ecc:	f107 0308 	add.w	r3, r7, #8
 8002ed0:	2284      	movs	r2, #132	; 0x84
 8002ed2:	2100      	movs	r1, #0
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	f006 fb59 	bl	800958c <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8002eda:	f002 fddf 	bl	8005a9c <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002ede:	4b3a      	ldr	r3, [pc, #232]	; (8002fc8 <SystemClock_Config+0x120>)
 8002ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ee2:	4a39      	ldr	r2, [pc, #228]	; (8002fc8 <SystemClock_Config+0x120>)
 8002ee4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ee8:	6413      	str	r3, [r2, #64]	; 0x40
 8002eea:	4b37      	ldr	r3, [pc, #220]	; (8002fc8 <SystemClock_Config+0x120>)
 8002eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ef2:	607b      	str	r3, [r7, #4]
 8002ef4:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002ef6:	4b35      	ldr	r3, [pc, #212]	; (8002fcc <SystemClock_Config+0x124>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	4a34      	ldr	r2, [pc, #208]	; (8002fcc <SystemClock_Config+0x124>)
 8002efc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002f00:	6013      	str	r3, [r2, #0]
 8002f02:	4b32      	ldr	r3, [pc, #200]	; (8002fcc <SystemClock_Config+0x124>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002f0a:	603b      	str	r3, [r7, #0]
 8002f0c:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002f0e:	2301      	movs	r3, #1
 8002f10:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8002f14:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8002f18:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002f1c:	2302      	movs	r3, #2
 8002f1e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002f22:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002f26:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002f2a:	2304      	movs	r3, #4
 8002f2c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 216;
 8002f30:	23d8      	movs	r3, #216	; 0xd8
 8002f32:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002f36:	2302      	movs	r3, #2
 8002f38:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8002f3c:	2303      	movs	r3, #3
 8002f3e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002f42:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002f46:	4618      	mov	r0, r3
 8002f48:	f002 fe08 	bl	8005b5c <HAL_RCC_OscConfig>
 8002f4c:	4603      	mov	r3, r0
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d001      	beq.n	8002f56 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8002f52:	f000 f885 	bl	8003060 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8002f56:	f002 fdb1 	bl	8005abc <HAL_PWREx_EnableOverDrive>
 8002f5a:	4603      	mov	r3, r0
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d001      	beq.n	8002f64 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8002f60:	f000 f87e 	bl	8003060 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002f64:	230f      	movs	r3, #15
 8002f66:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002f6a:	2302      	movs	r3, #2
 8002f6c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002f70:	2300      	movs	r3, #0
 8002f72:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002f76:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002f7a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002f7e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002f82:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8002f86:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8002f8a:	2107      	movs	r1, #7
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	f003 f889 	bl	80060a4 <HAL_RCC_ClockConfig>
 8002f92:	4603      	mov	r3, r0
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d001      	beq.n	8002f9c <SystemClock_Config+0xf4>
  {
    Error_Handler();
 8002f98:	f000 f862 	bl	8003060 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_I2C1;
 8002f9c:	f44f 4382 	mov.w	r3, #16640	; 0x4100
 8002fa0:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002faa:	f107 0308 	add.w	r3, r7, #8
 8002fae:	4618      	mov	r0, r3
 8002fb0:	f003 fa70 	bl	8006494 <HAL_RCCEx_PeriphCLKConfig>
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d001      	beq.n	8002fbe <SystemClock_Config+0x116>
  {
    Error_Handler();
 8002fba:	f000 f851 	bl	8003060 <Error_Handler>
  }
}
 8002fbe:	bf00      	nop
 8002fc0:	37d0      	adds	r7, #208	; 0xd0
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	bd80      	pop	{r7, pc}
 8002fc6:	bf00      	nop
 8002fc8:	40023800 	.word	0x40023800
 8002fcc:	40007000 	.word	0x40007000

08002fd0 <LED_Handler>:

/* USER CODE BEGIN 4 */
void LED_Handler(LED_HandleTypeDef* led, uint8_t led_color, uint8_t led_n, char* lcd_buffer, uint8_t* lcd_text_len)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b084      	sub	sp, #16
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	60f8      	str	r0, [r7, #12]
 8002fd8:	607b      	str	r3, [r7, #4]
 8002fda:	460b      	mov	r3, r1
 8002fdc:	72fb      	strb	r3, [r7, #11]
 8002fde:	4613      	mov	r3, r2
 8002fe0:	72bb      	strb	r3, [r7, #10]
  if(enc_cnt < ENC_GetCounter(&henc1))
 8002fe2:	481b      	ldr	r0, [pc, #108]	; (8003050 <LED_Handler+0x80>)
 8002fe4:	f7fe fd6d 	bl	8001ac2 <ENC_GetCounter>
 8002fe8:	4602      	mov	r2, r0
 8002fea:	4b1a      	ldr	r3, [pc, #104]	; (8003054 <LED_Handler+0x84>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	429a      	cmp	r2, r3
 8002ff0:	d903      	bls.n	8002ffa <LED_Handler+0x2a>
    LED_On(led);
 8002ff2:	68f8      	ldr	r0, [r7, #12]
 8002ff4:	f7fe fefe 	bl	8001df4 <LED_On>
 8002ff8:	e00a      	b.n	8003010 <LED_Handler+0x40>
  else if(enc_cnt > ENC_GetCounter(&henc1))
 8002ffa:	4815      	ldr	r0, [pc, #84]	; (8003050 <LED_Handler+0x80>)
 8002ffc:	f7fe fd61 	bl	8001ac2 <ENC_GetCounter>
 8003000:	4602      	mov	r2, r0
 8003002:	4b14      	ldr	r3, [pc, #80]	; (8003054 <LED_Handler+0x84>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	429a      	cmp	r2, r3
 8003008:	d202      	bcs.n	8003010 <LED_Handler+0x40>
    LED_Off(led);
 800300a:	68f8      	ldr	r0, [r7, #12]
 800300c:	f7fe ff16 	bl	8001e3c <LED_Off>

  if(LED_Check(led))
 8003010:	68f8      	ldr	r0, [r7, #12]
 8003012:	f7fe ff37 	bl	8001e84 <LED_Check>
 8003016:	4603      	mov	r3, r0
 8003018:	2b00      	cmp	r3, #0
 800301a:	d00a      	beq.n	8003032 <LED_Handler+0x62>
    *lcd_text_len = sprintf(lcd_buffer, "LED %c%d ON ", led_color, led_n);
 800301c:	7afa      	ldrb	r2, [r7, #11]
 800301e:	7abb      	ldrb	r3, [r7, #10]
 8003020:	490d      	ldr	r1, [pc, #52]	; (8003058 <LED_Handler+0x88>)
 8003022:	6878      	ldr	r0, [r7, #4]
 8003024:	f006 faba 	bl	800959c <siprintf>
 8003028:	4603      	mov	r3, r0
 800302a:	b2da      	uxtb	r2, r3
 800302c:	69bb      	ldr	r3, [r7, #24]
 800302e:	701a      	strb	r2, [r3, #0]
  else
	*lcd_text_len = sprintf(lcd_buffer, "LED %c%d OFF", led_color, led_n);
}
 8003030:	e009      	b.n	8003046 <LED_Handler+0x76>
	*lcd_text_len = sprintf(lcd_buffer, "LED %c%d OFF", led_color, led_n);
 8003032:	7afa      	ldrb	r2, [r7, #11]
 8003034:	7abb      	ldrb	r3, [r7, #10]
 8003036:	4909      	ldr	r1, [pc, #36]	; (800305c <LED_Handler+0x8c>)
 8003038:	6878      	ldr	r0, [r7, #4]
 800303a:	f006 faaf 	bl	800959c <siprintf>
 800303e:	4603      	mov	r3, r0
 8003040:	b2da      	uxtb	r2, r3
 8003042:	69bb      	ldr	r3, [r7, #24]
 8003044:	701a      	strb	r2, [r3, #0]
}
 8003046:	bf00      	nop
 8003048:	3710      	adds	r7, #16
 800304a:	46bd      	mov	sp, r7
 800304c:	bd80      	pop	{r7, pc}
 800304e:	bf00      	nop
 8003050:	200000bc 	.word	0x200000bc
 8003054:	200001d4 	.word	0x200001d4
 8003058:	08009ed4 	.word	0x08009ed4
 800305c:	08009ee4 	.word	0x08009ee4

08003060 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003060:	b480      	push	{r7}
 8003062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8003064:	bf00      	nop
 8003066:	46bd      	mov	sp, r7
 8003068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306c:	4770      	bx	lr
	...

08003070 <MX_SPI4_Init>:

SPI_HandleTypeDef hspi4;

/* SPI4 init function */
void MX_SPI4_Init(void)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	af00      	add	r7, sp, #0

  hspi4.Instance = SPI4;
 8003074:	4b1b      	ldr	r3, [pc, #108]	; (80030e4 <MX_SPI4_Init+0x74>)
 8003076:	4a1c      	ldr	r2, [pc, #112]	; (80030e8 <MX_SPI4_Init+0x78>)
 8003078:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 800307a:	4b1a      	ldr	r3, [pc, #104]	; (80030e4 <MX_SPI4_Init+0x74>)
 800307c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003080:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8003082:	4b18      	ldr	r3, [pc, #96]	; (80030e4 <MX_SPI4_Init+0x74>)
 8003084:	2200      	movs	r2, #0
 8003086:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8003088:	4b16      	ldr	r3, [pc, #88]	; (80030e4 <MX_SPI4_Init+0x74>)
 800308a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800308e:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8003090:	4b14      	ldr	r3, [pc, #80]	; (80030e4 <MX_SPI4_Init+0x74>)
 8003092:	2202      	movs	r2, #2
 8003094:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_2EDGE;
 8003096:	4b13      	ldr	r3, [pc, #76]	; (80030e4 <MX_SPI4_Init+0x74>)
 8003098:	2201      	movs	r2, #1
 800309a:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 800309c:	4b11      	ldr	r3, [pc, #68]	; (80030e4 <MX_SPI4_Init+0x74>)
 800309e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80030a2:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80030a4:	4b0f      	ldr	r3, [pc, #60]	; (80030e4 <MX_SPI4_Init+0x74>)
 80030a6:	2218      	movs	r2, #24
 80030a8:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80030aa:	4b0e      	ldr	r3, [pc, #56]	; (80030e4 <MX_SPI4_Init+0x74>)
 80030ac:	2200      	movs	r2, #0
 80030ae:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 80030b0:	4b0c      	ldr	r3, [pc, #48]	; (80030e4 <MX_SPI4_Init+0x74>)
 80030b2:	2200      	movs	r2, #0
 80030b4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80030b6:	4b0b      	ldr	r3, [pc, #44]	; (80030e4 <MX_SPI4_Init+0x74>)
 80030b8:	2200      	movs	r2, #0
 80030ba:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 7;
 80030bc:	4b09      	ldr	r3, [pc, #36]	; (80030e4 <MX_SPI4_Init+0x74>)
 80030be:	2207      	movs	r2, #7
 80030c0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80030c2:	4b08      	ldr	r3, [pc, #32]	; (80030e4 <MX_SPI4_Init+0x74>)
 80030c4:	2200      	movs	r2, #0
 80030c6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80030c8:	4b06      	ldr	r3, [pc, #24]	; (80030e4 <MX_SPI4_Init+0x74>)
 80030ca:	2200      	movs	r2, #0
 80030cc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 80030ce:	4805      	ldr	r0, [pc, #20]	; (80030e4 <MX_SPI4_Init+0x74>)
 80030d0:	f003 fdce 	bl	8006c70 <HAL_SPI_Init>
 80030d4:	4603      	mov	r3, r0
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d001      	beq.n	80030de <MX_SPI4_Init+0x6e>
  {
    Error_Handler();
 80030da:	f7ff ffc1 	bl	8003060 <Error_Handler>
  }

}
 80030de:	bf00      	nop
 80030e0:	bd80      	pop	{r7, pc}
 80030e2:	bf00      	nop
 80030e4:	20000358 	.word	0x20000358
 80030e8:	40013400 	.word	0x40013400

080030ec <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b08a      	sub	sp, #40	; 0x28
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030f4:	f107 0314 	add.w	r3, r7, #20
 80030f8:	2200      	movs	r2, #0
 80030fa:	601a      	str	r2, [r3, #0]
 80030fc:	605a      	str	r2, [r3, #4]
 80030fe:	609a      	str	r2, [r3, #8]
 8003100:	60da      	str	r2, [r3, #12]
 8003102:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI4)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	4a17      	ldr	r2, [pc, #92]	; (8003168 <HAL_SPI_MspInit+0x7c>)
 800310a:	4293      	cmp	r3, r2
 800310c:	d127      	bne.n	800315e <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI4_MspInit 0 */

  /* USER CODE END SPI4_MspInit 0 */
    /* SPI4 clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 800310e:	4b17      	ldr	r3, [pc, #92]	; (800316c <HAL_SPI_MspInit+0x80>)
 8003110:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003112:	4a16      	ldr	r2, [pc, #88]	; (800316c <HAL_SPI_MspInit+0x80>)
 8003114:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003118:	6453      	str	r3, [r2, #68]	; 0x44
 800311a:	4b14      	ldr	r3, [pc, #80]	; (800316c <HAL_SPI_MspInit+0x80>)
 800311c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800311e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003122:	613b      	str	r3, [r7, #16]
 8003124:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003126:	4b11      	ldr	r3, [pc, #68]	; (800316c <HAL_SPI_MspInit+0x80>)
 8003128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800312a:	4a10      	ldr	r2, [pc, #64]	; (800316c <HAL_SPI_MspInit+0x80>)
 800312c:	f043 0310 	orr.w	r3, r3, #16
 8003130:	6313      	str	r3, [r2, #48]	; 0x30
 8003132:	4b0e      	ldr	r3, [pc, #56]	; (800316c <HAL_SPI_MspInit+0x80>)
 8003134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003136:	f003 0310 	and.w	r3, r3, #16
 800313a:	60fb      	str	r3, [r7, #12]
 800313c:	68fb      	ldr	r3, [r7, #12]
    /**SPI4 GPIO Configuration
    PE2     ------> SPI4_SCK
    PE5     ------> SPI4_MISO
    PE6     ------> SPI4_MOSI
    */
    GPIO_InitStruct.Pin = BMP280_SCK_Pin|BMP280_MISO_Pin|BMP280_MOSI_Pin;
 800313e:	2364      	movs	r3, #100	; 0x64
 8003140:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003142:	2302      	movs	r3, #2
 8003144:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003146:	2300      	movs	r3, #0
 8003148:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800314a:	2303      	movs	r3, #3
 800314c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 800314e:	2305      	movs	r3, #5
 8003150:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003152:	f107 0314 	add.w	r3, r7, #20
 8003156:	4619      	mov	r1, r3
 8003158:	4805      	ldr	r0, [pc, #20]	; (8003170 <HAL_SPI_MspInit+0x84>)
 800315a:	f001 fdd1 	bl	8004d00 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }
}
 800315e:	bf00      	nop
 8003160:	3728      	adds	r7, #40	; 0x28
 8003162:	46bd      	mov	sp, r7
 8003164:	bd80      	pop	{r7, pc}
 8003166:	bf00      	nop
 8003168:	40013400 	.word	0x40013400
 800316c:	40023800 	.word	0x40023800
 8003170:	40021000 	.word	0x40021000

08003174 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003174:	b480      	push	{r7}
 8003176:	b083      	sub	sp, #12
 8003178:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800317a:	4b0f      	ldr	r3, [pc, #60]	; (80031b8 <HAL_MspInit+0x44>)
 800317c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800317e:	4a0e      	ldr	r2, [pc, #56]	; (80031b8 <HAL_MspInit+0x44>)
 8003180:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003184:	6413      	str	r3, [r2, #64]	; 0x40
 8003186:	4b0c      	ldr	r3, [pc, #48]	; (80031b8 <HAL_MspInit+0x44>)
 8003188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800318a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800318e:	607b      	str	r3, [r7, #4]
 8003190:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003192:	4b09      	ldr	r3, [pc, #36]	; (80031b8 <HAL_MspInit+0x44>)
 8003194:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003196:	4a08      	ldr	r2, [pc, #32]	; (80031b8 <HAL_MspInit+0x44>)
 8003198:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800319c:	6453      	str	r3, [r2, #68]	; 0x44
 800319e:	4b06      	ldr	r3, [pc, #24]	; (80031b8 <HAL_MspInit+0x44>)
 80031a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80031a6:	603b      	str	r3, [r7, #0]
 80031a8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80031aa:	bf00      	nop
 80031ac:	370c      	adds	r7, #12
 80031ae:	46bd      	mov	sp, r7
 80031b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b4:	4770      	bx	lr
 80031b6:	bf00      	nop
 80031b8:	40023800 	.word	0x40023800

080031bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80031bc:	b480      	push	{r7}
 80031be:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80031c0:	bf00      	nop
 80031c2:	46bd      	mov	sp, r7
 80031c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c8:	4770      	bx	lr

080031ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80031ca:	b480      	push	{r7}
 80031cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80031ce:	e7fe      	b.n	80031ce <HardFault_Handler+0x4>

080031d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80031d0:	b480      	push	{r7}
 80031d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80031d4:	e7fe      	b.n	80031d4 <MemManage_Handler+0x4>

080031d6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80031d6:	b480      	push	{r7}
 80031d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80031da:	e7fe      	b.n	80031da <BusFault_Handler+0x4>

080031dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80031dc:	b480      	push	{r7}
 80031de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80031e0:	e7fe      	b.n	80031e0 <UsageFault_Handler+0x4>

080031e2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80031e2:	b480      	push	{r7}
 80031e4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80031e6:	bf00      	nop
 80031e8:	46bd      	mov	sp, r7
 80031ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ee:	4770      	bx	lr

080031f0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80031f0:	b480      	push	{r7}
 80031f2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80031f4:	bf00      	nop
 80031f6:	46bd      	mov	sp, r7
 80031f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fc:	4770      	bx	lr

080031fe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80031fe:	b480      	push	{r7}
 8003200:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003202:	bf00      	nop
 8003204:	46bd      	mov	sp, r7
 8003206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320a:	4770      	bx	lr

0800320c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003210:	f000 fbb2 	bl	8003978 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003214:	bf00      	nop
 8003216:	bd80      	pop	{r7, pc}

08003218 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1);
 800321c:	4802      	ldr	r0, [pc, #8]	; (8003228 <DMA1_Stream5_IRQHandler+0x10>)
 800321e:	f001 fb07 	bl	8004830 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8003222:	bf00      	nop
 8003224:	bd80      	pop	{r7, pc}
 8003226:	bf00      	nop
 8003228:	20000298 	.word	0x20000298

0800322c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8003230:	2020      	movs	r0, #32
 8003232:	f001 ff29 	bl	8005088 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8003236:	bf00      	nop
 8003238:	bd80      	pop	{r7, pc}
	...

0800323c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003240:	4802      	ldr	r0, [pc, #8]	; (800324c <TIM2_IRQHandler+0x10>)
 8003242:	f004 fc1c 	bl	8007a7e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003246:	bf00      	nop
 8003248:	bd80      	pop	{r7, pc}
 800324a:	bf00      	nop
 800324c:	2000047c 	.word	0x2000047c

08003250 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8003254:	4802      	ldr	r0, [pc, #8]	; (8003260 <USART3_IRQHandler+0x10>)
 8003256:	f005 fbe3 	bl	8008a20 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800325a:	bf00      	nop
 800325c:	bd80      	pop	{r7, pc}
 800325e:	bf00      	nop
 8003260:	200004bc 	.word	0x200004bc

08003264 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8003268:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800326c:	f001 ff0c 	bl	8005088 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8003270:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8003274:	f001 ff08 	bl	8005088 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8003278:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800327c:	f001 ff04 	bl	8005088 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8003280:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8003284:	f001 ff00 	bl	8005088 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003288:	bf00      	nop
 800328a:	bd80      	pop	{r7, pc}

0800328c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac);
 8003290:	4803      	ldr	r0, [pc, #12]	; (80032a0 <TIM6_DAC_IRQHandler+0x14>)
 8003292:	f001 f8f2 	bl	800447a <HAL_DAC_IRQHandler>
  HAL_TIM_IRQHandler(&htim6);
 8003296:	4803      	ldr	r0, [pc, #12]	; (80032a4 <TIM6_DAC_IRQHandler+0x18>)
 8003298:	f004 fbf1 	bl	8007a7e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800329c:	bf00      	nop
 800329e:	bd80      	pop	{r7, pc}
 80032a0:	200002f8 	.word	0x200002f8
 80032a4:	2000043c 	.word	0x2000043c

080032a8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80032ac:	4802      	ldr	r0, [pc, #8]	; (80032b8 <DMA2_Stream0_IRQHandler+0x10>)
 80032ae:	f001 fabf 	bl	8004830 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80032b2:	bf00      	nop
 80032b4:	bd80      	pop	{r7, pc}
 80032b6:	bf00      	nop
 80032b8:	20000238 	.word	0x20000238

080032bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b086      	sub	sp, #24
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80032c4:	4a14      	ldr	r2, [pc, #80]	; (8003318 <_sbrk+0x5c>)
 80032c6:	4b15      	ldr	r3, [pc, #84]	; (800331c <_sbrk+0x60>)
 80032c8:	1ad3      	subs	r3, r2, r3
 80032ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80032cc:	697b      	ldr	r3, [r7, #20]
 80032ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80032d0:	4b13      	ldr	r3, [pc, #76]	; (8003320 <_sbrk+0x64>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d102      	bne.n	80032de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80032d8:	4b11      	ldr	r3, [pc, #68]	; (8003320 <_sbrk+0x64>)
 80032da:	4a12      	ldr	r2, [pc, #72]	; (8003324 <_sbrk+0x68>)
 80032dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80032de:	4b10      	ldr	r3, [pc, #64]	; (8003320 <_sbrk+0x64>)
 80032e0:	681a      	ldr	r2, [r3, #0]
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	4413      	add	r3, r2
 80032e6:	693a      	ldr	r2, [r7, #16]
 80032e8:	429a      	cmp	r2, r3
 80032ea:	d207      	bcs.n	80032fc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80032ec:	f006 f924 	bl	8009538 <__errno>
 80032f0:	4602      	mov	r2, r0
 80032f2:	230c      	movs	r3, #12
 80032f4:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80032f6:	f04f 33ff 	mov.w	r3, #4294967295
 80032fa:	e009      	b.n	8003310 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80032fc:	4b08      	ldr	r3, [pc, #32]	; (8003320 <_sbrk+0x64>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003302:	4b07      	ldr	r3, [pc, #28]	; (8003320 <_sbrk+0x64>)
 8003304:	681a      	ldr	r2, [r3, #0]
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	4413      	add	r3, r2
 800330a:	4a05      	ldr	r2, [pc, #20]	; (8003320 <_sbrk+0x64>)
 800330c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800330e:	68fb      	ldr	r3, [r7, #12]
}
 8003310:	4618      	mov	r0, r3
 8003312:	3718      	adds	r7, #24
 8003314:	46bd      	mov	sp, r7
 8003316:	bd80      	pop	{r7, pc}
 8003318:	20050000 	.word	0x20050000
 800331c:	00000400 	.word	0x00000400
 8003320:	200001e4 	.word	0x200001e4
 8003324:	20000548 	.word	0x20000548

08003328 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003328:	b480      	push	{r7}
 800332a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800332c:	4b08      	ldr	r3, [pc, #32]	; (8003350 <SystemInit+0x28>)
 800332e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003332:	4a07      	ldr	r2, [pc, #28]	; (8003350 <SystemInit+0x28>)
 8003334:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003338:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800333c:	4b04      	ldr	r3, [pc, #16]	; (8003350 <SystemInit+0x28>)
 800333e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003342:	609a      	str	r2, [r3, #8]
#endif
}
 8003344:	bf00      	nop
 8003346:	46bd      	mov	sp, r7
 8003348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334c:	4770      	bx	lr
 800334e:	bf00      	nop
 8003350:	e000ed00 	.word	0xe000ed00

08003354 <MX_TIM2_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim6;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b088      	sub	sp, #32
 8003358:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800335a:	f107 0310 	add.w	r3, r7, #16
 800335e:	2200      	movs	r2, #0
 8003360:	601a      	str	r2, [r3, #0]
 8003362:	605a      	str	r2, [r3, #4]
 8003364:	609a      	str	r2, [r3, #8]
 8003366:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003368:	1d3b      	adds	r3, r7, #4
 800336a:	2200      	movs	r2, #0
 800336c:	601a      	str	r2, [r3, #0]
 800336e:	605a      	str	r2, [r3, #4]
 8003370:	609a      	str	r2, [r3, #8]

  htim2.Instance = TIM2;
 8003372:	4b22      	ldr	r3, [pc, #136]	; (80033fc <MX_TIM2_Init+0xa8>)
 8003374:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003378:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 107;
 800337a:	4b20      	ldr	r3, [pc, #128]	; (80033fc <MX_TIM2_Init+0xa8>)
 800337c:	226b      	movs	r2, #107	; 0x6b
 800337e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003380:	4b1e      	ldr	r3, [pc, #120]	; (80033fc <MX_TIM2_Init+0xa8>)
 8003382:	2200      	movs	r2, #0
 8003384:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4999;
 8003386:	4b1d      	ldr	r3, [pc, #116]	; (80033fc <MX_TIM2_Init+0xa8>)
 8003388:	f241 3287 	movw	r2, #4999	; 0x1387
 800338c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800338e:	4b1b      	ldr	r3, [pc, #108]	; (80033fc <MX_TIM2_Init+0xa8>)
 8003390:	2200      	movs	r2, #0
 8003392:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003394:	4b19      	ldr	r3, [pc, #100]	; (80033fc <MX_TIM2_Init+0xa8>)
 8003396:	2200      	movs	r2, #0
 8003398:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800339a:	4818      	ldr	r0, [pc, #96]	; (80033fc <MX_TIM2_Init+0xa8>)
 800339c:	f004 f990 	bl	80076c0 <HAL_TIM_Base_Init>
 80033a0:	4603      	mov	r3, r0
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d001      	beq.n	80033aa <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80033a6:	f7ff fe5b 	bl	8003060 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80033aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80033ae:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80033b0:	f107 0310 	add.w	r3, r7, #16
 80033b4:	4619      	mov	r1, r3
 80033b6:	4811      	ldr	r0, [pc, #68]	; (80033fc <MX_TIM2_Init+0xa8>)
 80033b8:	f004 fd98 	bl	8007eec <HAL_TIM_ConfigClockSource>
 80033bc:	4603      	mov	r3, r0
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d001      	beq.n	80033c6 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80033c2:	f7ff fe4d 	bl	8003060 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim2, TIM_OPMODE_SINGLE) != HAL_OK)
 80033c6:	2108      	movs	r1, #8
 80033c8:	480c      	ldr	r0, [pc, #48]	; (80033fc <MX_TIM2_Init+0xa8>)
 80033ca:	f004 fa49 	bl	8007860 <HAL_TIM_OnePulse_Init>
 80033ce:	4603      	mov	r3, r0
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d001      	beq.n	80033d8 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80033d4:	f7ff fe44 	bl	8003060 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80033d8:	2300      	movs	r3, #0
 80033da:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80033dc:	2300      	movs	r3, #0
 80033de:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80033e0:	1d3b      	adds	r3, r7, #4
 80033e2:	4619      	mov	r1, r3
 80033e4:	4805      	ldr	r0, [pc, #20]	; (80033fc <MX_TIM2_Init+0xa8>)
 80033e6:	f005 fa21 	bl	800882c <HAL_TIMEx_MasterConfigSynchronization>
 80033ea:	4603      	mov	r3, r0
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d001      	beq.n	80033f4 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 80033f0:	f7ff fe36 	bl	8003060 <Error_Handler>
  }

}
 80033f4:	bf00      	nop
 80033f6:	3720      	adds	r7, #32
 80033f8:	46bd      	mov	sp, r7
 80033fa:	bd80      	pop	{r7, pc}
 80033fc:	2000047c 	.word	0x2000047c

08003400 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b08e      	sub	sp, #56	; 0x38
 8003404:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003406:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800340a:	2200      	movs	r2, #0
 800340c:	601a      	str	r2, [r3, #0]
 800340e:	605a      	str	r2, [r3, #4]
 8003410:	609a      	str	r2, [r3, #8]
 8003412:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003414:	f107 031c 	add.w	r3, r7, #28
 8003418:	2200      	movs	r2, #0
 800341a:	601a      	str	r2, [r3, #0]
 800341c:	605a      	str	r2, [r3, #4]
 800341e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003420:	463b      	mov	r3, r7
 8003422:	2200      	movs	r2, #0
 8003424:	601a      	str	r2, [r3, #0]
 8003426:	605a      	str	r2, [r3, #4]
 8003428:	609a      	str	r2, [r3, #8]
 800342a:	60da      	str	r2, [r3, #12]
 800342c:	611a      	str	r2, [r3, #16]
 800342e:	615a      	str	r2, [r3, #20]
 8003430:	619a      	str	r2, [r3, #24]

  htim3.Instance = TIM3;
 8003432:	4b3d      	ldr	r3, [pc, #244]	; (8003528 <MX_TIM3_Init+0x128>)
 8003434:	4a3d      	ldr	r2, [pc, #244]	; (800352c <MX_TIM3_Init+0x12c>)
 8003436:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 107;
 8003438:	4b3b      	ldr	r3, [pc, #236]	; (8003528 <MX_TIM3_Init+0x128>)
 800343a:	226b      	movs	r2, #107	; 0x6b
 800343c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800343e:	4b3a      	ldr	r3, [pc, #232]	; (8003528 <MX_TIM3_Init+0x128>)
 8003440:	2200      	movs	r2, #0
 8003442:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8003444:	4b38      	ldr	r3, [pc, #224]	; (8003528 <MX_TIM3_Init+0x128>)
 8003446:	f240 32e7 	movw	r2, #999	; 0x3e7
 800344a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800344c:	4b36      	ldr	r3, [pc, #216]	; (8003528 <MX_TIM3_Init+0x128>)
 800344e:	2200      	movs	r2, #0
 8003450:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003452:	4b35      	ldr	r3, [pc, #212]	; (8003528 <MX_TIM3_Init+0x128>)
 8003454:	2200      	movs	r2, #0
 8003456:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003458:	4833      	ldr	r0, [pc, #204]	; (8003528 <MX_TIM3_Init+0x128>)
 800345a:	f004 f931 	bl	80076c0 <HAL_TIM_Base_Init>
 800345e:	4603      	mov	r3, r0
 8003460:	2b00      	cmp	r3, #0
 8003462:	d001      	beq.n	8003468 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8003464:	f7ff fdfc 	bl	8003060 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003468:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800346c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800346e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003472:	4619      	mov	r1, r3
 8003474:	482c      	ldr	r0, [pc, #176]	; (8003528 <MX_TIM3_Init+0x128>)
 8003476:	f004 fd39 	bl	8007eec <HAL_TIM_ConfigClockSource>
 800347a:	4603      	mov	r3, r0
 800347c:	2b00      	cmp	r3, #0
 800347e:	d001      	beq.n	8003484 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8003480:	f7ff fdee 	bl	8003060 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8003484:	4828      	ldr	r0, [pc, #160]	; (8003528 <MX_TIM3_Init+0x128>)
 8003486:	f004 f971 	bl	800776c <HAL_TIM_PWM_Init>
 800348a:	4603      	mov	r3, r0
 800348c:	2b00      	cmp	r3, #0
 800348e:	d001      	beq.n	8003494 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8003490:	f7ff fde6 	bl	8003060 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003494:	2300      	movs	r3, #0
 8003496:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003498:	2300      	movs	r3, #0
 800349a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800349c:	f107 031c 	add.w	r3, r7, #28
 80034a0:	4619      	mov	r1, r3
 80034a2:	4821      	ldr	r0, [pc, #132]	; (8003528 <MX_TIM3_Init+0x128>)
 80034a4:	f005 f9c2 	bl	800882c <HAL_TIMEx_MasterConfigSynchronization>
 80034a8:	4603      	mov	r3, r0
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d001      	beq.n	80034b2 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80034ae:	f7ff fdd7 	bl	8003060 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80034b2:	2360      	movs	r3, #96	; 0x60
 80034b4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80034b6:	2300      	movs	r3, #0
 80034b8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80034ba:	2300      	movs	r3, #0
 80034bc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80034be:	2300      	movs	r3, #0
 80034c0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80034c2:	463b      	mov	r3, r7
 80034c4:	2200      	movs	r2, #0
 80034c6:	4619      	mov	r1, r3
 80034c8:	4817      	ldr	r0, [pc, #92]	; (8003528 <MX_TIM3_Init+0x128>)
 80034ca:	f004 fbf7 	bl	8007cbc <HAL_TIM_PWM_ConfigChannel>
 80034ce:	4603      	mov	r3, r0
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d001      	beq.n	80034d8 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 80034d4:	f7ff fdc4 	bl	8003060 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80034d8:	463b      	mov	r3, r7
 80034da:	2204      	movs	r2, #4
 80034dc:	4619      	mov	r1, r3
 80034de:	4812      	ldr	r0, [pc, #72]	; (8003528 <MX_TIM3_Init+0x128>)
 80034e0:	f004 fbec 	bl	8007cbc <HAL_TIM_PWM_ConfigChannel>
 80034e4:	4603      	mov	r3, r0
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d001      	beq.n	80034ee <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 80034ea:	f7ff fdb9 	bl	8003060 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80034ee:	463b      	mov	r3, r7
 80034f0:	2208      	movs	r2, #8
 80034f2:	4619      	mov	r1, r3
 80034f4:	480c      	ldr	r0, [pc, #48]	; (8003528 <MX_TIM3_Init+0x128>)
 80034f6:	f004 fbe1 	bl	8007cbc <HAL_TIM_PWM_ConfigChannel>
 80034fa:	4603      	mov	r3, r0
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d001      	beq.n	8003504 <MX_TIM3_Init+0x104>
  {
    Error_Handler();
 8003500:	f7ff fdae 	bl	8003060 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003504:	463b      	mov	r3, r7
 8003506:	220c      	movs	r2, #12
 8003508:	4619      	mov	r1, r3
 800350a:	4807      	ldr	r0, [pc, #28]	; (8003528 <MX_TIM3_Init+0x128>)
 800350c:	f004 fbd6 	bl	8007cbc <HAL_TIM_PWM_ConfigChannel>
 8003510:	4603      	mov	r3, r0
 8003512:	2b00      	cmp	r3, #0
 8003514:	d001      	beq.n	800351a <MX_TIM3_Init+0x11a>
  {
    Error_Handler();
 8003516:	f7ff fda3 	bl	8003060 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim3);
 800351a:	4803      	ldr	r0, [pc, #12]	; (8003528 <MX_TIM3_Init+0x128>)
 800351c:	f000 f8f4 	bl	8003708 <HAL_TIM_MspPostInit>

}
 8003520:	bf00      	nop
 8003522:	3738      	adds	r7, #56	; 0x38
 8003524:	46bd      	mov	sp, r7
 8003526:	bd80      	pop	{r7, pc}
 8003528:	200003fc 	.word	0x200003fc
 800352c:	40000400 	.word	0x40000400

08003530 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b08c      	sub	sp, #48	; 0x30
 8003534:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 8003536:	f107 030c 	add.w	r3, r7, #12
 800353a:	2224      	movs	r2, #36	; 0x24
 800353c:	2100      	movs	r1, #0
 800353e:	4618      	mov	r0, r3
 8003540:	f006 f824 	bl	800958c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003544:	463b      	mov	r3, r7
 8003546:	2200      	movs	r2, #0
 8003548:	601a      	str	r2, [r3, #0]
 800354a:	605a      	str	r2, [r3, #4]
 800354c:	609a      	str	r2, [r3, #8]

  htim4.Instance = TIM4;
 800354e:	4b20      	ldr	r3, [pc, #128]	; (80035d0 <MX_TIM4_Init+0xa0>)
 8003550:	4a20      	ldr	r2, [pc, #128]	; (80035d4 <MX_TIM4_Init+0xa4>)
 8003552:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 3;
 8003554:	4b1e      	ldr	r3, [pc, #120]	; (80035d0 <MX_TIM4_Init+0xa0>)
 8003556:	2203      	movs	r2, #3
 8003558:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800355a:	4b1d      	ldr	r3, [pc, #116]	; (80035d0 <MX_TIM4_Init+0xa0>)
 800355c:	2200      	movs	r2, #0
 800355e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 100;
 8003560:	4b1b      	ldr	r3, [pc, #108]	; (80035d0 <MX_TIM4_Init+0xa0>)
 8003562:	2264      	movs	r2, #100	; 0x64
 8003564:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003566:	4b1a      	ldr	r3, [pc, #104]	; (80035d0 <MX_TIM4_Init+0xa0>)
 8003568:	2200      	movs	r2, #0
 800356a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800356c:	4b18      	ldr	r3, [pc, #96]	; (80035d0 <MX_TIM4_Init+0xa0>)
 800356e:	2200      	movs	r2, #0
 8003570:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8003572:	2303      	movs	r3, #3
 8003574:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8003576:	2302      	movs	r3, #2
 8003578:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800357a:	2301      	movs	r3, #1
 800357c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800357e:	2300      	movs	r3, #0
 8003580:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8003582:	2300      	movs	r3, #0
 8003584:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8003586:	2302      	movs	r3, #2
 8003588:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800358a:	2301      	movs	r3, #1
 800358c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800358e:	2300      	movs	r3, #0
 8003590:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8003592:	2300      	movs	r3, #0
 8003594:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8003596:	f107 030c 	add.w	r3, r7, #12
 800359a:	4619      	mov	r1, r3
 800359c:	480c      	ldr	r0, [pc, #48]	; (80035d0 <MX_TIM4_Init+0xa0>)
 800359e:	f004 f9a5 	bl	80078ec <HAL_TIM_Encoder_Init>
 80035a2:	4603      	mov	r3, r0
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d001      	beq.n	80035ac <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 80035a8:	f7ff fd5a 	bl	8003060 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80035ac:	2300      	movs	r3, #0
 80035ae:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80035b0:	2300      	movs	r3, #0
 80035b2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80035b4:	463b      	mov	r3, r7
 80035b6:	4619      	mov	r1, r3
 80035b8:	4805      	ldr	r0, [pc, #20]	; (80035d0 <MX_TIM4_Init+0xa0>)
 80035ba:	f005 f937 	bl	800882c <HAL_TIMEx_MasterConfigSynchronization>
 80035be:	4603      	mov	r3, r0
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d001      	beq.n	80035c8 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 80035c4:	f7ff fd4c 	bl	8003060 <Error_Handler>
  }

}
 80035c8:	bf00      	nop
 80035ca:	3730      	adds	r7, #48	; 0x30
 80035cc:	46bd      	mov	sp, r7
 80035ce:	bd80      	pop	{r7, pc}
 80035d0:	200003bc 	.word	0x200003bc
 80035d4:	40000800 	.word	0x40000800

080035d8 <HAL_TIM_Base_MspInit>:
  }

}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b086      	sub	sp, #24
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035e8:	d114      	bne.n	8003614 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80035ea:	4b22      	ldr	r3, [pc, #136]	; (8003674 <HAL_TIM_Base_MspInit+0x9c>)
 80035ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ee:	4a21      	ldr	r2, [pc, #132]	; (8003674 <HAL_TIM_Base_MspInit+0x9c>)
 80035f0:	f043 0301 	orr.w	r3, r3, #1
 80035f4:	6413      	str	r3, [r2, #64]	; 0x40
 80035f6:	4b1f      	ldr	r3, [pc, #124]	; (8003674 <HAL_TIM_Base_MspInit+0x9c>)
 80035f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035fa:	f003 0301 	and.w	r3, r3, #1
 80035fe:	617b      	str	r3, [r7, #20]
 8003600:	697b      	ldr	r3, [r7, #20]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003602:	2200      	movs	r2, #0
 8003604:	2100      	movs	r1, #0
 8003606:	201c      	movs	r0, #28
 8003608:	f000 fedf 	bl	80043ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800360c:	201c      	movs	r0, #28
 800360e:	f000 fef8 	bl	8004402 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8003612:	e02a      	b.n	800366a <HAL_TIM_Base_MspInit+0x92>
  else if(tim_baseHandle->Instance==TIM3)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4a17      	ldr	r2, [pc, #92]	; (8003678 <HAL_TIM_Base_MspInit+0xa0>)
 800361a:	4293      	cmp	r3, r2
 800361c:	d10c      	bne.n	8003638 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800361e:	4b15      	ldr	r3, [pc, #84]	; (8003674 <HAL_TIM_Base_MspInit+0x9c>)
 8003620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003622:	4a14      	ldr	r2, [pc, #80]	; (8003674 <HAL_TIM_Base_MspInit+0x9c>)
 8003624:	f043 0302 	orr.w	r3, r3, #2
 8003628:	6413      	str	r3, [r2, #64]	; 0x40
 800362a:	4b12      	ldr	r3, [pc, #72]	; (8003674 <HAL_TIM_Base_MspInit+0x9c>)
 800362c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800362e:	f003 0302 	and.w	r3, r3, #2
 8003632:	613b      	str	r3, [r7, #16]
 8003634:	693b      	ldr	r3, [r7, #16]
}
 8003636:	e018      	b.n	800366a <HAL_TIM_Base_MspInit+0x92>
  else if(tim_baseHandle->Instance==TIM6)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	4a0f      	ldr	r2, [pc, #60]	; (800367c <HAL_TIM_Base_MspInit+0xa4>)
 800363e:	4293      	cmp	r3, r2
 8003640:	d113      	bne.n	800366a <HAL_TIM_Base_MspInit+0x92>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003642:	4b0c      	ldr	r3, [pc, #48]	; (8003674 <HAL_TIM_Base_MspInit+0x9c>)
 8003644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003646:	4a0b      	ldr	r2, [pc, #44]	; (8003674 <HAL_TIM_Base_MspInit+0x9c>)
 8003648:	f043 0310 	orr.w	r3, r3, #16
 800364c:	6413      	str	r3, [r2, #64]	; 0x40
 800364e:	4b09      	ldr	r3, [pc, #36]	; (8003674 <HAL_TIM_Base_MspInit+0x9c>)
 8003650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003652:	f003 0310 	and.w	r3, r3, #16
 8003656:	60fb      	str	r3, [r7, #12]
 8003658:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800365a:	2200      	movs	r2, #0
 800365c:	2100      	movs	r1, #0
 800365e:	2036      	movs	r0, #54	; 0x36
 8003660:	f000 feb3 	bl	80043ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003664:	2036      	movs	r0, #54	; 0x36
 8003666:	f000 fecc 	bl	8004402 <HAL_NVIC_EnableIRQ>
}
 800366a:	bf00      	nop
 800366c:	3718      	adds	r7, #24
 800366e:	46bd      	mov	sp, r7
 8003670:	bd80      	pop	{r7, pc}
 8003672:	bf00      	nop
 8003674:	40023800 	.word	0x40023800
 8003678:	40000400 	.word	0x40000400
 800367c:	40001000 	.word	0x40001000

08003680 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b08a      	sub	sp, #40	; 0x28
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003688:	f107 0314 	add.w	r3, r7, #20
 800368c:	2200      	movs	r2, #0
 800368e:	601a      	str	r2, [r3, #0]
 8003690:	605a      	str	r2, [r3, #4]
 8003692:	609a      	str	r2, [r3, #8]
 8003694:	60da      	str	r2, [r3, #12]
 8003696:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM4)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4a17      	ldr	r2, [pc, #92]	; (80036fc <HAL_TIM_Encoder_MspInit+0x7c>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d128      	bne.n	80036f4 <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80036a2:	4b17      	ldr	r3, [pc, #92]	; (8003700 <HAL_TIM_Encoder_MspInit+0x80>)
 80036a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036a6:	4a16      	ldr	r2, [pc, #88]	; (8003700 <HAL_TIM_Encoder_MspInit+0x80>)
 80036a8:	f043 0304 	orr.w	r3, r3, #4
 80036ac:	6413      	str	r3, [r2, #64]	; 0x40
 80036ae:	4b14      	ldr	r3, [pc, #80]	; (8003700 <HAL_TIM_Encoder_MspInit+0x80>)
 80036b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036b2:	f003 0304 	and.w	r3, r3, #4
 80036b6:	613b      	str	r3, [r7, #16]
 80036b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80036ba:	4b11      	ldr	r3, [pc, #68]	; (8003700 <HAL_TIM_Encoder_MspInit+0x80>)
 80036bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036be:	4a10      	ldr	r2, [pc, #64]	; (8003700 <HAL_TIM_Encoder_MspInit+0x80>)
 80036c0:	f043 0308 	orr.w	r3, r3, #8
 80036c4:	6313      	str	r3, [r2, #48]	; 0x30
 80036c6:	4b0e      	ldr	r3, [pc, #56]	; (8003700 <HAL_TIM_Encoder_MspInit+0x80>)
 80036c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036ca:	f003 0308 	and.w	r3, r3, #8
 80036ce:	60fb      	str	r3, [r7, #12]
 80036d0:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = ENC_TIM_DT_Pin|ENC_TIM_CLK_Pin;
 80036d2:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80036d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036d8:	2302      	movs	r3, #2
 80036da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036dc:	2300      	movs	r3, #0
 80036de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036e0:	2300      	movs	r3, #0
 80036e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80036e4:	2302      	movs	r3, #2
 80036e6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80036e8:	f107 0314 	add.w	r3, r7, #20
 80036ec:	4619      	mov	r1, r3
 80036ee:	4805      	ldr	r0, [pc, #20]	; (8003704 <HAL_TIM_Encoder_MspInit+0x84>)
 80036f0:	f001 fb06 	bl	8004d00 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80036f4:	bf00      	nop
 80036f6:	3728      	adds	r7, #40	; 0x28
 80036f8:	46bd      	mov	sp, r7
 80036fa:	bd80      	pop	{r7, pc}
 80036fc:	40000800 	.word	0x40000800
 8003700:	40023800 	.word	0x40023800
 8003704:	40020c00 	.word	0x40020c00

08003708 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b08a      	sub	sp, #40	; 0x28
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003710:	f107 0314 	add.w	r3, r7, #20
 8003714:	2200      	movs	r2, #0
 8003716:	601a      	str	r2, [r3, #0]
 8003718:	605a      	str	r2, [r3, #4]
 800371a:	609a      	str	r2, [r3, #8]
 800371c:	60da      	str	r2, [r3, #12]
 800371e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	4a1f      	ldr	r2, [pc, #124]	; (80037a4 <HAL_TIM_MspPostInit+0x9c>)
 8003726:	4293      	cmp	r3, r2
 8003728:	d138      	bne.n	800379c <HAL_TIM_MspPostInit+0x94>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800372a:	4b1f      	ldr	r3, [pc, #124]	; (80037a8 <HAL_TIM_MspPostInit+0xa0>)
 800372c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800372e:	4a1e      	ldr	r2, [pc, #120]	; (80037a8 <HAL_TIM_MspPostInit+0xa0>)
 8003730:	f043 0302 	orr.w	r3, r3, #2
 8003734:	6313      	str	r3, [r2, #48]	; 0x30
 8003736:	4b1c      	ldr	r3, [pc, #112]	; (80037a8 <HAL_TIM_MspPostInit+0xa0>)
 8003738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800373a:	f003 0302 	and.w	r3, r3, #2
 800373e:	613b      	str	r3, [r7, #16]
 8003740:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003742:	4b19      	ldr	r3, [pc, #100]	; (80037a8 <HAL_TIM_MspPostInit+0xa0>)
 8003744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003746:	4a18      	ldr	r2, [pc, #96]	; (80037a8 <HAL_TIM_MspPostInit+0xa0>)
 8003748:	f043 0304 	orr.w	r3, r3, #4
 800374c:	6313      	str	r3, [r2, #48]	; 0x30
 800374e:	4b16      	ldr	r3, [pc, #88]	; (80037a8 <HAL_TIM_MspPostInit+0xa0>)
 8003750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003752:	f003 0304 	and.w	r3, r3, #4
 8003756:	60fb      	str	r3, [r7, #12]
 8003758:	68fb      	ldr	r3, [r7, #12]
    PB1     ------> TIM3_CH4
    PC7     ------> TIM3_CH2
    PC8     ------> TIM3_CH3
    PB4     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = TM3_PWM_CH4_Pin|LED_RGB_CH_R_Pin;
 800375a:	2312      	movs	r3, #18
 800375c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800375e:	2302      	movs	r3, #2
 8003760:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003762:	2300      	movs	r3, #0
 8003764:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003766:	2300      	movs	r3, #0
 8003768:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800376a:	2302      	movs	r3, #2
 800376c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800376e:	f107 0314 	add.w	r3, r7, #20
 8003772:	4619      	mov	r1, r3
 8003774:	480d      	ldr	r0, [pc, #52]	; (80037ac <HAL_TIM_MspPostInit+0xa4>)
 8003776:	f001 fac3 	bl	8004d00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LED_RGB_CH_G_Pin|LED_RGB_CH_B_Pin;
 800377a:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800377e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003780:	2302      	movs	r3, #2
 8003782:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003784:	2300      	movs	r3, #0
 8003786:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003788:	2300      	movs	r3, #0
 800378a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800378c:	2302      	movs	r3, #2
 800378e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003790:	f107 0314 	add.w	r3, r7, #20
 8003794:	4619      	mov	r1, r3
 8003796:	4806      	ldr	r0, [pc, #24]	; (80037b0 <HAL_TIM_MspPostInit+0xa8>)
 8003798:	f001 fab2 	bl	8004d00 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800379c:	bf00      	nop
 800379e:	3728      	adds	r7, #40	; 0x28
 80037a0:	46bd      	mov	sp, r7
 80037a2:	bd80      	pop	{r7, pc}
 80037a4:	40000400 	.word	0x40000400
 80037a8:	40023800 	.word	0x40023800
 80037ac:	40020400 	.word	0x40020400
 80037b0:	40020800 	.word	0x40020800

080037b4 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 80037b8:	4b14      	ldr	r3, [pc, #80]	; (800380c <MX_USART3_UART_Init+0x58>)
 80037ba:	4a15      	ldr	r2, [pc, #84]	; (8003810 <MX_USART3_UART_Init+0x5c>)
 80037bc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80037be:	4b13      	ldr	r3, [pc, #76]	; (800380c <MX_USART3_UART_Init+0x58>)
 80037c0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80037c4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80037c6:	4b11      	ldr	r3, [pc, #68]	; (800380c <MX_USART3_UART_Init+0x58>)
 80037c8:	2200      	movs	r2, #0
 80037ca:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80037cc:	4b0f      	ldr	r3, [pc, #60]	; (800380c <MX_USART3_UART_Init+0x58>)
 80037ce:	2200      	movs	r2, #0
 80037d0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80037d2:	4b0e      	ldr	r3, [pc, #56]	; (800380c <MX_USART3_UART_Init+0x58>)
 80037d4:	2200      	movs	r2, #0
 80037d6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80037d8:	4b0c      	ldr	r3, [pc, #48]	; (800380c <MX_USART3_UART_Init+0x58>)
 80037da:	220c      	movs	r2, #12
 80037dc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80037de:	4b0b      	ldr	r3, [pc, #44]	; (800380c <MX_USART3_UART_Init+0x58>)
 80037e0:	2200      	movs	r2, #0
 80037e2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80037e4:	4b09      	ldr	r3, [pc, #36]	; (800380c <MX_USART3_UART_Init+0x58>)
 80037e6:	2200      	movs	r2, #0
 80037e8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80037ea:	4b08      	ldr	r3, [pc, #32]	; (800380c <MX_USART3_UART_Init+0x58>)
 80037ec:	2200      	movs	r2, #0
 80037ee:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80037f0:	4b06      	ldr	r3, [pc, #24]	; (800380c <MX_USART3_UART_Init+0x58>)
 80037f2:	2200      	movs	r2, #0
 80037f4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80037f6:	4805      	ldr	r0, [pc, #20]	; (800380c <MX_USART3_UART_Init+0x58>)
 80037f8:	f005 f8c4 	bl	8008984 <HAL_UART_Init>
 80037fc:	4603      	mov	r3, r0
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d001      	beq.n	8003806 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8003802:	f7ff fc2d 	bl	8003060 <Error_Handler>
  }

}
 8003806:	bf00      	nop
 8003808:	bd80      	pop	{r7, pc}
 800380a:	bf00      	nop
 800380c:	200004bc 	.word	0x200004bc
 8003810:	40004800 	.word	0x40004800

08003814 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	b08a      	sub	sp, #40	; 0x28
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800381c:	f107 0314 	add.w	r3, r7, #20
 8003820:	2200      	movs	r2, #0
 8003822:	601a      	str	r2, [r3, #0]
 8003824:	605a      	str	r2, [r3, #4]
 8003826:	609a      	str	r2, [r3, #8]
 8003828:	60da      	str	r2, [r3, #12]
 800382a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4a1b      	ldr	r2, [pc, #108]	; (80038a0 <HAL_UART_MspInit+0x8c>)
 8003832:	4293      	cmp	r3, r2
 8003834:	d130      	bne.n	8003898 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8003836:	4b1b      	ldr	r3, [pc, #108]	; (80038a4 <HAL_UART_MspInit+0x90>)
 8003838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800383a:	4a1a      	ldr	r2, [pc, #104]	; (80038a4 <HAL_UART_MspInit+0x90>)
 800383c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003840:	6413      	str	r3, [r2, #64]	; 0x40
 8003842:	4b18      	ldr	r3, [pc, #96]	; (80038a4 <HAL_UART_MspInit+0x90>)
 8003844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003846:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800384a:	613b      	str	r3, [r7, #16]
 800384c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800384e:	4b15      	ldr	r3, [pc, #84]	; (80038a4 <HAL_UART_MspInit+0x90>)
 8003850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003852:	4a14      	ldr	r2, [pc, #80]	; (80038a4 <HAL_UART_MspInit+0x90>)
 8003854:	f043 0308 	orr.w	r3, r3, #8
 8003858:	6313      	str	r3, [r2, #48]	; 0x30
 800385a:	4b12      	ldr	r3, [pc, #72]	; (80038a4 <HAL_UART_MspInit+0x90>)
 800385c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800385e:	f003 0308 	and.w	r3, r3, #8
 8003862:	60fb      	str	r3, [r7, #12]
 8003864:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8003866:	f44f 7340 	mov.w	r3, #768	; 0x300
 800386a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800386c:	2302      	movs	r3, #2
 800386e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003870:	2300      	movs	r3, #0
 8003872:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003874:	2303      	movs	r3, #3
 8003876:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003878:	2307      	movs	r3, #7
 800387a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800387c:	f107 0314 	add.w	r3, r7, #20
 8003880:	4619      	mov	r1, r3
 8003882:	4809      	ldr	r0, [pc, #36]	; (80038a8 <HAL_UART_MspInit+0x94>)
 8003884:	f001 fa3c 	bl	8004d00 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8003888:	2200      	movs	r2, #0
 800388a:	2100      	movs	r1, #0
 800388c:	2027      	movs	r0, #39	; 0x27
 800388e:	f000 fd9c 	bl	80043ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8003892:	2027      	movs	r0, #39	; 0x27
 8003894:	f000 fdb5 	bl	8004402 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8003898:	bf00      	nop
 800389a:	3728      	adds	r7, #40	; 0x28
 800389c:	46bd      	mov	sp, r7
 800389e:	bd80      	pop	{r7, pc}
 80038a0:	40004800 	.word	0x40004800
 80038a4:	40023800 	.word	0x40023800
 80038a8:	40020c00 	.word	0x40020c00

080038ac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80038ac:	f8df d034 	ldr.w	sp, [pc, #52]	; 80038e4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80038b0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80038b2:	e003      	b.n	80038bc <LoopCopyDataInit>

080038b4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80038b4:	4b0c      	ldr	r3, [pc, #48]	; (80038e8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80038b6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80038b8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80038ba:	3104      	adds	r1, #4

080038bc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80038bc:	480b      	ldr	r0, [pc, #44]	; (80038ec <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80038be:	4b0c      	ldr	r3, [pc, #48]	; (80038f0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80038c0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80038c2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80038c4:	d3f6      	bcc.n	80038b4 <CopyDataInit>
  ldr  r2, =_sbss
 80038c6:	4a0b      	ldr	r2, [pc, #44]	; (80038f4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80038c8:	e002      	b.n	80038d0 <LoopFillZerobss>

080038ca <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80038ca:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80038cc:	f842 3b04 	str.w	r3, [r2], #4

080038d0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80038d0:	4b09      	ldr	r3, [pc, #36]	; (80038f8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80038d2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80038d4:	d3f9      	bcc.n	80038ca <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80038d6:	f7ff fd27 	bl	8003328 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80038da:	f005 fe33 	bl	8009544 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80038de:	f7ff f89b 	bl	8002a18 <main>
  bx  lr    
 80038e2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80038e4:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 80038e8:	08009f5c 	.word	0x08009f5c
  ldr  r0, =_sdata
 80038ec:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80038f0:	200001b4 	.word	0x200001b4
  ldr  r2, =_sbss
 80038f4:	200001b4 	.word	0x200001b4
  ldr  r3, = _ebss
 80038f8:	20000544 	.word	0x20000544

080038fc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80038fc:	e7fe      	b.n	80038fc <ADC_IRQHandler>

080038fe <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80038fe:	b580      	push	{r7, lr}
 8003900:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003902:	2003      	movs	r0, #3
 8003904:	f000 fd56 	bl	80043b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003908:	2000      	movs	r0, #0
 800390a:	f000 f805 	bl	8003918 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 800390e:	f7ff fc31 	bl	8003174 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8003912:	2300      	movs	r3, #0
}
 8003914:	4618      	mov	r0, r3
 8003916:	bd80      	pop	{r7, pc}

08003918 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003918:	b580      	push	{r7, lr}
 800391a:	b082      	sub	sp, #8
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003920:	4b12      	ldr	r3, [pc, #72]	; (800396c <HAL_InitTick+0x54>)
 8003922:	681a      	ldr	r2, [r3, #0]
 8003924:	4b12      	ldr	r3, [pc, #72]	; (8003970 <HAL_InitTick+0x58>)
 8003926:	781b      	ldrb	r3, [r3, #0]
 8003928:	4619      	mov	r1, r3
 800392a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800392e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003932:	fbb2 f3f3 	udiv	r3, r2, r3
 8003936:	4618      	mov	r0, r3
 8003938:	f000 fd71 	bl	800441e <HAL_SYSTICK_Config>
 800393c:	4603      	mov	r3, r0
 800393e:	2b00      	cmp	r3, #0
 8003940:	d001      	beq.n	8003946 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003942:	2301      	movs	r3, #1
 8003944:	e00e      	b.n	8003964 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2b0f      	cmp	r3, #15
 800394a:	d80a      	bhi.n	8003962 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800394c:	2200      	movs	r2, #0
 800394e:	6879      	ldr	r1, [r7, #4]
 8003950:	f04f 30ff 	mov.w	r0, #4294967295
 8003954:	f000 fd39 	bl	80043ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003958:	4a06      	ldr	r2, [pc, #24]	; (8003974 <HAL_InitTick+0x5c>)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800395e:	2300      	movs	r3, #0
 8003960:	e000      	b.n	8003964 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003962:	2301      	movs	r3, #1
}
 8003964:	4618      	mov	r0, r3
 8003966:	3708      	adds	r7, #8
 8003968:	46bd      	mov	sp, r7
 800396a:	bd80      	pop	{r7, pc}
 800396c:	20000144 	.word	0x20000144
 8003970:	2000014c 	.word	0x2000014c
 8003974:	20000148 	.word	0x20000148

08003978 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003978:	b480      	push	{r7}
 800397a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800397c:	4b06      	ldr	r3, [pc, #24]	; (8003998 <HAL_IncTick+0x20>)
 800397e:	781b      	ldrb	r3, [r3, #0]
 8003980:	461a      	mov	r2, r3
 8003982:	4b06      	ldr	r3, [pc, #24]	; (800399c <HAL_IncTick+0x24>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	4413      	add	r3, r2
 8003988:	4a04      	ldr	r2, [pc, #16]	; (800399c <HAL_IncTick+0x24>)
 800398a:	6013      	str	r3, [r2, #0]
}
 800398c:	bf00      	nop
 800398e:	46bd      	mov	sp, r7
 8003990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003994:	4770      	bx	lr
 8003996:	bf00      	nop
 8003998:	2000014c 	.word	0x2000014c
 800399c:	2000053c 	.word	0x2000053c

080039a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80039a0:	b480      	push	{r7}
 80039a2:	af00      	add	r7, sp, #0
  return uwTick;
 80039a4:	4b03      	ldr	r3, [pc, #12]	; (80039b4 <HAL_GetTick+0x14>)
 80039a6:	681b      	ldr	r3, [r3, #0]
}
 80039a8:	4618      	mov	r0, r3
 80039aa:	46bd      	mov	sp, r7
 80039ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b0:	4770      	bx	lr
 80039b2:	bf00      	nop
 80039b4:	2000053c 	.word	0x2000053c

080039b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b084      	sub	sp, #16
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80039c0:	f7ff ffee 	bl	80039a0 <HAL_GetTick>
 80039c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039d0:	d005      	beq.n	80039de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80039d2:	4b09      	ldr	r3, [pc, #36]	; (80039f8 <HAL_Delay+0x40>)
 80039d4:	781b      	ldrb	r3, [r3, #0]
 80039d6:	461a      	mov	r2, r3
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	4413      	add	r3, r2
 80039dc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80039de:	bf00      	nop
 80039e0:	f7ff ffde 	bl	80039a0 <HAL_GetTick>
 80039e4:	4602      	mov	r2, r0
 80039e6:	68bb      	ldr	r3, [r7, #8]
 80039e8:	1ad3      	subs	r3, r2, r3
 80039ea:	68fa      	ldr	r2, [r7, #12]
 80039ec:	429a      	cmp	r2, r3
 80039ee:	d8f7      	bhi.n	80039e0 <HAL_Delay+0x28>
  {
  }
}
 80039f0:	bf00      	nop
 80039f2:	3710      	adds	r7, #16
 80039f4:	46bd      	mov	sp, r7
 80039f6:	bd80      	pop	{r7, pc}
 80039f8:	2000014c 	.word	0x2000014c

080039fc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b084      	sub	sp, #16
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003a04:	2300      	movs	r3, #0
 8003a06:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d101      	bne.n	8003a12 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003a0e:	2301      	movs	r3, #1
 8003a10:	e031      	b.n	8003a76 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d109      	bne.n	8003a2e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003a1a:	6878      	ldr	r0, [r7, #4]
 8003a1c:	f7fe fb46 	bl	80020ac <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2200      	movs	r2, #0
 8003a24:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	2200      	movs	r2, #0
 8003a2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a32:	f003 0310 	and.w	r3, r3, #16
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d116      	bne.n	8003a68 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003a3e:	4b10      	ldr	r3, [pc, #64]	; (8003a80 <HAL_ADC_Init+0x84>)
 8003a40:	4013      	ands	r3, r2
 8003a42:	f043 0202 	orr.w	r2, r3, #2
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003a4a:	6878      	ldr	r0, [r7, #4]
 8003a4c:	f000 fa66 	bl	8003f1c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2200      	movs	r2, #0
 8003a54:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a5a:	f023 0303 	bic.w	r3, r3, #3
 8003a5e:	f043 0201 	orr.w	r2, r3, #1
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	641a      	str	r2, [r3, #64]	; 0x40
 8003a66:	e001      	b.n	8003a6c <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003a68:	2301      	movs	r3, #1
 8003a6a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2200      	movs	r2, #0
 8003a70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003a74:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a76:	4618      	mov	r0, r3
 8003a78:	3710      	adds	r7, #16
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	bd80      	pop	{r7, pc}
 8003a7e:	bf00      	nop
 8003a80:	ffffeefd 	.word	0xffffeefd

08003a84 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b086      	sub	sp, #24
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	60f8      	str	r0, [r7, #12]
 8003a8c:	60b9      	str	r1, [r7, #8]
 8003a8e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0;
 8003a90:	2300      	movs	r3, #0
 8003a92:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a9a:	2b01      	cmp	r3, #1
 8003a9c:	d101      	bne.n	8003aa2 <HAL_ADC_Start_DMA+0x1e>
 8003a9e:	2302      	movs	r3, #2
 8003aa0:	e0c7      	b.n	8003c32 <HAL_ADC_Start_DMA+0x1ae>
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	2201      	movs	r2, #1
 8003aa6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	689b      	ldr	r3, [r3, #8]
 8003ab0:	f003 0301 	and.w	r3, r3, #1
 8003ab4:	2b01      	cmp	r3, #1
 8003ab6:	d018      	beq.n	8003aea <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	689a      	ldr	r2, [r3, #8]
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f042 0201 	orr.w	r2, r2, #1
 8003ac6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8003ac8:	4b5c      	ldr	r3, [pc, #368]	; (8003c3c <HAL_ADC_Start_DMA+0x1b8>)
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	4a5c      	ldr	r2, [pc, #368]	; (8003c40 <HAL_ADC_Start_DMA+0x1bc>)
 8003ace:	fba2 2303 	umull	r2, r3, r2, r3
 8003ad2:	0c9a      	lsrs	r2, r3, #18
 8003ad4:	4613      	mov	r3, r2
 8003ad6:	005b      	lsls	r3, r3, #1
 8003ad8:	4413      	add	r3, r2
 8003ada:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 8003adc:	e002      	b.n	8003ae4 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8003ade:	697b      	ldr	r3, [r7, #20]
 8003ae0:	3b01      	subs	r3, #1
 8003ae2:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 8003ae4:	697b      	ldr	r3, [r7, #20]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d1f9      	bne.n	8003ade <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	689b      	ldr	r3, [r3, #8]
 8003af0:	f003 0301 	and.w	r3, r3, #1
 8003af4:	2b01      	cmp	r3, #1
 8003af6:	f040 809b 	bne.w	8003c30 <HAL_ADC_Start_DMA+0x1ac>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003afe:	4b51      	ldr	r3, [pc, #324]	; (8003c44 <HAL_ADC_Start_DMA+0x1c0>)
 8003b00:	4013      	ands	r3, r2
 8003b02:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	685b      	ldr	r3, [r3, #4]
 8003b10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d007      	beq.n	8003b28 <HAL_ADC_Start_DMA+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b1c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003b20:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b2c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003b30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b34:	d106      	bne.n	8003b44 <HAL_ADC_Start_DMA+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b3a:	f023 0206 	bic.w	r2, r3, #6
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	645a      	str	r2, [r3, #68]	; 0x44
 8003b42:	e002      	b.n	8003b4a <HAL_ADC_Start_DMA+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	2200      	movs	r2, #0
 8003b48:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b56:	4a3c      	ldr	r2, [pc, #240]	; (8003c48 <HAL_ADC_Start_DMA+0x1c4>)
 8003b58:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b5e:	4a3b      	ldr	r2, [pc, #236]	; (8003c4c <HAL_ADC_Start_DMA+0x1c8>)
 8003b60:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b66:	4a3a      	ldr	r2, [pc, #232]	; (8003c50 <HAL_ADC_Start_DMA+0x1cc>)
 8003b68:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003b72:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	685a      	ldr	r2, [r3, #4]
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8003b82:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	689a      	ldr	r2, [r3, #8]
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003b92:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	334c      	adds	r3, #76	; 0x4c
 8003b9e:	4619      	mov	r1, r3
 8003ba0:	68ba      	ldr	r2, [r7, #8]
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	f000 fdc2 	bl	800472c <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8003ba8:	4b2a      	ldr	r3, [pc, #168]	; (8003c54 <HAL_ADC_Start_DMA+0x1d0>)
 8003baa:	685b      	ldr	r3, [r3, #4]
 8003bac:	f003 031f 	and.w	r3, r3, #31
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d10f      	bne.n	8003bd4 <HAL_ADC_Start_DMA+0x150>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	689b      	ldr	r3, [r3, #8]
 8003bba:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d136      	bne.n	8003c30 <HAL_ADC_Start_DMA+0x1ac>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	689a      	ldr	r2, [r3, #8]
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003bd0:	609a      	str	r2, [r3, #8]
 8003bd2:	e02d      	b.n	8003c30 <HAL_ADC_Start_DMA+0x1ac>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4a1f      	ldr	r2, [pc, #124]	; (8003c58 <HAL_ADC_Start_DMA+0x1d4>)
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d10e      	bne.n	8003bfc <HAL_ADC_Start_DMA+0x178>
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	689b      	ldr	r3, [r3, #8]
 8003be4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d107      	bne.n	8003bfc <HAL_ADC_Start_DMA+0x178>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	689a      	ldr	r2, [r3, #8]
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003bfa:	609a      	str	r2, [r3, #8]
      }
      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8003bfc:	4b15      	ldr	r3, [pc, #84]	; (8003c54 <HAL_ADC_Start_DMA+0x1d0>)
 8003bfe:	685b      	ldr	r3, [r3, #4]
 8003c00:	f003 0310 	and.w	r3, r3, #16
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d113      	bne.n	8003c30 <HAL_ADC_Start_DMA+0x1ac>
      {
        /* if instance of handle correspond to ADC3 and  no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	4a13      	ldr	r2, [pc, #76]	; (8003c5c <HAL_ADC_Start_DMA+0x1d8>)
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d10e      	bne.n	8003c30 <HAL_ADC_Start_DMA+0x1ac>
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	689b      	ldr	r3, [r3, #8]
 8003c18:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d107      	bne.n	8003c30 <HAL_ADC_Start_DMA+0x1ac>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	689a      	ldr	r2, [r3, #8]
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003c2e:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8003c30:	2300      	movs	r3, #0
}
 8003c32:	4618      	mov	r0, r3
 8003c34:	3718      	adds	r7, #24
 8003c36:	46bd      	mov	sp, r7
 8003c38:	bd80      	pop	{r7, pc}
 8003c3a:	bf00      	nop
 8003c3c:	20000144 	.word	0x20000144
 8003c40:	431bde83 	.word	0x431bde83
 8003c44:	fffff8fe 	.word	0xfffff8fe
 8003c48:	08004111 	.word	0x08004111
 8003c4c:	080041cb 	.word	0x080041cb
 8003c50:	080041e7 	.word	0x080041e7
 8003c54:	40012300 	.word	0x40012300
 8003c58:	40012000 	.word	0x40012000
 8003c5c:	40012200 	.word	0x40012200

08003c60 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003c60:	b480      	push	{r7}
 8003c62:	b083      	sub	sp, #12
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8003c68:	bf00      	nop
 8003c6a:	370c      	adds	r7, #12
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c72:	4770      	bx	lr

08003c74 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003c74:	b480      	push	{r7}
 8003c76:	b083      	sub	sp, #12
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003c7c:	bf00      	nop
 8003c7e:	370c      	adds	r7, #12
 8003c80:	46bd      	mov	sp, r7
 8003c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c86:	4770      	bx	lr

08003c88 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003c88:	b480      	push	{r7}
 8003c8a:	b085      	sub	sp, #20
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
 8003c90:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8003c92:	2300      	movs	r3, #0
 8003c94:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c9c:	2b01      	cmp	r3, #1
 8003c9e:	d101      	bne.n	8003ca4 <HAL_ADC_ConfigChannel+0x1c>
 8003ca0:	2302      	movs	r3, #2
 8003ca2:	e12a      	b.n	8003efa <HAL_ADC_ConfigChannel+0x272>
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2201      	movs	r2, #1
 8003ca8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	2b09      	cmp	r3, #9
 8003cb2:	d93a      	bls.n	8003d2a <HAL_ADC_ConfigChannel+0xa2>
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003cbc:	d035      	beq.n	8003d2a <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	68d9      	ldr	r1, [r3, #12]
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	b29b      	uxth	r3, r3
 8003cca:	461a      	mov	r2, r3
 8003ccc:	4613      	mov	r3, r2
 8003cce:	005b      	lsls	r3, r3, #1
 8003cd0:	4413      	add	r3, r2
 8003cd2:	3b1e      	subs	r3, #30
 8003cd4:	2207      	movs	r2, #7
 8003cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8003cda:	43da      	mvns	r2, r3
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	400a      	ands	r2, r1
 8003ce2:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003ce4:	683b      	ldr	r3, [r7, #0]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	4a87      	ldr	r2, [pc, #540]	; (8003f08 <HAL_ADC_ConfigChannel+0x280>)
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d10a      	bne.n	8003d04 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	68d9      	ldr	r1, [r3, #12]
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	689b      	ldr	r3, [r3, #8]
 8003cf8:	061a      	lsls	r2, r3, #24
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	430a      	orrs	r2, r1
 8003d00:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003d02:	e035      	b.n	8003d70 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	68d9      	ldr	r1, [r3, #12]
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	689a      	ldr	r2, [r3, #8]
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	b29b      	uxth	r3, r3
 8003d14:	4618      	mov	r0, r3
 8003d16:	4603      	mov	r3, r0
 8003d18:	005b      	lsls	r3, r3, #1
 8003d1a:	4403      	add	r3, r0
 8003d1c:	3b1e      	subs	r3, #30
 8003d1e:	409a      	lsls	r2, r3
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	430a      	orrs	r2, r1
 8003d26:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003d28:	e022      	b.n	8003d70 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	6919      	ldr	r1, [r3, #16]
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	b29b      	uxth	r3, r3
 8003d36:	461a      	mov	r2, r3
 8003d38:	4613      	mov	r3, r2
 8003d3a:	005b      	lsls	r3, r3, #1
 8003d3c:	4413      	add	r3, r2
 8003d3e:	2207      	movs	r2, #7
 8003d40:	fa02 f303 	lsl.w	r3, r2, r3
 8003d44:	43da      	mvns	r2, r3
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	400a      	ands	r2, r1
 8003d4c:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	6919      	ldr	r1, [r3, #16]
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	689a      	ldr	r2, [r3, #8]
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	b29b      	uxth	r3, r3
 8003d5e:	4618      	mov	r0, r3
 8003d60:	4603      	mov	r3, r0
 8003d62:	005b      	lsls	r3, r3, #1
 8003d64:	4403      	add	r3, r0
 8003d66:	409a      	lsls	r2, r3
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	430a      	orrs	r2, r1
 8003d6e:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	685b      	ldr	r3, [r3, #4]
 8003d74:	2b06      	cmp	r3, #6
 8003d76:	d824      	bhi.n	8003dc2 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	685a      	ldr	r2, [r3, #4]
 8003d82:	4613      	mov	r3, r2
 8003d84:	009b      	lsls	r3, r3, #2
 8003d86:	4413      	add	r3, r2
 8003d88:	3b05      	subs	r3, #5
 8003d8a:	221f      	movs	r2, #31
 8003d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d90:	43da      	mvns	r2, r3
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	400a      	ands	r2, r1
 8003d98:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	b29b      	uxth	r3, r3
 8003da6:	4618      	mov	r0, r3
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	685a      	ldr	r2, [r3, #4]
 8003dac:	4613      	mov	r3, r2
 8003dae:	009b      	lsls	r3, r3, #2
 8003db0:	4413      	add	r3, r2
 8003db2:	3b05      	subs	r3, #5
 8003db4:	fa00 f203 	lsl.w	r2, r0, r3
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	430a      	orrs	r2, r1
 8003dbe:	635a      	str	r2, [r3, #52]	; 0x34
 8003dc0:	e04c      	b.n	8003e5c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	685b      	ldr	r3, [r3, #4]
 8003dc6:	2b0c      	cmp	r3, #12
 8003dc8:	d824      	bhi.n	8003e14 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	685a      	ldr	r2, [r3, #4]
 8003dd4:	4613      	mov	r3, r2
 8003dd6:	009b      	lsls	r3, r3, #2
 8003dd8:	4413      	add	r3, r2
 8003dda:	3b23      	subs	r3, #35	; 0x23
 8003ddc:	221f      	movs	r2, #31
 8003dde:	fa02 f303 	lsl.w	r3, r2, r3
 8003de2:	43da      	mvns	r2, r3
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	400a      	ands	r2, r1
 8003dea:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	b29b      	uxth	r3, r3
 8003df8:	4618      	mov	r0, r3
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	685a      	ldr	r2, [r3, #4]
 8003dfe:	4613      	mov	r3, r2
 8003e00:	009b      	lsls	r3, r3, #2
 8003e02:	4413      	add	r3, r2
 8003e04:	3b23      	subs	r3, #35	; 0x23
 8003e06:	fa00 f203 	lsl.w	r2, r0, r3
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	430a      	orrs	r2, r1
 8003e10:	631a      	str	r2, [r3, #48]	; 0x30
 8003e12:	e023      	b.n	8003e5c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	685a      	ldr	r2, [r3, #4]
 8003e1e:	4613      	mov	r3, r2
 8003e20:	009b      	lsls	r3, r3, #2
 8003e22:	4413      	add	r3, r2
 8003e24:	3b41      	subs	r3, #65	; 0x41
 8003e26:	221f      	movs	r2, #31
 8003e28:	fa02 f303 	lsl.w	r3, r2, r3
 8003e2c:	43da      	mvns	r2, r3
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	400a      	ands	r2, r1
 8003e34:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	b29b      	uxth	r3, r3
 8003e42:	4618      	mov	r0, r3
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	685a      	ldr	r2, [r3, #4]
 8003e48:	4613      	mov	r3, r2
 8003e4a:	009b      	lsls	r3, r3, #2
 8003e4c:	4413      	add	r3, r2
 8003e4e:	3b41      	subs	r3, #65	; 0x41
 8003e50:	fa00 f203 	lsl.w	r2, r0, r3
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	430a      	orrs	r2, r1
 8003e5a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	4a2a      	ldr	r2, [pc, #168]	; (8003f0c <HAL_ADC_ConfigChannel+0x284>)
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d10a      	bne.n	8003e7c <HAL_ADC_ConfigChannel+0x1f4>
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003e6e:	d105      	bne.n	8003e7c <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8003e70:	4b27      	ldr	r3, [pc, #156]	; (8003f10 <HAL_ADC_ConfigChannel+0x288>)
 8003e72:	685b      	ldr	r3, [r3, #4]
 8003e74:	4a26      	ldr	r2, [pc, #152]	; (8003f10 <HAL_ADC_ConfigChannel+0x288>)
 8003e76:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8003e7a:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	4a22      	ldr	r2, [pc, #136]	; (8003f0c <HAL_ADC_ConfigChannel+0x284>)
 8003e82:	4293      	cmp	r3, r2
 8003e84:	d109      	bne.n	8003e9a <HAL_ADC_ConfigChannel+0x212>
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	2b12      	cmp	r3, #18
 8003e8c:	d105      	bne.n	8003e9a <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8003e8e:	4b20      	ldr	r3, [pc, #128]	; (8003f10 <HAL_ADC_ConfigChannel+0x288>)
 8003e90:	685b      	ldr	r3, [r3, #4]
 8003e92:	4a1f      	ldr	r2, [pc, #124]	; (8003f10 <HAL_ADC_ConfigChannel+0x288>)
 8003e94:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003e98:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	4a1b      	ldr	r2, [pc, #108]	; (8003f0c <HAL_ADC_ConfigChannel+0x284>)
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	d125      	bne.n	8003ef0 <HAL_ADC_ConfigChannel+0x268>
 8003ea4:	683b      	ldr	r3, [r7, #0]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	4a17      	ldr	r2, [pc, #92]	; (8003f08 <HAL_ADC_ConfigChannel+0x280>)
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d003      	beq.n	8003eb6 <HAL_ADC_ConfigChannel+0x22e>
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	2b11      	cmp	r3, #17
 8003eb4:	d11c      	bne.n	8003ef0 <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8003eb6:	4b16      	ldr	r3, [pc, #88]	; (8003f10 <HAL_ADC_ConfigChannel+0x288>)
 8003eb8:	685b      	ldr	r3, [r3, #4]
 8003eba:	4a15      	ldr	r2, [pc, #84]	; (8003f10 <HAL_ADC_ConfigChannel+0x288>)
 8003ebc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003ec0:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	4a10      	ldr	r2, [pc, #64]	; (8003f08 <HAL_ADC_ConfigChannel+0x280>)
 8003ec8:	4293      	cmp	r3, r2
 8003eca:	d111      	bne.n	8003ef0 <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8003ecc:	4b11      	ldr	r3, [pc, #68]	; (8003f14 <HAL_ADC_ConfigChannel+0x28c>)
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	4a11      	ldr	r2, [pc, #68]	; (8003f18 <HAL_ADC_ConfigChannel+0x290>)
 8003ed2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ed6:	0c9a      	lsrs	r2, r3, #18
 8003ed8:	4613      	mov	r3, r2
 8003eda:	009b      	lsls	r3, r3, #2
 8003edc:	4413      	add	r3, r2
 8003ede:	005b      	lsls	r3, r3, #1
 8003ee0:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8003ee2:	e002      	b.n	8003eea <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	3b01      	subs	r3, #1
 8003ee8:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d1f9      	bne.n	8003ee4 <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003ef8:	2300      	movs	r3, #0
}
 8003efa:	4618      	mov	r0, r3
 8003efc:	3714      	adds	r7, #20
 8003efe:	46bd      	mov	sp, r7
 8003f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f04:	4770      	bx	lr
 8003f06:	bf00      	nop
 8003f08:	10000012 	.word	0x10000012
 8003f0c:	40012000 	.word	0x40012000
 8003f10:	40012300 	.word	0x40012300
 8003f14:	20000144 	.word	0x20000144
 8003f18:	431bde83 	.word	0x431bde83

08003f1c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003f1c:	b480      	push	{r7}
 8003f1e:	b083      	sub	sp, #12
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8003f24:	4b78      	ldr	r3, [pc, #480]	; (8004108 <ADC_Init+0x1ec>)
 8003f26:	685b      	ldr	r3, [r3, #4]
 8003f28:	4a77      	ldr	r2, [pc, #476]	; (8004108 <ADC_Init+0x1ec>)
 8003f2a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8003f2e:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8003f30:	4b75      	ldr	r3, [pc, #468]	; (8004108 <ADC_Init+0x1ec>)
 8003f32:	685a      	ldr	r2, [r3, #4]
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	685b      	ldr	r3, [r3, #4]
 8003f38:	4973      	ldr	r1, [pc, #460]	; (8004108 <ADC_Init+0x1ec>)
 8003f3a:	4313      	orrs	r3, r2
 8003f3c:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	685a      	ldr	r2, [r3, #4]
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003f4c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	6859      	ldr	r1, [r3, #4]
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	691b      	ldr	r3, [r3, #16]
 8003f58:	021a      	lsls	r2, r3, #8
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	430a      	orrs	r2, r1
 8003f60:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	685a      	ldr	r2, [r3, #4]
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003f70:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	6859      	ldr	r1, [r3, #4]
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	689a      	ldr	r2, [r3, #8]
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	430a      	orrs	r2, r1
 8003f82:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	689a      	ldr	r2, [r3, #8]
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003f92:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	6899      	ldr	r1, [r3, #8]
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	68da      	ldr	r2, [r3, #12]
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	430a      	orrs	r2, r1
 8003fa4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003faa:	4a58      	ldr	r2, [pc, #352]	; (800410c <ADC_Init+0x1f0>)
 8003fac:	4293      	cmp	r3, r2
 8003fae:	d022      	beq.n	8003ff6 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	689a      	ldr	r2, [r3, #8]
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003fbe:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	6899      	ldr	r1, [r3, #8]
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	430a      	orrs	r2, r1
 8003fd0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	689a      	ldr	r2, [r3, #8]
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003fe0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	6899      	ldr	r1, [r3, #8]
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	430a      	orrs	r2, r1
 8003ff2:	609a      	str	r2, [r3, #8]
 8003ff4:	e00f      	b.n	8004016 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	689a      	ldr	r2, [r3, #8]
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004004:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	689a      	ldr	r2, [r3, #8]
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004014:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	689a      	ldr	r2, [r3, #8]
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f022 0202 	bic.w	r2, r2, #2
 8004024:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	6899      	ldr	r1, [r3, #8]
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	699b      	ldr	r3, [r3, #24]
 8004030:	005a      	lsls	r2, r3, #1
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	430a      	orrs	r2, r1
 8004038:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004040:	2b00      	cmp	r3, #0
 8004042:	d01b      	beq.n	800407c <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	685a      	ldr	r2, [r3, #4]
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004052:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	685a      	ldr	r2, [r3, #4]
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8004062:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	6859      	ldr	r1, [r3, #4]
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800406e:	3b01      	subs	r3, #1
 8004070:	035a      	lsls	r2, r3, #13
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	430a      	orrs	r2, r1
 8004078:	605a      	str	r2, [r3, #4]
 800407a:	e007      	b.n	800408c <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	685a      	ldr	r2, [r3, #4]
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800408a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800409a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	69db      	ldr	r3, [r3, #28]
 80040a6:	3b01      	subs	r3, #1
 80040a8:	051a      	lsls	r2, r3, #20
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	430a      	orrs	r2, r1
 80040b0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	689a      	ldr	r2, [r3, #8]
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80040c0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	6899      	ldr	r1, [r3, #8]
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80040ce:	025a      	lsls	r2, r3, #9
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	430a      	orrs	r2, r1
 80040d6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	689a      	ldr	r2, [r3, #8]
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040e6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	6899      	ldr	r1, [r3, #8]
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	695b      	ldr	r3, [r3, #20]
 80040f2:	029a      	lsls	r2, r3, #10
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	430a      	orrs	r2, r1
 80040fa:	609a      	str	r2, [r3, #8]
}
 80040fc:	bf00      	nop
 80040fe:	370c      	adds	r7, #12
 8004100:	46bd      	mov	sp, r7
 8004102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004106:	4770      	bx	lr
 8004108:	40012300 	.word	0x40012300
 800410c:	0f000001 	.word	0x0f000001

08004110 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004110:	b580      	push	{r7, lr}
 8004112:	b084      	sub	sp, #16
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800411c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004122:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004126:	2b00      	cmp	r3, #0
 8004128:	d13c      	bne.n	80041a4 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800412e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	689b      	ldr	r3, [r3, #8]
 800413c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004140:	2b00      	cmp	r3, #0
 8004142:	d12b      	bne.n	800419c <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004148:	2b00      	cmp	r3, #0
 800414a:	d127      	bne.n	800419c <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004152:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004156:	2b00      	cmp	r3, #0
 8004158:	d006      	beq.n	8004168 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	689b      	ldr	r3, [r3, #8]
 8004160:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004164:	2b00      	cmp	r3, #0
 8004166:	d119      	bne.n	800419c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	685a      	ldr	r2, [r3, #4]
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f022 0220 	bic.w	r2, r2, #32
 8004176:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800417c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004188:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800418c:	2b00      	cmp	r3, #0
 800418e:	d105      	bne.n	800419c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004194:	f043 0201 	orr.w	r2, r3, #1
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800419c:	68f8      	ldr	r0, [r7, #12]
 800419e:	f7fe fbb3 	bl	8002908 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80041a2:	e00e      	b.n	80041c2 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041a8:	f003 0310 	and.w	r3, r3, #16
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d003      	beq.n	80041b8 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80041b0:	68f8      	ldr	r0, [r7, #12]
 80041b2:	f7ff fd5f 	bl	8003c74 <HAL_ADC_ErrorCallback>
}
 80041b6:	e004      	b.n	80041c2 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041be:	6878      	ldr	r0, [r7, #4]
 80041c0:	4798      	blx	r3
}
 80041c2:	bf00      	nop
 80041c4:	3710      	adds	r7, #16
 80041c6:	46bd      	mov	sp, r7
 80041c8:	bd80      	pop	{r7, pc}

080041ca <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80041ca:	b580      	push	{r7, lr}
 80041cc:	b084      	sub	sp, #16
 80041ce:	af00      	add	r7, sp, #0
 80041d0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041d6:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80041d8:	68f8      	ldr	r0, [r7, #12]
 80041da:	f7ff fd41 	bl	8003c60 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80041de:	bf00      	nop
 80041e0:	3710      	adds	r7, #16
 80041e2:	46bd      	mov	sp, r7
 80041e4:	bd80      	pop	{r7, pc}

080041e6 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80041e6:	b580      	push	{r7, lr}
 80041e8:	b084      	sub	sp, #16
 80041ea:	af00      	add	r7, sp, #0
 80041ec:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041f2:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	2240      	movs	r2, #64	; 0x40
 80041f8:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041fe:	f043 0204 	orr.w	r2, r3, #4
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	645a      	str	r2, [r3, #68]	; 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004206:	68f8      	ldr	r0, [r7, #12]
 8004208:	f7ff fd34 	bl	8003c74 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800420c:	bf00      	nop
 800420e:	3710      	adds	r7, #16
 8004210:	46bd      	mov	sp, r7
 8004212:	bd80      	pop	{r7, pc}

08004214 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004214:	b480      	push	{r7}
 8004216:	b085      	sub	sp, #20
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	f003 0307 	and.w	r3, r3, #7
 8004222:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004224:	4b0b      	ldr	r3, [pc, #44]	; (8004254 <__NVIC_SetPriorityGrouping+0x40>)
 8004226:	68db      	ldr	r3, [r3, #12]
 8004228:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800422a:	68ba      	ldr	r2, [r7, #8]
 800422c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004230:	4013      	ands	r3, r2
 8004232:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004238:	68bb      	ldr	r3, [r7, #8]
 800423a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800423c:	4b06      	ldr	r3, [pc, #24]	; (8004258 <__NVIC_SetPriorityGrouping+0x44>)
 800423e:	4313      	orrs	r3, r2
 8004240:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004242:	4a04      	ldr	r2, [pc, #16]	; (8004254 <__NVIC_SetPriorityGrouping+0x40>)
 8004244:	68bb      	ldr	r3, [r7, #8]
 8004246:	60d3      	str	r3, [r2, #12]
}
 8004248:	bf00      	nop
 800424a:	3714      	adds	r7, #20
 800424c:	46bd      	mov	sp, r7
 800424e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004252:	4770      	bx	lr
 8004254:	e000ed00 	.word	0xe000ed00
 8004258:	05fa0000 	.word	0x05fa0000

0800425c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800425c:	b480      	push	{r7}
 800425e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004260:	4b04      	ldr	r3, [pc, #16]	; (8004274 <__NVIC_GetPriorityGrouping+0x18>)
 8004262:	68db      	ldr	r3, [r3, #12]
 8004264:	0a1b      	lsrs	r3, r3, #8
 8004266:	f003 0307 	and.w	r3, r3, #7
}
 800426a:	4618      	mov	r0, r3
 800426c:	46bd      	mov	sp, r7
 800426e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004272:	4770      	bx	lr
 8004274:	e000ed00 	.word	0xe000ed00

08004278 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004278:	b480      	push	{r7}
 800427a:	b083      	sub	sp, #12
 800427c:	af00      	add	r7, sp, #0
 800427e:	4603      	mov	r3, r0
 8004280:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004282:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004286:	2b00      	cmp	r3, #0
 8004288:	db0b      	blt.n	80042a2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800428a:	79fb      	ldrb	r3, [r7, #7]
 800428c:	f003 021f 	and.w	r2, r3, #31
 8004290:	4907      	ldr	r1, [pc, #28]	; (80042b0 <__NVIC_EnableIRQ+0x38>)
 8004292:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004296:	095b      	lsrs	r3, r3, #5
 8004298:	2001      	movs	r0, #1
 800429a:	fa00 f202 	lsl.w	r2, r0, r2
 800429e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80042a2:	bf00      	nop
 80042a4:	370c      	adds	r7, #12
 80042a6:	46bd      	mov	sp, r7
 80042a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ac:	4770      	bx	lr
 80042ae:	bf00      	nop
 80042b0:	e000e100 	.word	0xe000e100

080042b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80042b4:	b480      	push	{r7}
 80042b6:	b083      	sub	sp, #12
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	4603      	mov	r3, r0
 80042bc:	6039      	str	r1, [r7, #0]
 80042be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80042c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	db0a      	blt.n	80042de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	b2da      	uxtb	r2, r3
 80042cc:	490c      	ldr	r1, [pc, #48]	; (8004300 <__NVIC_SetPriority+0x4c>)
 80042ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042d2:	0112      	lsls	r2, r2, #4
 80042d4:	b2d2      	uxtb	r2, r2
 80042d6:	440b      	add	r3, r1
 80042d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80042dc:	e00a      	b.n	80042f4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	b2da      	uxtb	r2, r3
 80042e2:	4908      	ldr	r1, [pc, #32]	; (8004304 <__NVIC_SetPriority+0x50>)
 80042e4:	79fb      	ldrb	r3, [r7, #7]
 80042e6:	f003 030f 	and.w	r3, r3, #15
 80042ea:	3b04      	subs	r3, #4
 80042ec:	0112      	lsls	r2, r2, #4
 80042ee:	b2d2      	uxtb	r2, r2
 80042f0:	440b      	add	r3, r1
 80042f2:	761a      	strb	r2, [r3, #24]
}
 80042f4:	bf00      	nop
 80042f6:	370c      	adds	r7, #12
 80042f8:	46bd      	mov	sp, r7
 80042fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fe:	4770      	bx	lr
 8004300:	e000e100 	.word	0xe000e100
 8004304:	e000ed00 	.word	0xe000ed00

08004308 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004308:	b480      	push	{r7}
 800430a:	b089      	sub	sp, #36	; 0x24
 800430c:	af00      	add	r7, sp, #0
 800430e:	60f8      	str	r0, [r7, #12]
 8004310:	60b9      	str	r1, [r7, #8]
 8004312:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	f003 0307 	and.w	r3, r3, #7
 800431a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800431c:	69fb      	ldr	r3, [r7, #28]
 800431e:	f1c3 0307 	rsb	r3, r3, #7
 8004322:	2b04      	cmp	r3, #4
 8004324:	bf28      	it	cs
 8004326:	2304      	movcs	r3, #4
 8004328:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800432a:	69fb      	ldr	r3, [r7, #28]
 800432c:	3304      	adds	r3, #4
 800432e:	2b06      	cmp	r3, #6
 8004330:	d902      	bls.n	8004338 <NVIC_EncodePriority+0x30>
 8004332:	69fb      	ldr	r3, [r7, #28]
 8004334:	3b03      	subs	r3, #3
 8004336:	e000      	b.n	800433a <NVIC_EncodePriority+0x32>
 8004338:	2300      	movs	r3, #0
 800433a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800433c:	f04f 32ff 	mov.w	r2, #4294967295
 8004340:	69bb      	ldr	r3, [r7, #24]
 8004342:	fa02 f303 	lsl.w	r3, r2, r3
 8004346:	43da      	mvns	r2, r3
 8004348:	68bb      	ldr	r3, [r7, #8]
 800434a:	401a      	ands	r2, r3
 800434c:	697b      	ldr	r3, [r7, #20]
 800434e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004350:	f04f 31ff 	mov.w	r1, #4294967295
 8004354:	697b      	ldr	r3, [r7, #20]
 8004356:	fa01 f303 	lsl.w	r3, r1, r3
 800435a:	43d9      	mvns	r1, r3
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004360:	4313      	orrs	r3, r2
         );
}
 8004362:	4618      	mov	r0, r3
 8004364:	3724      	adds	r7, #36	; 0x24
 8004366:	46bd      	mov	sp, r7
 8004368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436c:	4770      	bx	lr
	...

08004370 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004370:	b580      	push	{r7, lr}
 8004372:	b082      	sub	sp, #8
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	3b01      	subs	r3, #1
 800437c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004380:	d301      	bcc.n	8004386 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004382:	2301      	movs	r3, #1
 8004384:	e00f      	b.n	80043a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004386:	4a0a      	ldr	r2, [pc, #40]	; (80043b0 <SysTick_Config+0x40>)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	3b01      	subs	r3, #1
 800438c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800438e:	210f      	movs	r1, #15
 8004390:	f04f 30ff 	mov.w	r0, #4294967295
 8004394:	f7ff ff8e 	bl	80042b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004398:	4b05      	ldr	r3, [pc, #20]	; (80043b0 <SysTick_Config+0x40>)
 800439a:	2200      	movs	r2, #0
 800439c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800439e:	4b04      	ldr	r3, [pc, #16]	; (80043b0 <SysTick_Config+0x40>)
 80043a0:	2207      	movs	r2, #7
 80043a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80043a4:	2300      	movs	r3, #0
}
 80043a6:	4618      	mov	r0, r3
 80043a8:	3708      	adds	r7, #8
 80043aa:	46bd      	mov	sp, r7
 80043ac:	bd80      	pop	{r7, pc}
 80043ae:	bf00      	nop
 80043b0:	e000e010 	.word	0xe000e010

080043b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80043b4:	b580      	push	{r7, lr}
 80043b6:	b082      	sub	sp, #8
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80043bc:	6878      	ldr	r0, [r7, #4]
 80043be:	f7ff ff29 	bl	8004214 <__NVIC_SetPriorityGrouping>
}
 80043c2:	bf00      	nop
 80043c4:	3708      	adds	r7, #8
 80043c6:	46bd      	mov	sp, r7
 80043c8:	bd80      	pop	{r7, pc}

080043ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80043ca:	b580      	push	{r7, lr}
 80043cc:	b086      	sub	sp, #24
 80043ce:	af00      	add	r7, sp, #0
 80043d0:	4603      	mov	r3, r0
 80043d2:	60b9      	str	r1, [r7, #8]
 80043d4:	607a      	str	r2, [r7, #4]
 80043d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80043d8:	2300      	movs	r3, #0
 80043da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80043dc:	f7ff ff3e 	bl	800425c <__NVIC_GetPriorityGrouping>
 80043e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80043e2:	687a      	ldr	r2, [r7, #4]
 80043e4:	68b9      	ldr	r1, [r7, #8]
 80043e6:	6978      	ldr	r0, [r7, #20]
 80043e8:	f7ff ff8e 	bl	8004308 <NVIC_EncodePriority>
 80043ec:	4602      	mov	r2, r0
 80043ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80043f2:	4611      	mov	r1, r2
 80043f4:	4618      	mov	r0, r3
 80043f6:	f7ff ff5d 	bl	80042b4 <__NVIC_SetPriority>
}
 80043fa:	bf00      	nop
 80043fc:	3718      	adds	r7, #24
 80043fe:	46bd      	mov	sp, r7
 8004400:	bd80      	pop	{r7, pc}

08004402 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004402:	b580      	push	{r7, lr}
 8004404:	b082      	sub	sp, #8
 8004406:	af00      	add	r7, sp, #0
 8004408:	4603      	mov	r3, r0
 800440a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800440c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004410:	4618      	mov	r0, r3
 8004412:	f7ff ff31 	bl	8004278 <__NVIC_EnableIRQ>
}
 8004416:	bf00      	nop
 8004418:	3708      	adds	r7, #8
 800441a:	46bd      	mov	sp, r7
 800441c:	bd80      	pop	{r7, pc}

0800441e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800441e:	b580      	push	{r7, lr}
 8004420:	b082      	sub	sp, #8
 8004422:	af00      	add	r7, sp, #0
 8004424:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004426:	6878      	ldr	r0, [r7, #4]
 8004428:	f7ff ffa2 	bl	8004370 <SysTick_Config>
 800442c:	4603      	mov	r3, r0
}
 800442e:	4618      	mov	r0, r3
 8004430:	3708      	adds	r7, #8
 8004432:	46bd      	mov	sp, r7
 8004434:	bd80      	pop	{r7, pc}

08004436 <HAL_DAC_Init>:
  * @param  hdac: pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 8004436:	b580      	push	{r7, lr}
 8004438:	b082      	sub	sp, #8
 800443a:	af00      	add	r7, sp, #0
 800443c:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	2b00      	cmp	r3, #0
 8004442:	d101      	bne.n	8004448 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8004444:	2301      	movs	r3, #1
 8004446:	e014      	b.n	8004472 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	791b      	ldrb	r3, [r3, #4]
 800444c:	b2db      	uxtb	r3, r3
 800444e:	2b00      	cmp	r3, #0
 8004450:	d105      	bne.n	800445e <HAL_DAC_Init+0x28>
    {
      hdac->MspInitCallback               = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED; 
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	2200      	movs	r2, #0
 8004456:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8004458:	6878      	ldr	r0, [r7, #4]
 800445a:	f7fd fedf 	bl	800221c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	2202      	movs	r2, #2
 8004462:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2200      	movs	r2, #0
 8004468:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	2201      	movs	r2, #1
 800446e:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 8004470:	2300      	movs	r3, #0
}
 8004472:	4618      	mov	r0, r3
 8004474:	3708      	adds	r7, #8
 8004476:	46bd      	mov	sp, r7
 8004478:	bd80      	pop	{r7, pc}

0800447a <HAL_DAC_IRQHandler>:
  * @param  hdac: pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef* hdac)
{
 800447a:	b580      	push	{r7, lr}
 800447c:	b082      	sub	sp, #8
 800447e:	af00      	add	r7, sp, #0
 8004480:	6078      	str	r0, [r7, #4]
  /* Check underrun channel 1 flag */
  if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004488:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800448c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004490:	d118      	bne.n	80044c4 <HAL_DAC_IRQHandler+0x4a>
  {
    /* Change DAC state to error state */
    hdac->State = HAL_DAC_STATE_ERROR;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	2204      	movs	r2, #4
 8004496:	711a      	strb	r2, [r3, #4]
    
    /* Set DAC error code to channel1 DMA underrun error */
    hdac->ErrorCode |= HAL_DAC_ERROR_DMAUNDERRUNCH1;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	691b      	ldr	r3, [r3, #16]
 800449c:	f043 0201 	orr.w	r2, r3, #1
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	611a      	str	r2, [r3, #16]
    
    /* Clear the underrun flag */
    __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR1);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80044ac:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Disable the selected DAC channel1 DMA request */
    hdac->Instance->CR &= ~DAC_CR_DMAEN1;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	681a      	ldr	r2, [r3, #0]
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80044bc:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
    HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 80044be:	6878      	ldr	r0, [r7, #4]
 80044c0:	f000 f825 	bl	800450e <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  /* Check underrun channel 2 flag */
  if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044ca:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80044ce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80044d2:	d118      	bne.n	8004506 <HAL_DAC_IRQHandler+0x8c>
  {
    /* Change DAC state to error state */
    hdac->State = HAL_DAC_STATE_ERROR;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2204      	movs	r2, #4
 80044d8:	711a      	strb	r2, [r3, #4]
    
    /* Set DAC error code to channel2 DMA underrun error */
    hdac->ErrorCode |= HAL_DAC_ERROR_DMAUNDERRUNCH2;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	691b      	ldr	r3, [r3, #16]
 80044de:	f043 0202 	orr.w	r2, r3, #2
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	611a      	str	r2, [r3, #16]
    
    /* Clear the underrun flag */
    __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR2);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80044ee:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Disable the selected DAC channel1 DMA request */
    hdac->Instance->CR &= ~DAC_CR_DMAEN2;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	681a      	ldr	r2, [r3, #0]
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 80044fe:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
    HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8004500:	6878      	ldr	r0, [r7, #4]
 8004502:	f000 f85b 	bl	80045bc <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
}
 8004506:	bf00      	nop
 8004508:	3708      	adds	r7, #8
 800450a:	46bd      	mov	sp, r7
 800450c:	bd80      	pop	{r7, pc}

0800450e <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac: pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800450e:	b480      	push	{r7}
 8004510:	b083      	sub	sp, #12
 8004512:	af00      	add	r7, sp, #0
 8004514:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8004516:	bf00      	nop
 8004518:	370c      	adds	r7, #12
 800451a:	46bd      	mov	sp, r7
 800451c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004520:	4770      	bx	lr

08004522 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8004522:	b480      	push	{r7}
 8004524:	b087      	sub	sp, #28
 8004526:	af00      	add	r7, sp, #0
 8004528:	60f8      	str	r0, [r7, #12]
 800452a:	60b9      	str	r1, [r7, #8]
 800452c:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0, tmpreg2 = 0;
 800452e:	2300      	movs	r3, #0
 8004530:	617b      	str	r3, [r7, #20]
 8004532:	2300      	movs	r3, #0
 8004534:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	795b      	ldrb	r3, [r3, #5]
 800453a:	2b01      	cmp	r3, #1
 800453c:	d101      	bne.n	8004542 <HAL_DAC_ConfigChannel+0x20>
 800453e:	2302      	movs	r3, #2
 8004540:	e036      	b.n	80045b0 <HAL_DAC_ConfigChannel+0x8e>
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	2201      	movs	r2, #1
 8004546:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	2202      	movs	r2, #2
 800454c:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8004556:	f640 72fe 	movw	r2, #4094	; 0xffe
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	fa02 f303 	lsl.w	r3, r2, r3
 8004560:	43db      	mvns	r3, r3
 8004562:	697a      	ldr	r2, [r7, #20]
 8004564:	4013      	ands	r3, r2
 8004566:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8004568:	68bb      	ldr	r3, [r7, #8]
 800456a:	681a      	ldr	r2, [r3, #0]
 800456c:	68bb      	ldr	r3, [r7, #8]
 800456e:	685b      	ldr	r3, [r3, #4]
 8004570:	4313      	orrs	r3, r2
 8004572:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8004574:	693a      	ldr	r2, [r7, #16]
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	fa02 f303 	lsl.w	r3, r2, r3
 800457c:	697a      	ldr	r2, [r7, #20]
 800457e:	4313      	orrs	r3, r2
 8004580:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	697a      	ldr	r2, [r7, #20]
 8004588:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	6819      	ldr	r1, [r3, #0]
 8004590:	22c0      	movs	r2, #192	; 0xc0
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	fa02 f303 	lsl.w	r3, r2, r3
 8004598:	43da      	mvns	r2, r3
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	400a      	ands	r2, r1
 80045a0:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	2201      	movs	r2, #1
 80045a6:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	2200      	movs	r2, #0
 80045ac:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 80045ae:	2300      	movs	r3, #0
}
 80045b0:	4618      	mov	r0, r3
 80045b2:	371c      	adds	r7, #28
 80045b4:	46bd      	mov	sp, r7
 80045b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ba:	4770      	bx	lr

080045bc <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac: pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80045bc:	b480      	push	{r7}
 80045be:	b083      	sub	sp, #12
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 80045c4:	bf00      	nop
 80045c6:	370c      	adds	r7, #12
 80045c8:	46bd      	mov	sp, r7
 80045ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ce:	4770      	bx	lr

080045d0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b086      	sub	sp, #24
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80045d8:	2300      	movs	r3, #0
 80045da:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80045dc:	f7ff f9e0 	bl	80039a0 <HAL_GetTick>
 80045e0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d101      	bne.n	80045ec <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80045e8:	2301      	movs	r3, #1
 80045ea:	e099      	b.n	8004720 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2200      	movs	r2, #0
 80045f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2202      	movs	r2, #2
 80045f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	681a      	ldr	r2, [r3, #0]
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f022 0201 	bic.w	r2, r2, #1
 800460a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800460c:	e00f      	b.n	800462e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800460e:	f7ff f9c7 	bl	80039a0 <HAL_GetTick>
 8004612:	4602      	mov	r2, r0
 8004614:	693b      	ldr	r3, [r7, #16]
 8004616:	1ad3      	subs	r3, r2, r3
 8004618:	2b05      	cmp	r3, #5
 800461a:	d908      	bls.n	800462e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2220      	movs	r2, #32
 8004620:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	2203      	movs	r2, #3
 8004626:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800462a:	2303      	movs	r3, #3
 800462c:	e078      	b.n	8004720 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f003 0301 	and.w	r3, r3, #1
 8004638:	2b00      	cmp	r3, #0
 800463a:	d1e8      	bne.n	800460e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004644:	697a      	ldr	r2, [r7, #20]
 8004646:	4b38      	ldr	r3, [pc, #224]	; (8004728 <HAL_DMA_Init+0x158>)
 8004648:	4013      	ands	r3, r2
 800464a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	685a      	ldr	r2, [r3, #4]
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	689b      	ldr	r3, [r3, #8]
 8004654:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800465a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	691b      	ldr	r3, [r3, #16]
 8004660:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004666:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	699b      	ldr	r3, [r3, #24]
 800466c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004672:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	6a1b      	ldr	r3, [r3, #32]
 8004678:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800467a:	697a      	ldr	r2, [r7, #20]
 800467c:	4313      	orrs	r3, r2
 800467e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004684:	2b04      	cmp	r3, #4
 8004686:	d107      	bne.n	8004698 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004690:	4313      	orrs	r3, r2
 8004692:	697a      	ldr	r2, [r7, #20]
 8004694:	4313      	orrs	r3, r2
 8004696:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	697a      	ldr	r2, [r7, #20]
 800469e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	695b      	ldr	r3, [r3, #20]
 80046a6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80046a8:	697b      	ldr	r3, [r7, #20]
 80046aa:	f023 0307 	bic.w	r3, r3, #7
 80046ae:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046b4:	697a      	ldr	r2, [r7, #20]
 80046b6:	4313      	orrs	r3, r2
 80046b8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046be:	2b04      	cmp	r3, #4
 80046c0:	d117      	bne.n	80046f2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046c6:	697a      	ldr	r2, [r7, #20]
 80046c8:	4313      	orrs	r3, r2
 80046ca:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d00e      	beq.n	80046f2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80046d4:	6878      	ldr	r0, [r7, #4]
 80046d6:	f000 fa99 	bl	8004c0c <DMA_CheckFifoParam>
 80046da:	4603      	mov	r3, r0
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d008      	beq.n	80046f2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2240      	movs	r2, #64	; 0x40
 80046e4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	2201      	movs	r2, #1
 80046ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80046ee:	2301      	movs	r3, #1
 80046f0:	e016      	b.n	8004720 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	697a      	ldr	r2, [r7, #20]
 80046f8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80046fa:	6878      	ldr	r0, [r7, #4]
 80046fc:	f000 fa50 	bl	8004ba0 <DMA_CalcBaseAndBitshift>
 8004700:	4603      	mov	r3, r0
 8004702:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004708:	223f      	movs	r2, #63	; 0x3f
 800470a:	409a      	lsls	r2, r3
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2200      	movs	r2, #0
 8004714:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	2201      	movs	r2, #1
 800471a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800471e:	2300      	movs	r3, #0
}
 8004720:	4618      	mov	r0, r3
 8004722:	3718      	adds	r7, #24
 8004724:	46bd      	mov	sp, r7
 8004726:	bd80      	pop	{r7, pc}
 8004728:	f010803f 	.word	0xf010803f

0800472c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800472c:	b580      	push	{r7, lr}
 800472e:	b086      	sub	sp, #24
 8004730:	af00      	add	r7, sp, #0
 8004732:	60f8      	str	r0, [r7, #12]
 8004734:	60b9      	str	r1, [r7, #8]
 8004736:	607a      	str	r2, [r7, #4]
 8004738:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800473a:	2300      	movs	r3, #0
 800473c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004742:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800474a:	2b01      	cmp	r3, #1
 800474c:	d101      	bne.n	8004752 <HAL_DMA_Start_IT+0x26>
 800474e:	2302      	movs	r3, #2
 8004750:	e048      	b.n	80047e4 <HAL_DMA_Start_IT+0xb8>
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	2201      	movs	r2, #1
 8004756:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004760:	b2db      	uxtb	r3, r3
 8004762:	2b01      	cmp	r3, #1
 8004764:	d137      	bne.n	80047d6 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	2202      	movs	r2, #2
 800476a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	2200      	movs	r2, #0
 8004772:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004774:	683b      	ldr	r3, [r7, #0]
 8004776:	687a      	ldr	r2, [r7, #4]
 8004778:	68b9      	ldr	r1, [r7, #8]
 800477a:	68f8      	ldr	r0, [r7, #12]
 800477c:	f000 f9e2 	bl	8004b44 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004784:	223f      	movs	r2, #63	; 0x3f
 8004786:	409a      	lsls	r2, r3
 8004788:	693b      	ldr	r3, [r7, #16]
 800478a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	681a      	ldr	r2, [r3, #0]
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f042 0216 	orr.w	r2, r2, #22
 800479a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	695a      	ldr	r2, [r3, #20]
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80047aa:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d007      	beq.n	80047c4 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	681a      	ldr	r2, [r3, #0]
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f042 0208 	orr.w	r2, r2, #8
 80047c2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	681a      	ldr	r2, [r3, #0]
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f042 0201 	orr.w	r2, r2, #1
 80047d2:	601a      	str	r2, [r3, #0]
 80047d4:	e005      	b.n	80047e2 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	2200      	movs	r2, #0
 80047da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80047de:	2302      	movs	r3, #2
 80047e0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80047e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80047e4:	4618      	mov	r0, r3
 80047e6:	3718      	adds	r7, #24
 80047e8:	46bd      	mov	sp, r7
 80047ea:	bd80      	pop	{r7, pc}

080047ec <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80047ec:	b480      	push	{r7}
 80047ee:	b083      	sub	sp, #12
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80047fa:	b2db      	uxtb	r3, r3
 80047fc:	2b02      	cmp	r3, #2
 80047fe:	d004      	beq.n	800480a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2280      	movs	r2, #128	; 0x80
 8004804:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004806:	2301      	movs	r3, #1
 8004808:	e00c      	b.n	8004824 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	2205      	movs	r2, #5
 800480e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	681a      	ldr	r2, [r3, #0]
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f022 0201 	bic.w	r2, r2, #1
 8004820:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004822:	2300      	movs	r3, #0
}
 8004824:	4618      	mov	r0, r3
 8004826:	370c      	adds	r7, #12
 8004828:	46bd      	mov	sp, r7
 800482a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482e:	4770      	bx	lr

08004830 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004830:	b580      	push	{r7, lr}
 8004832:	b086      	sub	sp, #24
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8004838:	2300      	movs	r3, #0
 800483a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 800483c:	4b92      	ldr	r3, [pc, #584]	; (8004a88 <HAL_DMA_IRQHandler+0x258>)
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	4a92      	ldr	r2, [pc, #584]	; (8004a8c <HAL_DMA_IRQHandler+0x25c>)
 8004842:	fba2 2303 	umull	r2, r3, r2, r3
 8004846:	0a9b      	lsrs	r3, r3, #10
 8004848:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800484e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004850:	693b      	ldr	r3, [r7, #16]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800485a:	2208      	movs	r2, #8
 800485c:	409a      	lsls	r2, r3
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	4013      	ands	r3, r2
 8004862:	2b00      	cmp	r3, #0
 8004864:	d01a      	beq.n	800489c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f003 0304 	and.w	r3, r3, #4
 8004870:	2b00      	cmp	r3, #0
 8004872:	d013      	beq.n	800489c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	681a      	ldr	r2, [r3, #0]
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f022 0204 	bic.w	r2, r2, #4
 8004882:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004888:	2208      	movs	r2, #8
 800488a:	409a      	lsls	r2, r3
 800488c:	693b      	ldr	r3, [r7, #16]
 800488e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004894:	f043 0201 	orr.w	r2, r3, #1
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048a0:	2201      	movs	r2, #1
 80048a2:	409a      	lsls	r2, r3
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	4013      	ands	r3, r2
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d012      	beq.n	80048d2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	695b      	ldr	r3, [r3, #20]
 80048b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d00b      	beq.n	80048d2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048be:	2201      	movs	r2, #1
 80048c0:	409a      	lsls	r2, r3
 80048c2:	693b      	ldr	r3, [r7, #16]
 80048c4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048ca:	f043 0202 	orr.w	r2, r3, #2
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048d6:	2204      	movs	r2, #4
 80048d8:	409a      	lsls	r2, r3
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	4013      	ands	r3, r2
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d012      	beq.n	8004908 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f003 0302 	and.w	r3, r3, #2
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d00b      	beq.n	8004908 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048f4:	2204      	movs	r2, #4
 80048f6:	409a      	lsls	r2, r3
 80048f8:	693b      	ldr	r3, [r7, #16]
 80048fa:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004900:	f043 0204 	orr.w	r2, r3, #4
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800490c:	2210      	movs	r2, #16
 800490e:	409a      	lsls	r2, r3
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	4013      	ands	r3, r2
 8004914:	2b00      	cmp	r3, #0
 8004916:	d043      	beq.n	80049a0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f003 0308 	and.w	r3, r3, #8
 8004922:	2b00      	cmp	r3, #0
 8004924:	d03c      	beq.n	80049a0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800492a:	2210      	movs	r2, #16
 800492c:	409a      	lsls	r2, r3
 800492e:	693b      	ldr	r3, [r7, #16]
 8004930:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800493c:	2b00      	cmp	r3, #0
 800493e:	d018      	beq.n	8004972 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800494a:	2b00      	cmp	r3, #0
 800494c:	d108      	bne.n	8004960 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004952:	2b00      	cmp	r3, #0
 8004954:	d024      	beq.n	80049a0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800495a:	6878      	ldr	r0, [r7, #4]
 800495c:	4798      	blx	r3
 800495e:	e01f      	b.n	80049a0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004964:	2b00      	cmp	r3, #0
 8004966:	d01b      	beq.n	80049a0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800496c:	6878      	ldr	r0, [r7, #4]
 800496e:	4798      	blx	r3
 8004970:	e016      	b.n	80049a0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800497c:	2b00      	cmp	r3, #0
 800497e:	d107      	bne.n	8004990 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	681a      	ldr	r2, [r3, #0]
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f022 0208 	bic.w	r2, r2, #8
 800498e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004994:	2b00      	cmp	r3, #0
 8004996:	d003      	beq.n	80049a0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800499c:	6878      	ldr	r0, [r7, #4]
 800499e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049a4:	2220      	movs	r2, #32
 80049a6:	409a      	lsls	r2, r3
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	4013      	ands	r3, r2
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	f000 808e 	beq.w	8004ace <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f003 0310 	and.w	r3, r3, #16
 80049bc:	2b00      	cmp	r3, #0
 80049be:	f000 8086 	beq.w	8004ace <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049c6:	2220      	movs	r2, #32
 80049c8:	409a      	lsls	r2, r3
 80049ca:	693b      	ldr	r3, [r7, #16]
 80049cc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80049d4:	b2db      	uxtb	r3, r3
 80049d6:	2b05      	cmp	r3, #5
 80049d8:	d136      	bne.n	8004a48 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	681a      	ldr	r2, [r3, #0]
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f022 0216 	bic.w	r2, r2, #22
 80049e8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	695a      	ldr	r2, [r3, #20]
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80049f8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d103      	bne.n	8004a0a <HAL_DMA_IRQHandler+0x1da>
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d007      	beq.n	8004a1a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	681a      	ldr	r2, [r3, #0]
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f022 0208 	bic.w	r2, r2, #8
 8004a18:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a1e:	223f      	movs	r2, #63	; 0x3f
 8004a20:	409a      	lsls	r2, r3
 8004a22:	693b      	ldr	r3, [r7, #16]
 8004a24:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	2200      	movs	r2, #0
 8004a2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	2201      	movs	r2, #1
 8004a32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d07d      	beq.n	8004b3a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a42:	6878      	ldr	r0, [r7, #4]
 8004a44:	4798      	blx	r3
        }
        return;
 8004a46:	e078      	b.n	8004b3a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d01c      	beq.n	8004a90 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d108      	bne.n	8004a76 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d030      	beq.n	8004ace <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a70:	6878      	ldr	r0, [r7, #4]
 8004a72:	4798      	blx	r3
 8004a74:	e02b      	b.n	8004ace <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d027      	beq.n	8004ace <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a82:	6878      	ldr	r0, [r7, #4]
 8004a84:	4798      	blx	r3
 8004a86:	e022      	b.n	8004ace <HAL_DMA_IRQHandler+0x29e>
 8004a88:	20000144 	.word	0x20000144
 8004a8c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d10f      	bne.n	8004abe <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	681a      	ldr	r2, [r3, #0]
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f022 0210 	bic.w	r2, r2, #16
 8004aac:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	2201      	movs	r2, #1
 8004aba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d003      	beq.n	8004ace <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004aca:	6878      	ldr	r0, [r7, #4]
 8004acc:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d032      	beq.n	8004b3c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ada:	f003 0301 	and.w	r3, r3, #1
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d022      	beq.n	8004b28 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	2205      	movs	r2, #5
 8004ae6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	681a      	ldr	r2, [r3, #0]
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f022 0201 	bic.w	r2, r2, #1
 8004af8:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004afa:	68bb      	ldr	r3, [r7, #8]
 8004afc:	3301      	adds	r3, #1
 8004afe:	60bb      	str	r3, [r7, #8]
 8004b00:	697a      	ldr	r2, [r7, #20]
 8004b02:	429a      	cmp	r2, r3
 8004b04:	d307      	bcc.n	8004b16 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f003 0301 	and.w	r3, r3, #1
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d1f2      	bne.n	8004afa <HAL_DMA_IRQHandler+0x2ca>
 8004b14:	e000      	b.n	8004b18 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8004b16:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2201      	movs	r2, #1
 8004b24:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d005      	beq.n	8004b3c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b34:	6878      	ldr	r0, [r7, #4]
 8004b36:	4798      	blx	r3
 8004b38:	e000      	b.n	8004b3c <HAL_DMA_IRQHandler+0x30c>
        return;
 8004b3a:	bf00      	nop
    }
  }
}
 8004b3c:	3718      	adds	r7, #24
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	bd80      	pop	{r7, pc}
 8004b42:	bf00      	nop

08004b44 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004b44:	b480      	push	{r7}
 8004b46:	b085      	sub	sp, #20
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	60f8      	str	r0, [r7, #12]
 8004b4c:	60b9      	str	r1, [r7, #8]
 8004b4e:	607a      	str	r2, [r7, #4]
 8004b50:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	681a      	ldr	r2, [r3, #0]
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004b60:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	683a      	ldr	r2, [r7, #0]
 8004b68:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	689b      	ldr	r3, [r3, #8]
 8004b6e:	2b40      	cmp	r3, #64	; 0x40
 8004b70:	d108      	bne.n	8004b84 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	687a      	ldr	r2, [r7, #4]
 8004b78:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	68ba      	ldr	r2, [r7, #8]
 8004b80:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004b82:	e007      	b.n	8004b94 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	68ba      	ldr	r2, [r7, #8]
 8004b8a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	687a      	ldr	r2, [r7, #4]
 8004b92:	60da      	str	r2, [r3, #12]
}
 8004b94:	bf00      	nop
 8004b96:	3714      	adds	r7, #20
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9e:	4770      	bx	lr

08004ba0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004ba0:	b480      	push	{r7}
 8004ba2:	b085      	sub	sp, #20
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	b2db      	uxtb	r3, r3
 8004bae:	3b10      	subs	r3, #16
 8004bb0:	4a13      	ldr	r2, [pc, #76]	; (8004c00 <DMA_CalcBaseAndBitshift+0x60>)
 8004bb2:	fba2 2303 	umull	r2, r3, r2, r3
 8004bb6:	091b      	lsrs	r3, r3, #4
 8004bb8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004bba:	4a12      	ldr	r2, [pc, #72]	; (8004c04 <DMA_CalcBaseAndBitshift+0x64>)
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	4413      	add	r3, r2
 8004bc0:	781b      	ldrb	r3, [r3, #0]
 8004bc2:	461a      	mov	r2, r3
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	2b03      	cmp	r3, #3
 8004bcc:	d908      	bls.n	8004be0 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	461a      	mov	r2, r3
 8004bd4:	4b0c      	ldr	r3, [pc, #48]	; (8004c08 <DMA_CalcBaseAndBitshift+0x68>)
 8004bd6:	4013      	ands	r3, r2
 8004bd8:	1d1a      	adds	r2, r3, #4
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	659a      	str	r2, [r3, #88]	; 0x58
 8004bde:	e006      	b.n	8004bee <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	461a      	mov	r2, r3
 8004be6:	4b08      	ldr	r3, [pc, #32]	; (8004c08 <DMA_CalcBaseAndBitshift+0x68>)
 8004be8:	4013      	ands	r3, r2
 8004bea:	687a      	ldr	r2, [r7, #4]
 8004bec:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	3714      	adds	r7, #20
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfc:	4770      	bx	lr
 8004bfe:	bf00      	nop
 8004c00:	aaaaaaab 	.word	0xaaaaaaab
 8004c04:	08009f10 	.word	0x08009f10
 8004c08:	fffffc00 	.word	0xfffffc00

08004c0c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004c0c:	b480      	push	{r7}
 8004c0e:	b085      	sub	sp, #20
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004c14:	2300      	movs	r3, #0
 8004c16:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c1c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	699b      	ldr	r3, [r3, #24]
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d11f      	bne.n	8004c66 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004c26:	68bb      	ldr	r3, [r7, #8]
 8004c28:	2b03      	cmp	r3, #3
 8004c2a:	d855      	bhi.n	8004cd8 <DMA_CheckFifoParam+0xcc>
 8004c2c:	a201      	add	r2, pc, #4	; (adr r2, 8004c34 <DMA_CheckFifoParam+0x28>)
 8004c2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c32:	bf00      	nop
 8004c34:	08004c45 	.word	0x08004c45
 8004c38:	08004c57 	.word	0x08004c57
 8004c3c:	08004c45 	.word	0x08004c45
 8004c40:	08004cd9 	.word	0x08004cd9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c48:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d045      	beq.n	8004cdc <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8004c50:	2301      	movs	r3, #1
 8004c52:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004c54:	e042      	b.n	8004cdc <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c5a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004c5e:	d13f      	bne.n	8004ce0 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8004c60:	2301      	movs	r3, #1
 8004c62:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004c64:	e03c      	b.n	8004ce0 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	699b      	ldr	r3, [r3, #24]
 8004c6a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c6e:	d121      	bne.n	8004cb4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004c70:	68bb      	ldr	r3, [r7, #8]
 8004c72:	2b03      	cmp	r3, #3
 8004c74:	d836      	bhi.n	8004ce4 <DMA_CheckFifoParam+0xd8>
 8004c76:	a201      	add	r2, pc, #4	; (adr r2, 8004c7c <DMA_CheckFifoParam+0x70>)
 8004c78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c7c:	08004c8d 	.word	0x08004c8d
 8004c80:	08004c93 	.word	0x08004c93
 8004c84:	08004c8d 	.word	0x08004c8d
 8004c88:	08004ca5 	.word	0x08004ca5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004c8c:	2301      	movs	r3, #1
 8004c8e:	73fb      	strb	r3, [r7, #15]
      break;
 8004c90:	e02f      	b.n	8004cf2 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c96:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d024      	beq.n	8004ce8 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8004c9e:	2301      	movs	r3, #1
 8004ca0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004ca2:	e021      	b.n	8004ce8 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ca8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004cac:	d11e      	bne.n	8004cec <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8004cae:	2301      	movs	r3, #1
 8004cb0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004cb2:	e01b      	b.n	8004cec <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004cb4:	68bb      	ldr	r3, [r7, #8]
 8004cb6:	2b02      	cmp	r3, #2
 8004cb8:	d902      	bls.n	8004cc0 <DMA_CheckFifoParam+0xb4>
 8004cba:	2b03      	cmp	r3, #3
 8004cbc:	d003      	beq.n	8004cc6 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004cbe:	e018      	b.n	8004cf2 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8004cc0:	2301      	movs	r3, #1
 8004cc2:	73fb      	strb	r3, [r7, #15]
      break;
 8004cc4:	e015      	b.n	8004cf2 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cca:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d00e      	beq.n	8004cf0 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8004cd2:	2301      	movs	r3, #1
 8004cd4:	73fb      	strb	r3, [r7, #15]
      break;
 8004cd6:	e00b      	b.n	8004cf0 <DMA_CheckFifoParam+0xe4>
      break;
 8004cd8:	bf00      	nop
 8004cda:	e00a      	b.n	8004cf2 <DMA_CheckFifoParam+0xe6>
      break;
 8004cdc:	bf00      	nop
 8004cde:	e008      	b.n	8004cf2 <DMA_CheckFifoParam+0xe6>
      break;
 8004ce0:	bf00      	nop
 8004ce2:	e006      	b.n	8004cf2 <DMA_CheckFifoParam+0xe6>
      break;
 8004ce4:	bf00      	nop
 8004ce6:	e004      	b.n	8004cf2 <DMA_CheckFifoParam+0xe6>
      break;
 8004ce8:	bf00      	nop
 8004cea:	e002      	b.n	8004cf2 <DMA_CheckFifoParam+0xe6>
      break;   
 8004cec:	bf00      	nop
 8004cee:	e000      	b.n	8004cf2 <DMA_CheckFifoParam+0xe6>
      break;
 8004cf0:	bf00      	nop
    }
  } 
  
  return status; 
 8004cf2:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	3714      	adds	r7, #20
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfe:	4770      	bx	lr

08004d00 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004d00:	b480      	push	{r7}
 8004d02:	b089      	sub	sp, #36	; 0x24
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
 8004d08:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8004d0a:	2300      	movs	r3, #0
 8004d0c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8004d0e:	2300      	movs	r3, #0
 8004d10:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8004d12:	2300      	movs	r3, #0
 8004d14:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8004d16:	2300      	movs	r3, #0
 8004d18:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8004d1a:	2300      	movs	r3, #0
 8004d1c:	61fb      	str	r3, [r7, #28]
 8004d1e:	e175      	b.n	800500c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8004d20:	2201      	movs	r2, #1
 8004d22:	69fb      	ldr	r3, [r7, #28]
 8004d24:	fa02 f303 	lsl.w	r3, r2, r3
 8004d28:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004d2a:	683b      	ldr	r3, [r7, #0]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	697a      	ldr	r2, [r7, #20]
 8004d30:	4013      	ands	r3, r2
 8004d32:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004d34:	693a      	ldr	r2, [r7, #16]
 8004d36:	697b      	ldr	r3, [r7, #20]
 8004d38:	429a      	cmp	r2, r3
 8004d3a:	f040 8164 	bne.w	8005006 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004d3e:	683b      	ldr	r3, [r7, #0]
 8004d40:	685b      	ldr	r3, [r3, #4]
 8004d42:	2b01      	cmp	r3, #1
 8004d44:	d00b      	beq.n	8004d5e <HAL_GPIO_Init+0x5e>
 8004d46:	683b      	ldr	r3, [r7, #0]
 8004d48:	685b      	ldr	r3, [r3, #4]
 8004d4a:	2b02      	cmp	r3, #2
 8004d4c:	d007      	beq.n	8004d5e <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004d4e:	683b      	ldr	r3, [r7, #0]
 8004d50:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004d52:	2b11      	cmp	r3, #17
 8004d54:	d003      	beq.n	8004d5e <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004d56:	683b      	ldr	r3, [r7, #0]
 8004d58:	685b      	ldr	r3, [r3, #4]
 8004d5a:	2b12      	cmp	r3, #18
 8004d5c:	d130      	bne.n	8004dc0 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	689b      	ldr	r3, [r3, #8]
 8004d62:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8004d64:	69fb      	ldr	r3, [r7, #28]
 8004d66:	005b      	lsls	r3, r3, #1
 8004d68:	2203      	movs	r2, #3
 8004d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8004d6e:	43db      	mvns	r3, r3
 8004d70:	69ba      	ldr	r2, [r7, #24]
 8004d72:	4013      	ands	r3, r2
 8004d74:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8004d76:	683b      	ldr	r3, [r7, #0]
 8004d78:	68da      	ldr	r2, [r3, #12]
 8004d7a:	69fb      	ldr	r3, [r7, #28]
 8004d7c:	005b      	lsls	r3, r3, #1
 8004d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8004d82:	69ba      	ldr	r2, [r7, #24]
 8004d84:	4313      	orrs	r3, r2
 8004d86:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	69ba      	ldr	r2, [r7, #24]
 8004d8c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	685b      	ldr	r3, [r3, #4]
 8004d92:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004d94:	2201      	movs	r2, #1
 8004d96:	69fb      	ldr	r3, [r7, #28]
 8004d98:	fa02 f303 	lsl.w	r3, r2, r3
 8004d9c:	43db      	mvns	r3, r3
 8004d9e:	69ba      	ldr	r2, [r7, #24]
 8004da0:	4013      	ands	r3, r2
 8004da2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8004da4:	683b      	ldr	r3, [r7, #0]
 8004da6:	685b      	ldr	r3, [r3, #4]
 8004da8:	091b      	lsrs	r3, r3, #4
 8004daa:	f003 0201 	and.w	r2, r3, #1
 8004dae:	69fb      	ldr	r3, [r7, #28]
 8004db0:	fa02 f303 	lsl.w	r3, r2, r3
 8004db4:	69ba      	ldr	r2, [r7, #24]
 8004db6:	4313      	orrs	r3, r2
 8004db8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	69ba      	ldr	r2, [r7, #24]
 8004dbe:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	68db      	ldr	r3, [r3, #12]
 8004dc4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8004dc6:	69fb      	ldr	r3, [r7, #28]
 8004dc8:	005b      	lsls	r3, r3, #1
 8004dca:	2203      	movs	r2, #3
 8004dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8004dd0:	43db      	mvns	r3, r3
 8004dd2:	69ba      	ldr	r2, [r7, #24]
 8004dd4:	4013      	ands	r3, r2
 8004dd6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	689a      	ldr	r2, [r3, #8]
 8004ddc:	69fb      	ldr	r3, [r7, #28]
 8004dde:	005b      	lsls	r3, r3, #1
 8004de0:	fa02 f303 	lsl.w	r3, r2, r3
 8004de4:	69ba      	ldr	r2, [r7, #24]
 8004de6:	4313      	orrs	r3, r2
 8004de8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	69ba      	ldr	r2, [r7, #24]
 8004dee:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	685b      	ldr	r3, [r3, #4]
 8004df4:	2b02      	cmp	r3, #2
 8004df6:	d003      	beq.n	8004e00 <HAL_GPIO_Init+0x100>
 8004df8:	683b      	ldr	r3, [r7, #0]
 8004dfa:	685b      	ldr	r3, [r3, #4]
 8004dfc:	2b12      	cmp	r3, #18
 8004dfe:	d123      	bne.n	8004e48 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8004e00:	69fb      	ldr	r3, [r7, #28]
 8004e02:	08da      	lsrs	r2, r3, #3
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	3208      	adds	r2, #8
 8004e08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e0c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8004e0e:	69fb      	ldr	r3, [r7, #28]
 8004e10:	f003 0307 	and.w	r3, r3, #7
 8004e14:	009b      	lsls	r3, r3, #2
 8004e16:	220f      	movs	r2, #15
 8004e18:	fa02 f303 	lsl.w	r3, r2, r3
 8004e1c:	43db      	mvns	r3, r3
 8004e1e:	69ba      	ldr	r2, [r7, #24]
 8004e20:	4013      	ands	r3, r2
 8004e22:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8004e24:	683b      	ldr	r3, [r7, #0]
 8004e26:	691a      	ldr	r2, [r3, #16]
 8004e28:	69fb      	ldr	r3, [r7, #28]
 8004e2a:	f003 0307 	and.w	r3, r3, #7
 8004e2e:	009b      	lsls	r3, r3, #2
 8004e30:	fa02 f303 	lsl.w	r3, r2, r3
 8004e34:	69ba      	ldr	r2, [r7, #24]
 8004e36:	4313      	orrs	r3, r2
 8004e38:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8004e3a:	69fb      	ldr	r3, [r7, #28]
 8004e3c:	08da      	lsrs	r2, r3, #3
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	3208      	adds	r2, #8
 8004e42:	69b9      	ldr	r1, [r7, #24]
 8004e44:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8004e4e:	69fb      	ldr	r3, [r7, #28]
 8004e50:	005b      	lsls	r3, r3, #1
 8004e52:	2203      	movs	r2, #3
 8004e54:	fa02 f303 	lsl.w	r3, r2, r3
 8004e58:	43db      	mvns	r3, r3
 8004e5a:	69ba      	ldr	r2, [r7, #24]
 8004e5c:	4013      	ands	r3, r2
 8004e5e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	685b      	ldr	r3, [r3, #4]
 8004e64:	f003 0203 	and.w	r2, r3, #3
 8004e68:	69fb      	ldr	r3, [r7, #28]
 8004e6a:	005b      	lsls	r3, r3, #1
 8004e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8004e70:	69ba      	ldr	r2, [r7, #24]
 8004e72:	4313      	orrs	r3, r2
 8004e74:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	69ba      	ldr	r2, [r7, #24]
 8004e7a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004e7c:	683b      	ldr	r3, [r7, #0]
 8004e7e:	685b      	ldr	r3, [r3, #4]
 8004e80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	f000 80be 	beq.w	8005006 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004e8a:	4b65      	ldr	r3, [pc, #404]	; (8005020 <HAL_GPIO_Init+0x320>)
 8004e8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e8e:	4a64      	ldr	r2, [pc, #400]	; (8005020 <HAL_GPIO_Init+0x320>)
 8004e90:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004e94:	6453      	str	r3, [r2, #68]	; 0x44
 8004e96:	4b62      	ldr	r3, [pc, #392]	; (8005020 <HAL_GPIO_Init+0x320>)
 8004e98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004e9e:	60fb      	str	r3, [r7, #12]
 8004ea0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8004ea2:	4a60      	ldr	r2, [pc, #384]	; (8005024 <HAL_GPIO_Init+0x324>)
 8004ea4:	69fb      	ldr	r3, [r7, #28]
 8004ea6:	089b      	lsrs	r3, r3, #2
 8004ea8:	3302      	adds	r3, #2
 8004eaa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004eae:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004eb0:	69fb      	ldr	r3, [r7, #28]
 8004eb2:	f003 0303 	and.w	r3, r3, #3
 8004eb6:	009b      	lsls	r3, r3, #2
 8004eb8:	220f      	movs	r2, #15
 8004eba:	fa02 f303 	lsl.w	r3, r2, r3
 8004ebe:	43db      	mvns	r3, r3
 8004ec0:	69ba      	ldr	r2, [r7, #24]
 8004ec2:	4013      	ands	r3, r2
 8004ec4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	4a57      	ldr	r2, [pc, #348]	; (8005028 <HAL_GPIO_Init+0x328>)
 8004eca:	4293      	cmp	r3, r2
 8004ecc:	d037      	beq.n	8004f3e <HAL_GPIO_Init+0x23e>
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	4a56      	ldr	r2, [pc, #344]	; (800502c <HAL_GPIO_Init+0x32c>)
 8004ed2:	4293      	cmp	r3, r2
 8004ed4:	d031      	beq.n	8004f3a <HAL_GPIO_Init+0x23a>
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	4a55      	ldr	r2, [pc, #340]	; (8005030 <HAL_GPIO_Init+0x330>)
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d02b      	beq.n	8004f36 <HAL_GPIO_Init+0x236>
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	4a54      	ldr	r2, [pc, #336]	; (8005034 <HAL_GPIO_Init+0x334>)
 8004ee2:	4293      	cmp	r3, r2
 8004ee4:	d025      	beq.n	8004f32 <HAL_GPIO_Init+0x232>
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	4a53      	ldr	r2, [pc, #332]	; (8005038 <HAL_GPIO_Init+0x338>)
 8004eea:	4293      	cmp	r3, r2
 8004eec:	d01f      	beq.n	8004f2e <HAL_GPIO_Init+0x22e>
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	4a52      	ldr	r2, [pc, #328]	; (800503c <HAL_GPIO_Init+0x33c>)
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	d019      	beq.n	8004f2a <HAL_GPIO_Init+0x22a>
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	4a51      	ldr	r2, [pc, #324]	; (8005040 <HAL_GPIO_Init+0x340>)
 8004efa:	4293      	cmp	r3, r2
 8004efc:	d013      	beq.n	8004f26 <HAL_GPIO_Init+0x226>
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	4a50      	ldr	r2, [pc, #320]	; (8005044 <HAL_GPIO_Init+0x344>)
 8004f02:	4293      	cmp	r3, r2
 8004f04:	d00d      	beq.n	8004f22 <HAL_GPIO_Init+0x222>
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	4a4f      	ldr	r2, [pc, #316]	; (8005048 <HAL_GPIO_Init+0x348>)
 8004f0a:	4293      	cmp	r3, r2
 8004f0c:	d007      	beq.n	8004f1e <HAL_GPIO_Init+0x21e>
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	4a4e      	ldr	r2, [pc, #312]	; (800504c <HAL_GPIO_Init+0x34c>)
 8004f12:	4293      	cmp	r3, r2
 8004f14:	d101      	bne.n	8004f1a <HAL_GPIO_Init+0x21a>
 8004f16:	2309      	movs	r3, #9
 8004f18:	e012      	b.n	8004f40 <HAL_GPIO_Init+0x240>
 8004f1a:	230a      	movs	r3, #10
 8004f1c:	e010      	b.n	8004f40 <HAL_GPIO_Init+0x240>
 8004f1e:	2308      	movs	r3, #8
 8004f20:	e00e      	b.n	8004f40 <HAL_GPIO_Init+0x240>
 8004f22:	2307      	movs	r3, #7
 8004f24:	e00c      	b.n	8004f40 <HAL_GPIO_Init+0x240>
 8004f26:	2306      	movs	r3, #6
 8004f28:	e00a      	b.n	8004f40 <HAL_GPIO_Init+0x240>
 8004f2a:	2305      	movs	r3, #5
 8004f2c:	e008      	b.n	8004f40 <HAL_GPIO_Init+0x240>
 8004f2e:	2304      	movs	r3, #4
 8004f30:	e006      	b.n	8004f40 <HAL_GPIO_Init+0x240>
 8004f32:	2303      	movs	r3, #3
 8004f34:	e004      	b.n	8004f40 <HAL_GPIO_Init+0x240>
 8004f36:	2302      	movs	r3, #2
 8004f38:	e002      	b.n	8004f40 <HAL_GPIO_Init+0x240>
 8004f3a:	2301      	movs	r3, #1
 8004f3c:	e000      	b.n	8004f40 <HAL_GPIO_Init+0x240>
 8004f3e:	2300      	movs	r3, #0
 8004f40:	69fa      	ldr	r2, [r7, #28]
 8004f42:	f002 0203 	and.w	r2, r2, #3
 8004f46:	0092      	lsls	r2, r2, #2
 8004f48:	4093      	lsls	r3, r2
 8004f4a:	69ba      	ldr	r2, [r7, #24]
 8004f4c:	4313      	orrs	r3, r2
 8004f4e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8004f50:	4934      	ldr	r1, [pc, #208]	; (8005024 <HAL_GPIO_Init+0x324>)
 8004f52:	69fb      	ldr	r3, [r7, #28]
 8004f54:	089b      	lsrs	r3, r3, #2
 8004f56:	3302      	adds	r3, #2
 8004f58:	69ba      	ldr	r2, [r7, #24]
 8004f5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004f5e:	4b3c      	ldr	r3, [pc, #240]	; (8005050 <HAL_GPIO_Init+0x350>)
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004f64:	693b      	ldr	r3, [r7, #16]
 8004f66:	43db      	mvns	r3, r3
 8004f68:	69ba      	ldr	r2, [r7, #24]
 8004f6a:	4013      	ands	r3, r2
 8004f6c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004f6e:	683b      	ldr	r3, [r7, #0]
 8004f70:	685b      	ldr	r3, [r3, #4]
 8004f72:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d003      	beq.n	8004f82 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004f7a:	69ba      	ldr	r2, [r7, #24]
 8004f7c:	693b      	ldr	r3, [r7, #16]
 8004f7e:	4313      	orrs	r3, r2
 8004f80:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004f82:	4a33      	ldr	r2, [pc, #204]	; (8005050 <HAL_GPIO_Init+0x350>)
 8004f84:	69bb      	ldr	r3, [r7, #24]
 8004f86:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004f88:	4b31      	ldr	r3, [pc, #196]	; (8005050 <HAL_GPIO_Init+0x350>)
 8004f8a:	685b      	ldr	r3, [r3, #4]
 8004f8c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004f8e:	693b      	ldr	r3, [r7, #16]
 8004f90:	43db      	mvns	r3, r3
 8004f92:	69ba      	ldr	r2, [r7, #24]
 8004f94:	4013      	ands	r3, r2
 8004f96:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	685b      	ldr	r3, [r3, #4]
 8004f9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d003      	beq.n	8004fac <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004fa4:	69ba      	ldr	r2, [r7, #24]
 8004fa6:	693b      	ldr	r3, [r7, #16]
 8004fa8:	4313      	orrs	r3, r2
 8004faa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004fac:	4a28      	ldr	r2, [pc, #160]	; (8005050 <HAL_GPIO_Init+0x350>)
 8004fae:	69bb      	ldr	r3, [r7, #24]
 8004fb0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004fb2:	4b27      	ldr	r3, [pc, #156]	; (8005050 <HAL_GPIO_Init+0x350>)
 8004fb4:	689b      	ldr	r3, [r3, #8]
 8004fb6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004fb8:	693b      	ldr	r3, [r7, #16]
 8004fba:	43db      	mvns	r3, r3
 8004fbc:	69ba      	ldr	r2, [r7, #24]
 8004fbe:	4013      	ands	r3, r2
 8004fc0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	685b      	ldr	r3, [r3, #4]
 8004fc6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d003      	beq.n	8004fd6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004fce:	69ba      	ldr	r2, [r7, #24]
 8004fd0:	693b      	ldr	r3, [r7, #16]
 8004fd2:	4313      	orrs	r3, r2
 8004fd4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004fd6:	4a1e      	ldr	r2, [pc, #120]	; (8005050 <HAL_GPIO_Init+0x350>)
 8004fd8:	69bb      	ldr	r3, [r7, #24]
 8004fda:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004fdc:	4b1c      	ldr	r3, [pc, #112]	; (8005050 <HAL_GPIO_Init+0x350>)
 8004fde:	68db      	ldr	r3, [r3, #12]
 8004fe0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004fe2:	693b      	ldr	r3, [r7, #16]
 8004fe4:	43db      	mvns	r3, r3
 8004fe6:	69ba      	ldr	r2, [r7, #24]
 8004fe8:	4013      	ands	r3, r2
 8004fea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004fec:	683b      	ldr	r3, [r7, #0]
 8004fee:	685b      	ldr	r3, [r3, #4]
 8004ff0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d003      	beq.n	8005000 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004ff8:	69ba      	ldr	r2, [r7, #24]
 8004ffa:	693b      	ldr	r3, [r7, #16]
 8004ffc:	4313      	orrs	r3, r2
 8004ffe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005000:	4a13      	ldr	r2, [pc, #76]	; (8005050 <HAL_GPIO_Init+0x350>)
 8005002:	69bb      	ldr	r3, [r7, #24]
 8005004:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8005006:	69fb      	ldr	r3, [r7, #28]
 8005008:	3301      	adds	r3, #1
 800500a:	61fb      	str	r3, [r7, #28]
 800500c:	69fb      	ldr	r3, [r7, #28]
 800500e:	2b0f      	cmp	r3, #15
 8005010:	f67f ae86 	bls.w	8004d20 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8005014:	bf00      	nop
 8005016:	3724      	adds	r7, #36	; 0x24
 8005018:	46bd      	mov	sp, r7
 800501a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501e:	4770      	bx	lr
 8005020:	40023800 	.word	0x40023800
 8005024:	40013800 	.word	0x40013800
 8005028:	40020000 	.word	0x40020000
 800502c:	40020400 	.word	0x40020400
 8005030:	40020800 	.word	0x40020800
 8005034:	40020c00 	.word	0x40020c00
 8005038:	40021000 	.word	0x40021000
 800503c:	40021400 	.word	0x40021400
 8005040:	40021800 	.word	0x40021800
 8005044:	40021c00 	.word	0x40021c00
 8005048:	40022000 	.word	0x40022000
 800504c:	40022400 	.word	0x40022400
 8005050:	40013c00 	.word	0x40013c00

08005054 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005054:	b480      	push	{r7}
 8005056:	b083      	sub	sp, #12
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]
 800505c:	460b      	mov	r3, r1
 800505e:	807b      	strh	r3, [r7, #2]
 8005060:	4613      	mov	r3, r2
 8005062:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005064:	787b      	ldrb	r3, [r7, #1]
 8005066:	2b00      	cmp	r3, #0
 8005068:	d003      	beq.n	8005072 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800506a:	887a      	ldrh	r2, [r7, #2]
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8005070:	e003      	b.n	800507a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8005072:	887b      	ldrh	r3, [r7, #2]
 8005074:	041a      	lsls	r2, r3, #16
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	619a      	str	r2, [r3, #24]
}
 800507a:	bf00      	nop
 800507c:	370c      	adds	r7, #12
 800507e:	46bd      	mov	sp, r7
 8005080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005084:	4770      	bx	lr
	...

08005088 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005088:	b580      	push	{r7, lr}
 800508a:	b082      	sub	sp, #8
 800508c:	af00      	add	r7, sp, #0
 800508e:	4603      	mov	r3, r0
 8005090:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8005092:	4b08      	ldr	r3, [pc, #32]	; (80050b4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005094:	695a      	ldr	r2, [r3, #20]
 8005096:	88fb      	ldrh	r3, [r7, #6]
 8005098:	4013      	ands	r3, r2
 800509a:	2b00      	cmp	r3, #0
 800509c:	d006      	beq.n	80050ac <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800509e:	4a05      	ldr	r2, [pc, #20]	; (80050b4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80050a0:	88fb      	ldrh	r3, [r7, #6]
 80050a2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80050a4:	88fb      	ldrh	r3, [r7, #6]
 80050a6:	4618      	mov	r0, r3
 80050a8:	f7fd fbd6 	bl	8002858 <HAL_GPIO_EXTI_Callback>
  }
}
 80050ac:	bf00      	nop
 80050ae:	3708      	adds	r7, #8
 80050b0:	46bd      	mov	sp, r7
 80050b2:	bd80      	pop	{r7, pc}
 80050b4:	40013c00 	.word	0x40013c00

080050b8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80050b8:	b580      	push	{r7, lr}
 80050ba:	b082      	sub	sp, #8
 80050bc:	af00      	add	r7, sp, #0
 80050be:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d101      	bne.n	80050ca <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80050c6:	2301      	movs	r3, #1
 80050c8:	e07f      	b.n	80051ca <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80050d0:	b2db      	uxtb	r3, r3
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d106      	bne.n	80050e4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	2200      	movs	r2, #0
 80050da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80050de:	6878      	ldr	r0, [r7, #4]
 80050e0:	f7fd fb76 	bl	80027d0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2224      	movs	r2, #36	; 0x24
 80050e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	681a      	ldr	r2, [r3, #0]
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f022 0201 	bic.w	r2, r2, #1
 80050fa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	685a      	ldr	r2, [r3, #4]
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005108:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	689a      	ldr	r2, [r3, #8]
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005118:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	68db      	ldr	r3, [r3, #12]
 800511e:	2b01      	cmp	r3, #1
 8005120:	d107      	bne.n	8005132 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	689a      	ldr	r2, [r3, #8]
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800512e:	609a      	str	r2, [r3, #8]
 8005130:	e006      	b.n	8005140 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	689a      	ldr	r2, [r3, #8]
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800513e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	68db      	ldr	r3, [r3, #12]
 8005144:	2b02      	cmp	r3, #2
 8005146:	d104      	bne.n	8005152 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005150:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	6859      	ldr	r1, [r3, #4]
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681a      	ldr	r2, [r3, #0]
 800515c:	4b1d      	ldr	r3, [pc, #116]	; (80051d4 <HAL_I2C_Init+0x11c>)
 800515e:	430b      	orrs	r3, r1
 8005160:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	68da      	ldr	r2, [r3, #12]
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005170:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	691a      	ldr	r2, [r3, #16]
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	695b      	ldr	r3, [r3, #20]
 800517a:	ea42 0103 	orr.w	r1, r2, r3
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	699b      	ldr	r3, [r3, #24]
 8005182:	021a      	lsls	r2, r3, #8
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	430a      	orrs	r2, r1
 800518a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	69d9      	ldr	r1, [r3, #28]
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	6a1a      	ldr	r2, [r3, #32]
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	430a      	orrs	r2, r1
 800519a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	681a      	ldr	r2, [r3, #0]
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f042 0201 	orr.w	r2, r2, #1
 80051aa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2200      	movs	r2, #0
 80051b0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	2220      	movs	r2, #32
 80051b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	2200      	movs	r2, #0
 80051be:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2200      	movs	r2, #0
 80051c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80051c8:	2300      	movs	r3, #0
}
 80051ca:	4618      	mov	r0, r3
 80051cc:	3708      	adds	r7, #8
 80051ce:	46bd      	mov	sp, r7
 80051d0:	bd80      	pop	{r7, pc}
 80051d2:	bf00      	nop
 80051d4:	02008000 	.word	0x02008000

080051d8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80051d8:	b580      	push	{r7, lr}
 80051da:	b088      	sub	sp, #32
 80051dc:	af02      	add	r7, sp, #8
 80051de:	60f8      	str	r0, [r7, #12]
 80051e0:	607a      	str	r2, [r7, #4]
 80051e2:	461a      	mov	r2, r3
 80051e4:	460b      	mov	r3, r1
 80051e6:	817b      	strh	r3, [r7, #10]
 80051e8:	4613      	mov	r3, r2
 80051ea:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80051f2:	b2db      	uxtb	r3, r3
 80051f4:	2b20      	cmp	r3, #32
 80051f6:	f040 80da 	bne.w	80053ae <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005200:	2b01      	cmp	r3, #1
 8005202:	d101      	bne.n	8005208 <HAL_I2C_Master_Transmit+0x30>
 8005204:	2302      	movs	r3, #2
 8005206:	e0d3      	b.n	80053b0 <HAL_I2C_Master_Transmit+0x1d8>
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	2201      	movs	r2, #1
 800520c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005210:	f7fe fbc6 	bl	80039a0 <HAL_GetTick>
 8005214:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005216:	697b      	ldr	r3, [r7, #20]
 8005218:	9300      	str	r3, [sp, #0]
 800521a:	2319      	movs	r3, #25
 800521c:	2201      	movs	r2, #1
 800521e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005222:	68f8      	ldr	r0, [r7, #12]
 8005224:	f000 f9e6 	bl	80055f4 <I2C_WaitOnFlagUntilTimeout>
 8005228:	4603      	mov	r3, r0
 800522a:	2b00      	cmp	r3, #0
 800522c:	d001      	beq.n	8005232 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800522e:	2301      	movs	r3, #1
 8005230:	e0be      	b.n	80053b0 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	2221      	movs	r2, #33	; 0x21
 8005236:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	2210      	movs	r2, #16
 800523e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	2200      	movs	r2, #0
 8005246:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	687a      	ldr	r2, [r7, #4]
 800524c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	893a      	ldrh	r2, [r7, #8]
 8005252:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	2200      	movs	r2, #0
 8005258:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800525e:	b29b      	uxth	r3, r3
 8005260:	2bff      	cmp	r3, #255	; 0xff
 8005262:	d90e      	bls.n	8005282 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	22ff      	movs	r2, #255	; 0xff
 8005268:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800526e:	b2da      	uxtb	r2, r3
 8005270:	8979      	ldrh	r1, [r7, #10]
 8005272:	4b51      	ldr	r3, [pc, #324]	; (80053b8 <HAL_I2C_Master_Transmit+0x1e0>)
 8005274:	9300      	str	r3, [sp, #0]
 8005276:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800527a:	68f8      	ldr	r0, [r7, #12]
 800527c:	f000 fb48 	bl	8005910 <I2C_TransferConfig>
 8005280:	e06c      	b.n	800535c <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005286:	b29a      	uxth	r2, r3
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005290:	b2da      	uxtb	r2, r3
 8005292:	8979      	ldrh	r1, [r7, #10]
 8005294:	4b48      	ldr	r3, [pc, #288]	; (80053b8 <HAL_I2C_Master_Transmit+0x1e0>)
 8005296:	9300      	str	r3, [sp, #0]
 8005298:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800529c:	68f8      	ldr	r0, [r7, #12]
 800529e:	f000 fb37 	bl	8005910 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 80052a2:	e05b      	b.n	800535c <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80052a4:	697a      	ldr	r2, [r7, #20]
 80052a6:	6a39      	ldr	r1, [r7, #32]
 80052a8:	68f8      	ldr	r0, [r7, #12]
 80052aa:	f000 f9e3 	bl	8005674 <I2C_WaitOnTXISFlagUntilTimeout>
 80052ae:	4603      	mov	r3, r0
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d001      	beq.n	80052b8 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80052b4:	2301      	movs	r3, #1
 80052b6:	e07b      	b.n	80053b0 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052bc:	781a      	ldrb	r2, [r3, #0]
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052c8:	1c5a      	adds	r2, r3, #1
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052d2:	b29b      	uxth	r3, r3
 80052d4:	3b01      	subs	r3, #1
 80052d6:	b29a      	uxth	r2, r3
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052e0:	3b01      	subs	r3, #1
 80052e2:	b29a      	uxth	r2, r3
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052ec:	b29b      	uxth	r3, r3
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d034      	beq.n	800535c <HAL_I2C_Master_Transmit+0x184>
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d130      	bne.n	800535c <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80052fa:	697b      	ldr	r3, [r7, #20]
 80052fc:	9300      	str	r3, [sp, #0]
 80052fe:	6a3b      	ldr	r3, [r7, #32]
 8005300:	2200      	movs	r2, #0
 8005302:	2180      	movs	r1, #128	; 0x80
 8005304:	68f8      	ldr	r0, [r7, #12]
 8005306:	f000 f975 	bl	80055f4 <I2C_WaitOnFlagUntilTimeout>
 800530a:	4603      	mov	r3, r0
 800530c:	2b00      	cmp	r3, #0
 800530e:	d001      	beq.n	8005314 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8005310:	2301      	movs	r3, #1
 8005312:	e04d      	b.n	80053b0 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005318:	b29b      	uxth	r3, r3
 800531a:	2bff      	cmp	r3, #255	; 0xff
 800531c:	d90e      	bls.n	800533c <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	22ff      	movs	r2, #255	; 0xff
 8005322:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005328:	b2da      	uxtb	r2, r3
 800532a:	8979      	ldrh	r1, [r7, #10]
 800532c:	2300      	movs	r3, #0
 800532e:	9300      	str	r3, [sp, #0]
 8005330:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005334:	68f8      	ldr	r0, [r7, #12]
 8005336:	f000 faeb 	bl	8005910 <I2C_TransferConfig>
 800533a:	e00f      	b.n	800535c <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005340:	b29a      	uxth	r2, r3
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800534a:	b2da      	uxtb	r2, r3
 800534c:	8979      	ldrh	r1, [r7, #10]
 800534e:	2300      	movs	r3, #0
 8005350:	9300      	str	r3, [sp, #0]
 8005352:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005356:	68f8      	ldr	r0, [r7, #12]
 8005358:	f000 fada 	bl	8005910 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005360:	b29b      	uxth	r3, r3
 8005362:	2b00      	cmp	r3, #0
 8005364:	d19e      	bne.n	80052a4 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005366:	697a      	ldr	r2, [r7, #20]
 8005368:	6a39      	ldr	r1, [r7, #32]
 800536a:	68f8      	ldr	r0, [r7, #12]
 800536c:	f000 f9c2 	bl	80056f4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005370:	4603      	mov	r3, r0
 8005372:	2b00      	cmp	r3, #0
 8005374:	d001      	beq.n	800537a <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8005376:	2301      	movs	r3, #1
 8005378:	e01a      	b.n	80053b0 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	2220      	movs	r2, #32
 8005380:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	6859      	ldr	r1, [r3, #4]
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	681a      	ldr	r2, [r3, #0]
 800538c:	4b0b      	ldr	r3, [pc, #44]	; (80053bc <HAL_I2C_Master_Transmit+0x1e4>)
 800538e:	400b      	ands	r3, r1
 8005390:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	2220      	movs	r2, #32
 8005396:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	2200      	movs	r2, #0
 800539e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	2200      	movs	r2, #0
 80053a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80053aa:	2300      	movs	r3, #0
 80053ac:	e000      	b.n	80053b0 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80053ae:	2302      	movs	r3, #2
  }
}
 80053b0:	4618      	mov	r0, r3
 80053b2:	3718      	adds	r7, #24
 80053b4:	46bd      	mov	sp, r7
 80053b6:	bd80      	pop	{r7, pc}
 80053b8:	80002000 	.word	0x80002000
 80053bc:	fe00e800 	.word	0xfe00e800

080053c0 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80053c0:	b580      	push	{r7, lr}
 80053c2:	b088      	sub	sp, #32
 80053c4:	af02      	add	r7, sp, #8
 80053c6:	60f8      	str	r0, [r7, #12]
 80053c8:	607a      	str	r2, [r7, #4]
 80053ca:	461a      	mov	r2, r3
 80053cc:	460b      	mov	r3, r1
 80053ce:	817b      	strh	r3, [r7, #10]
 80053d0:	4613      	mov	r3, r2
 80053d2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80053da:	b2db      	uxtb	r3, r3
 80053dc:	2b20      	cmp	r3, #32
 80053de:	f040 80db 	bne.w	8005598 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80053e8:	2b01      	cmp	r3, #1
 80053ea:	d101      	bne.n	80053f0 <HAL_I2C_Master_Receive+0x30>
 80053ec:	2302      	movs	r3, #2
 80053ee:	e0d4      	b.n	800559a <HAL_I2C_Master_Receive+0x1da>
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	2201      	movs	r2, #1
 80053f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80053f8:	f7fe fad2 	bl	80039a0 <HAL_GetTick>
 80053fc:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80053fe:	697b      	ldr	r3, [r7, #20]
 8005400:	9300      	str	r3, [sp, #0]
 8005402:	2319      	movs	r3, #25
 8005404:	2201      	movs	r2, #1
 8005406:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800540a:	68f8      	ldr	r0, [r7, #12]
 800540c:	f000 f8f2 	bl	80055f4 <I2C_WaitOnFlagUntilTimeout>
 8005410:	4603      	mov	r3, r0
 8005412:	2b00      	cmp	r3, #0
 8005414:	d001      	beq.n	800541a <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8005416:	2301      	movs	r3, #1
 8005418:	e0bf      	b.n	800559a <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	2222      	movs	r2, #34	; 0x22
 800541e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	2210      	movs	r2, #16
 8005426:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	2200      	movs	r2, #0
 800542e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	687a      	ldr	r2, [r7, #4]
 8005434:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	893a      	ldrh	r2, [r7, #8]
 800543a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	2200      	movs	r2, #0
 8005440:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005446:	b29b      	uxth	r3, r3
 8005448:	2bff      	cmp	r3, #255	; 0xff
 800544a:	d90e      	bls.n	800546a <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	22ff      	movs	r2, #255	; 0xff
 8005450:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005456:	b2da      	uxtb	r2, r3
 8005458:	8979      	ldrh	r1, [r7, #10]
 800545a:	4b52      	ldr	r3, [pc, #328]	; (80055a4 <HAL_I2C_Master_Receive+0x1e4>)
 800545c:	9300      	str	r3, [sp, #0]
 800545e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005462:	68f8      	ldr	r0, [r7, #12]
 8005464:	f000 fa54 	bl	8005910 <I2C_TransferConfig>
 8005468:	e06d      	b.n	8005546 <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800546e:	b29a      	uxth	r2, r3
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005478:	b2da      	uxtb	r2, r3
 800547a:	8979      	ldrh	r1, [r7, #10]
 800547c:	4b49      	ldr	r3, [pc, #292]	; (80055a4 <HAL_I2C_Master_Receive+0x1e4>)
 800547e:	9300      	str	r3, [sp, #0]
 8005480:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005484:	68f8      	ldr	r0, [r7, #12]
 8005486:	f000 fa43 	bl	8005910 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 800548a:	e05c      	b.n	8005546 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800548c:	697a      	ldr	r2, [r7, #20]
 800548e:	6a39      	ldr	r1, [r7, #32]
 8005490:	68f8      	ldr	r0, [r7, #12]
 8005492:	f000 f96b 	bl	800576c <I2C_WaitOnRXNEFlagUntilTimeout>
 8005496:	4603      	mov	r3, r0
 8005498:	2b00      	cmp	r3, #0
 800549a:	d001      	beq.n	80054a0 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 800549c:	2301      	movs	r3, #1
 800549e:	e07c      	b.n	800559a <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054aa:	b2d2      	uxtb	r2, r2
 80054ac:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054b2:	1c5a      	adds	r2, r3, #1
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054bc:	3b01      	subs	r3, #1
 80054be:	b29a      	uxth	r2, r3
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054c8:	b29b      	uxth	r3, r3
 80054ca:	3b01      	subs	r3, #1
 80054cc:	b29a      	uxth	r2, r3
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054d6:	b29b      	uxth	r3, r3
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d034      	beq.n	8005546 <HAL_I2C_Master_Receive+0x186>
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d130      	bne.n	8005546 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80054e4:	697b      	ldr	r3, [r7, #20]
 80054e6:	9300      	str	r3, [sp, #0]
 80054e8:	6a3b      	ldr	r3, [r7, #32]
 80054ea:	2200      	movs	r2, #0
 80054ec:	2180      	movs	r1, #128	; 0x80
 80054ee:	68f8      	ldr	r0, [r7, #12]
 80054f0:	f000 f880 	bl	80055f4 <I2C_WaitOnFlagUntilTimeout>
 80054f4:	4603      	mov	r3, r0
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d001      	beq.n	80054fe <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80054fa:	2301      	movs	r3, #1
 80054fc:	e04d      	b.n	800559a <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005502:	b29b      	uxth	r3, r3
 8005504:	2bff      	cmp	r3, #255	; 0xff
 8005506:	d90e      	bls.n	8005526 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	22ff      	movs	r2, #255	; 0xff
 800550c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005512:	b2da      	uxtb	r2, r3
 8005514:	8979      	ldrh	r1, [r7, #10]
 8005516:	2300      	movs	r3, #0
 8005518:	9300      	str	r3, [sp, #0]
 800551a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800551e:	68f8      	ldr	r0, [r7, #12]
 8005520:	f000 f9f6 	bl	8005910 <I2C_TransferConfig>
 8005524:	e00f      	b.n	8005546 <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800552a:	b29a      	uxth	r2, r3
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005534:	b2da      	uxtb	r2, r3
 8005536:	8979      	ldrh	r1, [r7, #10]
 8005538:	2300      	movs	r3, #0
 800553a:	9300      	str	r3, [sp, #0]
 800553c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005540:	68f8      	ldr	r0, [r7, #12]
 8005542:	f000 f9e5 	bl	8005910 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800554a:	b29b      	uxth	r3, r3
 800554c:	2b00      	cmp	r3, #0
 800554e:	d19d      	bne.n	800548c <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005550:	697a      	ldr	r2, [r7, #20]
 8005552:	6a39      	ldr	r1, [r7, #32]
 8005554:	68f8      	ldr	r0, [r7, #12]
 8005556:	f000 f8cd 	bl	80056f4 <I2C_WaitOnSTOPFlagUntilTimeout>
 800555a:	4603      	mov	r3, r0
 800555c:	2b00      	cmp	r3, #0
 800555e:	d001      	beq.n	8005564 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8005560:	2301      	movs	r3, #1
 8005562:	e01a      	b.n	800559a <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	2220      	movs	r2, #32
 800556a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	6859      	ldr	r1, [r3, #4]
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	681a      	ldr	r2, [r3, #0]
 8005576:	4b0c      	ldr	r3, [pc, #48]	; (80055a8 <HAL_I2C_Master_Receive+0x1e8>)
 8005578:	400b      	ands	r3, r1
 800557a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	2220      	movs	r2, #32
 8005580:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	2200      	movs	r2, #0
 8005588:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	2200      	movs	r2, #0
 8005590:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005594:	2300      	movs	r3, #0
 8005596:	e000      	b.n	800559a <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8005598:	2302      	movs	r3, #2
  }
}
 800559a:	4618      	mov	r0, r3
 800559c:	3718      	adds	r7, #24
 800559e:	46bd      	mov	sp, r7
 80055a0:	bd80      	pop	{r7, pc}
 80055a2:	bf00      	nop
 80055a4:	80002400 	.word	0x80002400
 80055a8:	fe00e800 	.word	0xfe00e800

080055ac <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80055ac:	b480      	push	{r7}
 80055ae:	b083      	sub	sp, #12
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	699b      	ldr	r3, [r3, #24]
 80055ba:	f003 0302 	and.w	r3, r3, #2
 80055be:	2b02      	cmp	r3, #2
 80055c0:	d103      	bne.n	80055ca <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	2200      	movs	r2, #0
 80055c8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	699b      	ldr	r3, [r3, #24]
 80055d0:	f003 0301 	and.w	r3, r3, #1
 80055d4:	2b01      	cmp	r3, #1
 80055d6:	d007      	beq.n	80055e8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	699a      	ldr	r2, [r3, #24]
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f042 0201 	orr.w	r2, r2, #1
 80055e6:	619a      	str	r2, [r3, #24]
  }
}
 80055e8:	bf00      	nop
 80055ea:	370c      	adds	r7, #12
 80055ec:	46bd      	mov	sp, r7
 80055ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f2:	4770      	bx	lr

080055f4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80055f4:	b580      	push	{r7, lr}
 80055f6:	b084      	sub	sp, #16
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	60f8      	str	r0, [r7, #12]
 80055fc:	60b9      	str	r1, [r7, #8]
 80055fe:	603b      	str	r3, [r7, #0]
 8005600:	4613      	mov	r3, r2
 8005602:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005604:	e022      	b.n	800564c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005606:	683b      	ldr	r3, [r7, #0]
 8005608:	f1b3 3fff 	cmp.w	r3, #4294967295
 800560c:	d01e      	beq.n	800564c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800560e:	f7fe f9c7 	bl	80039a0 <HAL_GetTick>
 8005612:	4602      	mov	r2, r0
 8005614:	69bb      	ldr	r3, [r7, #24]
 8005616:	1ad3      	subs	r3, r2, r3
 8005618:	683a      	ldr	r2, [r7, #0]
 800561a:	429a      	cmp	r2, r3
 800561c:	d302      	bcc.n	8005624 <I2C_WaitOnFlagUntilTimeout+0x30>
 800561e:	683b      	ldr	r3, [r7, #0]
 8005620:	2b00      	cmp	r3, #0
 8005622:	d113      	bne.n	800564c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005628:	f043 0220 	orr.w	r2, r3, #32
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	2220      	movs	r2, #32
 8005634:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	2200      	movs	r2, #0
 800563c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	2200      	movs	r2, #0
 8005644:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8005648:	2301      	movs	r3, #1
 800564a:	e00f      	b.n	800566c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	699a      	ldr	r2, [r3, #24]
 8005652:	68bb      	ldr	r3, [r7, #8]
 8005654:	4013      	ands	r3, r2
 8005656:	68ba      	ldr	r2, [r7, #8]
 8005658:	429a      	cmp	r2, r3
 800565a:	bf0c      	ite	eq
 800565c:	2301      	moveq	r3, #1
 800565e:	2300      	movne	r3, #0
 8005660:	b2db      	uxtb	r3, r3
 8005662:	461a      	mov	r2, r3
 8005664:	79fb      	ldrb	r3, [r7, #7]
 8005666:	429a      	cmp	r2, r3
 8005668:	d0cd      	beq.n	8005606 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800566a:	2300      	movs	r3, #0
}
 800566c:	4618      	mov	r0, r3
 800566e:	3710      	adds	r7, #16
 8005670:	46bd      	mov	sp, r7
 8005672:	bd80      	pop	{r7, pc}

08005674 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005674:	b580      	push	{r7, lr}
 8005676:	b084      	sub	sp, #16
 8005678:	af00      	add	r7, sp, #0
 800567a:	60f8      	str	r0, [r7, #12]
 800567c:	60b9      	str	r1, [r7, #8]
 800567e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005680:	e02c      	b.n	80056dc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8005682:	687a      	ldr	r2, [r7, #4]
 8005684:	68b9      	ldr	r1, [r7, #8]
 8005686:	68f8      	ldr	r0, [r7, #12]
 8005688:	f000 f8dc 	bl	8005844 <I2C_IsAcknowledgeFailed>
 800568c:	4603      	mov	r3, r0
 800568e:	2b00      	cmp	r3, #0
 8005690:	d001      	beq.n	8005696 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005692:	2301      	movs	r3, #1
 8005694:	e02a      	b.n	80056ec <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005696:	68bb      	ldr	r3, [r7, #8]
 8005698:	f1b3 3fff 	cmp.w	r3, #4294967295
 800569c:	d01e      	beq.n	80056dc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800569e:	f7fe f97f 	bl	80039a0 <HAL_GetTick>
 80056a2:	4602      	mov	r2, r0
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	1ad3      	subs	r3, r2, r3
 80056a8:	68ba      	ldr	r2, [r7, #8]
 80056aa:	429a      	cmp	r2, r3
 80056ac:	d302      	bcc.n	80056b4 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80056ae:	68bb      	ldr	r3, [r7, #8]
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d113      	bne.n	80056dc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056b8:	f043 0220 	orr.w	r2, r3, #32
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	2220      	movs	r2, #32
 80056c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	2200      	movs	r2, #0
 80056cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	2200      	movs	r2, #0
 80056d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80056d8:	2301      	movs	r3, #1
 80056da:	e007      	b.n	80056ec <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	699b      	ldr	r3, [r3, #24]
 80056e2:	f003 0302 	and.w	r3, r3, #2
 80056e6:	2b02      	cmp	r3, #2
 80056e8:	d1cb      	bne.n	8005682 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80056ea:	2300      	movs	r3, #0
}
 80056ec:	4618      	mov	r0, r3
 80056ee:	3710      	adds	r7, #16
 80056f0:	46bd      	mov	sp, r7
 80056f2:	bd80      	pop	{r7, pc}

080056f4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80056f4:	b580      	push	{r7, lr}
 80056f6:	b084      	sub	sp, #16
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	60f8      	str	r0, [r7, #12]
 80056fc:	60b9      	str	r1, [r7, #8]
 80056fe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005700:	e028      	b.n	8005754 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8005702:	687a      	ldr	r2, [r7, #4]
 8005704:	68b9      	ldr	r1, [r7, #8]
 8005706:	68f8      	ldr	r0, [r7, #12]
 8005708:	f000 f89c 	bl	8005844 <I2C_IsAcknowledgeFailed>
 800570c:	4603      	mov	r3, r0
 800570e:	2b00      	cmp	r3, #0
 8005710:	d001      	beq.n	8005716 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005712:	2301      	movs	r3, #1
 8005714:	e026      	b.n	8005764 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005716:	f7fe f943 	bl	80039a0 <HAL_GetTick>
 800571a:	4602      	mov	r2, r0
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	1ad3      	subs	r3, r2, r3
 8005720:	68ba      	ldr	r2, [r7, #8]
 8005722:	429a      	cmp	r2, r3
 8005724:	d302      	bcc.n	800572c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005726:	68bb      	ldr	r3, [r7, #8]
 8005728:	2b00      	cmp	r3, #0
 800572a:	d113      	bne.n	8005754 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005730:	f043 0220 	orr.w	r2, r3, #32
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	2220      	movs	r2, #32
 800573c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	2200      	movs	r2, #0
 8005744:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	2200      	movs	r2, #0
 800574c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8005750:	2301      	movs	r3, #1
 8005752:	e007      	b.n	8005764 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	699b      	ldr	r3, [r3, #24]
 800575a:	f003 0320 	and.w	r3, r3, #32
 800575e:	2b20      	cmp	r3, #32
 8005760:	d1cf      	bne.n	8005702 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005762:	2300      	movs	r3, #0
}
 8005764:	4618      	mov	r0, r3
 8005766:	3710      	adds	r7, #16
 8005768:	46bd      	mov	sp, r7
 800576a:	bd80      	pop	{r7, pc}

0800576c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800576c:	b580      	push	{r7, lr}
 800576e:	b084      	sub	sp, #16
 8005770:	af00      	add	r7, sp, #0
 8005772:	60f8      	str	r0, [r7, #12]
 8005774:	60b9      	str	r1, [r7, #8]
 8005776:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005778:	e055      	b.n	8005826 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800577a:	687a      	ldr	r2, [r7, #4]
 800577c:	68b9      	ldr	r1, [r7, #8]
 800577e:	68f8      	ldr	r0, [r7, #12]
 8005780:	f000 f860 	bl	8005844 <I2C_IsAcknowledgeFailed>
 8005784:	4603      	mov	r3, r0
 8005786:	2b00      	cmp	r3, #0
 8005788:	d001      	beq.n	800578e <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800578a:	2301      	movs	r3, #1
 800578c:	e053      	b.n	8005836 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	699b      	ldr	r3, [r3, #24]
 8005794:	f003 0320 	and.w	r3, r3, #32
 8005798:	2b20      	cmp	r3, #32
 800579a:	d129      	bne.n	80057f0 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	699b      	ldr	r3, [r3, #24]
 80057a2:	f003 0304 	and.w	r3, r3, #4
 80057a6:	2b04      	cmp	r3, #4
 80057a8:	d105      	bne.n	80057b6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d001      	beq.n	80057b6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80057b2:	2300      	movs	r3, #0
 80057b4:	e03f      	b.n	8005836 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	2220      	movs	r2, #32
 80057bc:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	6859      	ldr	r1, [r3, #4]
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	681a      	ldr	r2, [r3, #0]
 80057c8:	4b1d      	ldr	r3, [pc, #116]	; (8005840 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 80057ca:	400b      	ands	r3, r1
 80057cc:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	2200      	movs	r2, #0
 80057d2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	2220      	movs	r2, #32
 80057d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	2200      	movs	r2, #0
 80057e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	2200      	movs	r2, #0
 80057e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80057ec:	2301      	movs	r3, #1
 80057ee:	e022      	b.n	8005836 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80057f0:	f7fe f8d6 	bl	80039a0 <HAL_GetTick>
 80057f4:	4602      	mov	r2, r0
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	1ad3      	subs	r3, r2, r3
 80057fa:	68ba      	ldr	r2, [r7, #8]
 80057fc:	429a      	cmp	r2, r3
 80057fe:	d302      	bcc.n	8005806 <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8005800:	68bb      	ldr	r3, [r7, #8]
 8005802:	2b00      	cmp	r3, #0
 8005804:	d10f      	bne.n	8005826 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800580a:	f043 0220 	orr.w	r2, r3, #32
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	2220      	movs	r2, #32
 8005816:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	2200      	movs	r2, #0
 800581e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8005822:	2301      	movs	r3, #1
 8005824:	e007      	b.n	8005836 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	699b      	ldr	r3, [r3, #24]
 800582c:	f003 0304 	and.w	r3, r3, #4
 8005830:	2b04      	cmp	r3, #4
 8005832:	d1a2      	bne.n	800577a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005834:	2300      	movs	r3, #0
}
 8005836:	4618      	mov	r0, r3
 8005838:	3710      	adds	r7, #16
 800583a:	46bd      	mov	sp, r7
 800583c:	bd80      	pop	{r7, pc}
 800583e:	bf00      	nop
 8005840:	fe00e800 	.word	0xfe00e800

08005844 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005844:	b580      	push	{r7, lr}
 8005846:	b084      	sub	sp, #16
 8005848:	af00      	add	r7, sp, #0
 800584a:	60f8      	str	r0, [r7, #12]
 800584c:	60b9      	str	r1, [r7, #8]
 800584e:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	699b      	ldr	r3, [r3, #24]
 8005856:	f003 0310 	and.w	r3, r3, #16
 800585a:	2b10      	cmp	r3, #16
 800585c:	d151      	bne.n	8005902 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800585e:	e022      	b.n	80058a6 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005860:	68bb      	ldr	r3, [r7, #8]
 8005862:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005866:	d01e      	beq.n	80058a6 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005868:	f7fe f89a 	bl	80039a0 <HAL_GetTick>
 800586c:	4602      	mov	r2, r0
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	1ad3      	subs	r3, r2, r3
 8005872:	68ba      	ldr	r2, [r7, #8]
 8005874:	429a      	cmp	r2, r3
 8005876:	d302      	bcc.n	800587e <I2C_IsAcknowledgeFailed+0x3a>
 8005878:	68bb      	ldr	r3, [r7, #8]
 800587a:	2b00      	cmp	r3, #0
 800587c:	d113      	bne.n	80058a6 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005882:	f043 0220 	orr.w	r2, r3, #32
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	2220      	movs	r2, #32
 800588e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	2200      	movs	r2, #0
 8005896:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	2200      	movs	r2, #0
 800589e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80058a2:	2301      	movs	r3, #1
 80058a4:	e02e      	b.n	8005904 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	699b      	ldr	r3, [r3, #24]
 80058ac:	f003 0320 	and.w	r3, r3, #32
 80058b0:	2b20      	cmp	r3, #32
 80058b2:	d1d5      	bne.n	8005860 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	2210      	movs	r2, #16
 80058ba:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	2220      	movs	r2, #32
 80058c2:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80058c4:	68f8      	ldr	r0, [r7, #12]
 80058c6:	f7ff fe71 	bl	80055ac <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	6859      	ldr	r1, [r3, #4]
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	681a      	ldr	r2, [r3, #0]
 80058d4:	4b0d      	ldr	r3, [pc, #52]	; (800590c <I2C_IsAcknowledgeFailed+0xc8>)
 80058d6:	400b      	ands	r3, r1
 80058d8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058de:	f043 0204 	orr.w	r2, r3, #4
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	2220      	movs	r2, #32
 80058ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	2200      	movs	r2, #0
 80058f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	2200      	movs	r2, #0
 80058fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80058fe:	2301      	movs	r3, #1
 8005900:	e000      	b.n	8005904 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8005902:	2300      	movs	r3, #0
}
 8005904:	4618      	mov	r0, r3
 8005906:	3710      	adds	r7, #16
 8005908:	46bd      	mov	sp, r7
 800590a:	bd80      	pop	{r7, pc}
 800590c:	fe00e800 	.word	0xfe00e800

08005910 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8005910:	b480      	push	{r7}
 8005912:	b085      	sub	sp, #20
 8005914:	af00      	add	r7, sp, #0
 8005916:	60f8      	str	r0, [r7, #12]
 8005918:	607b      	str	r3, [r7, #4]
 800591a:	460b      	mov	r3, r1
 800591c:	817b      	strh	r3, [r7, #10]
 800591e:	4613      	mov	r3, r2
 8005920:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	685a      	ldr	r2, [r3, #4]
 8005928:	69bb      	ldr	r3, [r7, #24]
 800592a:	0d5b      	lsrs	r3, r3, #21
 800592c:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8005930:	4b0d      	ldr	r3, [pc, #52]	; (8005968 <I2C_TransferConfig+0x58>)
 8005932:	430b      	orrs	r3, r1
 8005934:	43db      	mvns	r3, r3
 8005936:	ea02 0103 	and.w	r1, r2, r3
 800593a:	897b      	ldrh	r3, [r7, #10]
 800593c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005940:	7a7b      	ldrb	r3, [r7, #9]
 8005942:	041b      	lsls	r3, r3, #16
 8005944:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005948:	431a      	orrs	r2, r3
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	431a      	orrs	r2, r3
 800594e:	69bb      	ldr	r3, [r7, #24]
 8005950:	431a      	orrs	r2, r3
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	430a      	orrs	r2, r1
 8005958:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800595a:	bf00      	nop
 800595c:	3714      	adds	r7, #20
 800595e:	46bd      	mov	sp, r7
 8005960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005964:	4770      	bx	lr
 8005966:	bf00      	nop
 8005968:	03ff63ff 	.word	0x03ff63ff

0800596c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800596c:	b480      	push	{r7}
 800596e:	b083      	sub	sp, #12
 8005970:	af00      	add	r7, sp, #0
 8005972:	6078      	str	r0, [r7, #4]
 8005974:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800597c:	b2db      	uxtb	r3, r3
 800597e:	2b20      	cmp	r3, #32
 8005980:	d138      	bne.n	80059f4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005988:	2b01      	cmp	r3, #1
 800598a:	d101      	bne.n	8005990 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800598c:	2302      	movs	r3, #2
 800598e:	e032      	b.n	80059f6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2201      	movs	r2, #1
 8005994:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	2224      	movs	r2, #36	; 0x24
 800599c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	681a      	ldr	r2, [r3, #0]
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	f022 0201 	bic.w	r2, r2, #1
 80059ae:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	681a      	ldr	r2, [r3, #0]
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80059be:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	6819      	ldr	r1, [r3, #0]
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	683a      	ldr	r2, [r7, #0]
 80059cc:	430a      	orrs	r2, r1
 80059ce:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	681a      	ldr	r2, [r3, #0]
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	f042 0201 	orr.w	r2, r2, #1
 80059de:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	2220      	movs	r2, #32
 80059e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	2200      	movs	r2, #0
 80059ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80059f0:	2300      	movs	r3, #0
 80059f2:	e000      	b.n	80059f6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80059f4:	2302      	movs	r3, #2
  }
}
 80059f6:	4618      	mov	r0, r3
 80059f8:	370c      	adds	r7, #12
 80059fa:	46bd      	mov	sp, r7
 80059fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a00:	4770      	bx	lr

08005a02 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005a02:	b480      	push	{r7}
 8005a04:	b085      	sub	sp, #20
 8005a06:	af00      	add	r7, sp, #0
 8005a08:	6078      	str	r0, [r7, #4]
 8005a0a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005a12:	b2db      	uxtb	r3, r3
 8005a14:	2b20      	cmp	r3, #32
 8005a16:	d139      	bne.n	8005a8c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005a1e:	2b01      	cmp	r3, #1
 8005a20:	d101      	bne.n	8005a26 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005a22:	2302      	movs	r3, #2
 8005a24:	e033      	b.n	8005a8e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	2201      	movs	r2, #1
 8005a2a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	2224      	movs	r2, #36	; 0x24
 8005a32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	681a      	ldr	r2, [r3, #0]
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	f022 0201 	bic.w	r2, r2, #1
 8005a44:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005a54:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005a56:	683b      	ldr	r3, [r7, #0]
 8005a58:	021b      	lsls	r3, r3, #8
 8005a5a:	68fa      	ldr	r2, [r7, #12]
 8005a5c:	4313      	orrs	r3, r2
 8005a5e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	68fa      	ldr	r2, [r7, #12]
 8005a66:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	681a      	ldr	r2, [r3, #0]
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	f042 0201 	orr.w	r2, r2, #1
 8005a76:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2220      	movs	r2, #32
 8005a7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	2200      	movs	r2, #0
 8005a84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005a88:	2300      	movs	r3, #0
 8005a8a:	e000      	b.n	8005a8e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005a8c:	2302      	movs	r3, #2
  }
}
 8005a8e:	4618      	mov	r0, r3
 8005a90:	3714      	adds	r7, #20
 8005a92:	46bd      	mov	sp, r7
 8005a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a98:	4770      	bx	lr
	...

08005a9c <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8005a9c:	b480      	push	{r7}
 8005a9e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005aa0:	4b05      	ldr	r3, [pc, #20]	; (8005ab8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	4a04      	ldr	r2, [pc, #16]	; (8005ab8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005aa6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005aaa:	6013      	str	r3, [r2, #0]
}
 8005aac:	bf00      	nop
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab4:	4770      	bx	lr
 8005ab6:	bf00      	nop
 8005ab8:	40007000 	.word	0x40007000

08005abc <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8005abc:	b580      	push	{r7, lr}
 8005abe:	b082      	sub	sp, #8
 8005ac0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8005ac2:	2300      	movs	r3, #0
 8005ac4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8005ac6:	4b23      	ldr	r3, [pc, #140]	; (8005b54 <HAL_PWREx_EnableOverDrive+0x98>)
 8005ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aca:	4a22      	ldr	r2, [pc, #136]	; (8005b54 <HAL_PWREx_EnableOverDrive+0x98>)
 8005acc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ad0:	6413      	str	r3, [r2, #64]	; 0x40
 8005ad2:	4b20      	ldr	r3, [pc, #128]	; (8005b54 <HAL_PWREx_EnableOverDrive+0x98>)
 8005ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ad6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ada:	603b      	str	r3, [r7, #0]
 8005adc:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8005ade:	4b1e      	ldr	r3, [pc, #120]	; (8005b58 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	4a1d      	ldr	r2, [pc, #116]	; (8005b58 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005ae4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ae8:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005aea:	f7fd ff59 	bl	80039a0 <HAL_GetTick>
 8005aee:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005af0:	e009      	b.n	8005b06 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005af2:	f7fd ff55 	bl	80039a0 <HAL_GetTick>
 8005af6:	4602      	mov	r2, r0
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	1ad3      	subs	r3, r2, r3
 8005afc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005b00:	d901      	bls.n	8005b06 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8005b02:	2303      	movs	r3, #3
 8005b04:	e022      	b.n	8005b4c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005b06:	4b14      	ldr	r3, [pc, #80]	; (8005b58 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005b08:	685b      	ldr	r3, [r3, #4]
 8005b0a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005b0e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b12:	d1ee      	bne.n	8005af2 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8005b14:	4b10      	ldr	r3, [pc, #64]	; (8005b58 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	4a0f      	ldr	r2, [pc, #60]	; (8005b58 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005b1a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005b1e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005b20:	f7fd ff3e 	bl	80039a0 <HAL_GetTick>
 8005b24:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005b26:	e009      	b.n	8005b3c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005b28:	f7fd ff3a 	bl	80039a0 <HAL_GetTick>
 8005b2c:	4602      	mov	r2, r0
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	1ad3      	subs	r3, r2, r3
 8005b32:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005b36:	d901      	bls.n	8005b3c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8005b38:	2303      	movs	r3, #3
 8005b3a:	e007      	b.n	8005b4c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005b3c:	4b06      	ldr	r3, [pc, #24]	; (8005b58 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005b3e:	685b      	ldr	r3, [r3, #4]
 8005b40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b44:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005b48:	d1ee      	bne.n	8005b28 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8005b4a:	2300      	movs	r3, #0
}
 8005b4c:	4618      	mov	r0, r3
 8005b4e:	3708      	adds	r7, #8
 8005b50:	46bd      	mov	sp, r7
 8005b52:	bd80      	pop	{r7, pc}
 8005b54:	40023800 	.word	0x40023800
 8005b58:	40007000 	.word	0x40007000

08005b5c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005b5c:	b580      	push	{r7, lr}
 8005b5e:	b086      	sub	sp, #24
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8005b64:	2300      	movs	r3, #0
 8005b66:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d101      	bne.n	8005b72 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8005b6e:	2301      	movs	r3, #1
 8005b70:	e291      	b.n	8006096 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	f003 0301 	and.w	r3, r3, #1
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	f000 8087 	beq.w	8005c8e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005b80:	4b96      	ldr	r3, [pc, #600]	; (8005ddc <HAL_RCC_OscConfig+0x280>)
 8005b82:	689b      	ldr	r3, [r3, #8]
 8005b84:	f003 030c 	and.w	r3, r3, #12
 8005b88:	2b04      	cmp	r3, #4
 8005b8a:	d00c      	beq.n	8005ba6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005b8c:	4b93      	ldr	r3, [pc, #588]	; (8005ddc <HAL_RCC_OscConfig+0x280>)
 8005b8e:	689b      	ldr	r3, [r3, #8]
 8005b90:	f003 030c 	and.w	r3, r3, #12
 8005b94:	2b08      	cmp	r3, #8
 8005b96:	d112      	bne.n	8005bbe <HAL_RCC_OscConfig+0x62>
 8005b98:	4b90      	ldr	r3, [pc, #576]	; (8005ddc <HAL_RCC_OscConfig+0x280>)
 8005b9a:	685b      	ldr	r3, [r3, #4]
 8005b9c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005ba0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005ba4:	d10b      	bne.n	8005bbe <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005ba6:	4b8d      	ldr	r3, [pc, #564]	; (8005ddc <HAL_RCC_OscConfig+0x280>)
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d06c      	beq.n	8005c8c <HAL_RCC_OscConfig+0x130>
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	685b      	ldr	r3, [r3, #4]
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d168      	bne.n	8005c8c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8005bba:	2301      	movs	r3, #1
 8005bbc:	e26b      	b.n	8006096 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	685b      	ldr	r3, [r3, #4]
 8005bc2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005bc6:	d106      	bne.n	8005bd6 <HAL_RCC_OscConfig+0x7a>
 8005bc8:	4b84      	ldr	r3, [pc, #528]	; (8005ddc <HAL_RCC_OscConfig+0x280>)
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	4a83      	ldr	r2, [pc, #524]	; (8005ddc <HAL_RCC_OscConfig+0x280>)
 8005bce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005bd2:	6013      	str	r3, [r2, #0]
 8005bd4:	e02e      	b.n	8005c34 <HAL_RCC_OscConfig+0xd8>
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	685b      	ldr	r3, [r3, #4]
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d10c      	bne.n	8005bf8 <HAL_RCC_OscConfig+0x9c>
 8005bde:	4b7f      	ldr	r3, [pc, #508]	; (8005ddc <HAL_RCC_OscConfig+0x280>)
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	4a7e      	ldr	r2, [pc, #504]	; (8005ddc <HAL_RCC_OscConfig+0x280>)
 8005be4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005be8:	6013      	str	r3, [r2, #0]
 8005bea:	4b7c      	ldr	r3, [pc, #496]	; (8005ddc <HAL_RCC_OscConfig+0x280>)
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	4a7b      	ldr	r2, [pc, #492]	; (8005ddc <HAL_RCC_OscConfig+0x280>)
 8005bf0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005bf4:	6013      	str	r3, [r2, #0]
 8005bf6:	e01d      	b.n	8005c34 <HAL_RCC_OscConfig+0xd8>
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	685b      	ldr	r3, [r3, #4]
 8005bfc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005c00:	d10c      	bne.n	8005c1c <HAL_RCC_OscConfig+0xc0>
 8005c02:	4b76      	ldr	r3, [pc, #472]	; (8005ddc <HAL_RCC_OscConfig+0x280>)
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	4a75      	ldr	r2, [pc, #468]	; (8005ddc <HAL_RCC_OscConfig+0x280>)
 8005c08:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005c0c:	6013      	str	r3, [r2, #0]
 8005c0e:	4b73      	ldr	r3, [pc, #460]	; (8005ddc <HAL_RCC_OscConfig+0x280>)
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	4a72      	ldr	r2, [pc, #456]	; (8005ddc <HAL_RCC_OscConfig+0x280>)
 8005c14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c18:	6013      	str	r3, [r2, #0]
 8005c1a:	e00b      	b.n	8005c34 <HAL_RCC_OscConfig+0xd8>
 8005c1c:	4b6f      	ldr	r3, [pc, #444]	; (8005ddc <HAL_RCC_OscConfig+0x280>)
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	4a6e      	ldr	r2, [pc, #440]	; (8005ddc <HAL_RCC_OscConfig+0x280>)
 8005c22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005c26:	6013      	str	r3, [r2, #0]
 8005c28:	4b6c      	ldr	r3, [pc, #432]	; (8005ddc <HAL_RCC_OscConfig+0x280>)
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	4a6b      	ldr	r2, [pc, #428]	; (8005ddc <HAL_RCC_OscConfig+0x280>)
 8005c2e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005c32:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	685b      	ldr	r3, [r3, #4]
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d013      	beq.n	8005c64 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c3c:	f7fd feb0 	bl	80039a0 <HAL_GetTick>
 8005c40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005c42:	e008      	b.n	8005c56 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005c44:	f7fd feac 	bl	80039a0 <HAL_GetTick>
 8005c48:	4602      	mov	r2, r0
 8005c4a:	693b      	ldr	r3, [r7, #16]
 8005c4c:	1ad3      	subs	r3, r2, r3
 8005c4e:	2b64      	cmp	r3, #100	; 0x64
 8005c50:	d901      	bls.n	8005c56 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005c52:	2303      	movs	r3, #3
 8005c54:	e21f      	b.n	8006096 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005c56:	4b61      	ldr	r3, [pc, #388]	; (8005ddc <HAL_RCC_OscConfig+0x280>)
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d0f0      	beq.n	8005c44 <HAL_RCC_OscConfig+0xe8>
 8005c62:	e014      	b.n	8005c8e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c64:	f7fd fe9c 	bl	80039a0 <HAL_GetTick>
 8005c68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005c6a:	e008      	b.n	8005c7e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005c6c:	f7fd fe98 	bl	80039a0 <HAL_GetTick>
 8005c70:	4602      	mov	r2, r0
 8005c72:	693b      	ldr	r3, [r7, #16]
 8005c74:	1ad3      	subs	r3, r2, r3
 8005c76:	2b64      	cmp	r3, #100	; 0x64
 8005c78:	d901      	bls.n	8005c7e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8005c7a:	2303      	movs	r3, #3
 8005c7c:	e20b      	b.n	8006096 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005c7e:	4b57      	ldr	r3, [pc, #348]	; (8005ddc <HAL_RCC_OscConfig+0x280>)
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d1f0      	bne.n	8005c6c <HAL_RCC_OscConfig+0x110>
 8005c8a:	e000      	b.n	8005c8e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005c8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	f003 0302 	and.w	r3, r3, #2
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d069      	beq.n	8005d6e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005c9a:	4b50      	ldr	r3, [pc, #320]	; (8005ddc <HAL_RCC_OscConfig+0x280>)
 8005c9c:	689b      	ldr	r3, [r3, #8]
 8005c9e:	f003 030c 	and.w	r3, r3, #12
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d00b      	beq.n	8005cbe <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005ca6:	4b4d      	ldr	r3, [pc, #308]	; (8005ddc <HAL_RCC_OscConfig+0x280>)
 8005ca8:	689b      	ldr	r3, [r3, #8]
 8005caa:	f003 030c 	and.w	r3, r3, #12
 8005cae:	2b08      	cmp	r3, #8
 8005cb0:	d11c      	bne.n	8005cec <HAL_RCC_OscConfig+0x190>
 8005cb2:	4b4a      	ldr	r3, [pc, #296]	; (8005ddc <HAL_RCC_OscConfig+0x280>)
 8005cb4:	685b      	ldr	r3, [r3, #4]
 8005cb6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d116      	bne.n	8005cec <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005cbe:	4b47      	ldr	r3, [pc, #284]	; (8005ddc <HAL_RCC_OscConfig+0x280>)
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	f003 0302 	and.w	r3, r3, #2
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d005      	beq.n	8005cd6 <HAL_RCC_OscConfig+0x17a>
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	68db      	ldr	r3, [r3, #12]
 8005cce:	2b01      	cmp	r3, #1
 8005cd0:	d001      	beq.n	8005cd6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8005cd2:	2301      	movs	r3, #1
 8005cd4:	e1df      	b.n	8006096 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005cd6:	4b41      	ldr	r3, [pc, #260]	; (8005ddc <HAL_RCC_OscConfig+0x280>)
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	691b      	ldr	r3, [r3, #16]
 8005ce2:	00db      	lsls	r3, r3, #3
 8005ce4:	493d      	ldr	r1, [pc, #244]	; (8005ddc <HAL_RCC_OscConfig+0x280>)
 8005ce6:	4313      	orrs	r3, r2
 8005ce8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005cea:	e040      	b.n	8005d6e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	68db      	ldr	r3, [r3, #12]
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d023      	beq.n	8005d3c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005cf4:	4b39      	ldr	r3, [pc, #228]	; (8005ddc <HAL_RCC_OscConfig+0x280>)
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	4a38      	ldr	r2, [pc, #224]	; (8005ddc <HAL_RCC_OscConfig+0x280>)
 8005cfa:	f043 0301 	orr.w	r3, r3, #1
 8005cfe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d00:	f7fd fe4e 	bl	80039a0 <HAL_GetTick>
 8005d04:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005d06:	e008      	b.n	8005d1a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005d08:	f7fd fe4a 	bl	80039a0 <HAL_GetTick>
 8005d0c:	4602      	mov	r2, r0
 8005d0e:	693b      	ldr	r3, [r7, #16]
 8005d10:	1ad3      	subs	r3, r2, r3
 8005d12:	2b02      	cmp	r3, #2
 8005d14:	d901      	bls.n	8005d1a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8005d16:	2303      	movs	r3, #3
 8005d18:	e1bd      	b.n	8006096 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005d1a:	4b30      	ldr	r3, [pc, #192]	; (8005ddc <HAL_RCC_OscConfig+0x280>)
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	f003 0302 	and.w	r3, r3, #2
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d0f0      	beq.n	8005d08 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005d26:	4b2d      	ldr	r3, [pc, #180]	; (8005ddc <HAL_RCC_OscConfig+0x280>)
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	691b      	ldr	r3, [r3, #16]
 8005d32:	00db      	lsls	r3, r3, #3
 8005d34:	4929      	ldr	r1, [pc, #164]	; (8005ddc <HAL_RCC_OscConfig+0x280>)
 8005d36:	4313      	orrs	r3, r2
 8005d38:	600b      	str	r3, [r1, #0]
 8005d3a:	e018      	b.n	8005d6e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005d3c:	4b27      	ldr	r3, [pc, #156]	; (8005ddc <HAL_RCC_OscConfig+0x280>)
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	4a26      	ldr	r2, [pc, #152]	; (8005ddc <HAL_RCC_OscConfig+0x280>)
 8005d42:	f023 0301 	bic.w	r3, r3, #1
 8005d46:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d48:	f7fd fe2a 	bl	80039a0 <HAL_GetTick>
 8005d4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005d4e:	e008      	b.n	8005d62 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005d50:	f7fd fe26 	bl	80039a0 <HAL_GetTick>
 8005d54:	4602      	mov	r2, r0
 8005d56:	693b      	ldr	r3, [r7, #16]
 8005d58:	1ad3      	subs	r3, r2, r3
 8005d5a:	2b02      	cmp	r3, #2
 8005d5c:	d901      	bls.n	8005d62 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8005d5e:	2303      	movs	r3, #3
 8005d60:	e199      	b.n	8006096 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005d62:	4b1e      	ldr	r3, [pc, #120]	; (8005ddc <HAL_RCC_OscConfig+0x280>)
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	f003 0302 	and.w	r3, r3, #2
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d1f0      	bne.n	8005d50 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	f003 0308 	and.w	r3, r3, #8
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d038      	beq.n	8005dec <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	695b      	ldr	r3, [r3, #20]
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d019      	beq.n	8005db6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005d82:	4b16      	ldr	r3, [pc, #88]	; (8005ddc <HAL_RCC_OscConfig+0x280>)
 8005d84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005d86:	4a15      	ldr	r2, [pc, #84]	; (8005ddc <HAL_RCC_OscConfig+0x280>)
 8005d88:	f043 0301 	orr.w	r3, r3, #1
 8005d8c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d8e:	f7fd fe07 	bl	80039a0 <HAL_GetTick>
 8005d92:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005d94:	e008      	b.n	8005da8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005d96:	f7fd fe03 	bl	80039a0 <HAL_GetTick>
 8005d9a:	4602      	mov	r2, r0
 8005d9c:	693b      	ldr	r3, [r7, #16]
 8005d9e:	1ad3      	subs	r3, r2, r3
 8005da0:	2b02      	cmp	r3, #2
 8005da2:	d901      	bls.n	8005da8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005da4:	2303      	movs	r3, #3
 8005da6:	e176      	b.n	8006096 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005da8:	4b0c      	ldr	r3, [pc, #48]	; (8005ddc <HAL_RCC_OscConfig+0x280>)
 8005daa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005dac:	f003 0302 	and.w	r3, r3, #2
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d0f0      	beq.n	8005d96 <HAL_RCC_OscConfig+0x23a>
 8005db4:	e01a      	b.n	8005dec <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005db6:	4b09      	ldr	r3, [pc, #36]	; (8005ddc <HAL_RCC_OscConfig+0x280>)
 8005db8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005dba:	4a08      	ldr	r2, [pc, #32]	; (8005ddc <HAL_RCC_OscConfig+0x280>)
 8005dbc:	f023 0301 	bic.w	r3, r3, #1
 8005dc0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005dc2:	f7fd fded 	bl	80039a0 <HAL_GetTick>
 8005dc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005dc8:	e00a      	b.n	8005de0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005dca:	f7fd fde9 	bl	80039a0 <HAL_GetTick>
 8005dce:	4602      	mov	r2, r0
 8005dd0:	693b      	ldr	r3, [r7, #16]
 8005dd2:	1ad3      	subs	r3, r2, r3
 8005dd4:	2b02      	cmp	r3, #2
 8005dd6:	d903      	bls.n	8005de0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8005dd8:	2303      	movs	r3, #3
 8005dda:	e15c      	b.n	8006096 <HAL_RCC_OscConfig+0x53a>
 8005ddc:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005de0:	4b91      	ldr	r3, [pc, #580]	; (8006028 <HAL_RCC_OscConfig+0x4cc>)
 8005de2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005de4:	f003 0302 	and.w	r3, r3, #2
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d1ee      	bne.n	8005dca <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	f003 0304 	and.w	r3, r3, #4
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	f000 80a4 	beq.w	8005f42 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005dfa:	4b8b      	ldr	r3, [pc, #556]	; (8006028 <HAL_RCC_OscConfig+0x4cc>)
 8005dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d10d      	bne.n	8005e22 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8005e06:	4b88      	ldr	r3, [pc, #544]	; (8006028 <HAL_RCC_OscConfig+0x4cc>)
 8005e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e0a:	4a87      	ldr	r2, [pc, #540]	; (8006028 <HAL_RCC_OscConfig+0x4cc>)
 8005e0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e10:	6413      	str	r3, [r2, #64]	; 0x40
 8005e12:	4b85      	ldr	r3, [pc, #532]	; (8006028 <HAL_RCC_OscConfig+0x4cc>)
 8005e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e1a:	60bb      	str	r3, [r7, #8]
 8005e1c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005e1e:	2301      	movs	r3, #1
 8005e20:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005e22:	4b82      	ldr	r3, [pc, #520]	; (800602c <HAL_RCC_OscConfig+0x4d0>)
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d118      	bne.n	8005e60 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8005e2e:	4b7f      	ldr	r3, [pc, #508]	; (800602c <HAL_RCC_OscConfig+0x4d0>)
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	4a7e      	ldr	r2, [pc, #504]	; (800602c <HAL_RCC_OscConfig+0x4d0>)
 8005e34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e38:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005e3a:	f7fd fdb1 	bl	80039a0 <HAL_GetTick>
 8005e3e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005e40:	e008      	b.n	8005e54 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005e42:	f7fd fdad 	bl	80039a0 <HAL_GetTick>
 8005e46:	4602      	mov	r2, r0
 8005e48:	693b      	ldr	r3, [r7, #16]
 8005e4a:	1ad3      	subs	r3, r2, r3
 8005e4c:	2b64      	cmp	r3, #100	; 0x64
 8005e4e:	d901      	bls.n	8005e54 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8005e50:	2303      	movs	r3, #3
 8005e52:	e120      	b.n	8006096 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005e54:	4b75      	ldr	r3, [pc, #468]	; (800602c <HAL_RCC_OscConfig+0x4d0>)
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d0f0      	beq.n	8005e42 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	689b      	ldr	r3, [r3, #8]
 8005e64:	2b01      	cmp	r3, #1
 8005e66:	d106      	bne.n	8005e76 <HAL_RCC_OscConfig+0x31a>
 8005e68:	4b6f      	ldr	r3, [pc, #444]	; (8006028 <HAL_RCC_OscConfig+0x4cc>)
 8005e6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e6c:	4a6e      	ldr	r2, [pc, #440]	; (8006028 <HAL_RCC_OscConfig+0x4cc>)
 8005e6e:	f043 0301 	orr.w	r3, r3, #1
 8005e72:	6713      	str	r3, [r2, #112]	; 0x70
 8005e74:	e02d      	b.n	8005ed2 <HAL_RCC_OscConfig+0x376>
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	689b      	ldr	r3, [r3, #8]
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d10c      	bne.n	8005e98 <HAL_RCC_OscConfig+0x33c>
 8005e7e:	4b6a      	ldr	r3, [pc, #424]	; (8006028 <HAL_RCC_OscConfig+0x4cc>)
 8005e80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e82:	4a69      	ldr	r2, [pc, #420]	; (8006028 <HAL_RCC_OscConfig+0x4cc>)
 8005e84:	f023 0301 	bic.w	r3, r3, #1
 8005e88:	6713      	str	r3, [r2, #112]	; 0x70
 8005e8a:	4b67      	ldr	r3, [pc, #412]	; (8006028 <HAL_RCC_OscConfig+0x4cc>)
 8005e8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e8e:	4a66      	ldr	r2, [pc, #408]	; (8006028 <HAL_RCC_OscConfig+0x4cc>)
 8005e90:	f023 0304 	bic.w	r3, r3, #4
 8005e94:	6713      	str	r3, [r2, #112]	; 0x70
 8005e96:	e01c      	b.n	8005ed2 <HAL_RCC_OscConfig+0x376>
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	689b      	ldr	r3, [r3, #8]
 8005e9c:	2b05      	cmp	r3, #5
 8005e9e:	d10c      	bne.n	8005eba <HAL_RCC_OscConfig+0x35e>
 8005ea0:	4b61      	ldr	r3, [pc, #388]	; (8006028 <HAL_RCC_OscConfig+0x4cc>)
 8005ea2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ea4:	4a60      	ldr	r2, [pc, #384]	; (8006028 <HAL_RCC_OscConfig+0x4cc>)
 8005ea6:	f043 0304 	orr.w	r3, r3, #4
 8005eaa:	6713      	str	r3, [r2, #112]	; 0x70
 8005eac:	4b5e      	ldr	r3, [pc, #376]	; (8006028 <HAL_RCC_OscConfig+0x4cc>)
 8005eae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005eb0:	4a5d      	ldr	r2, [pc, #372]	; (8006028 <HAL_RCC_OscConfig+0x4cc>)
 8005eb2:	f043 0301 	orr.w	r3, r3, #1
 8005eb6:	6713      	str	r3, [r2, #112]	; 0x70
 8005eb8:	e00b      	b.n	8005ed2 <HAL_RCC_OscConfig+0x376>
 8005eba:	4b5b      	ldr	r3, [pc, #364]	; (8006028 <HAL_RCC_OscConfig+0x4cc>)
 8005ebc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ebe:	4a5a      	ldr	r2, [pc, #360]	; (8006028 <HAL_RCC_OscConfig+0x4cc>)
 8005ec0:	f023 0301 	bic.w	r3, r3, #1
 8005ec4:	6713      	str	r3, [r2, #112]	; 0x70
 8005ec6:	4b58      	ldr	r3, [pc, #352]	; (8006028 <HAL_RCC_OscConfig+0x4cc>)
 8005ec8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005eca:	4a57      	ldr	r2, [pc, #348]	; (8006028 <HAL_RCC_OscConfig+0x4cc>)
 8005ecc:	f023 0304 	bic.w	r3, r3, #4
 8005ed0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	689b      	ldr	r3, [r3, #8]
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d015      	beq.n	8005f06 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005eda:	f7fd fd61 	bl	80039a0 <HAL_GetTick>
 8005ede:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005ee0:	e00a      	b.n	8005ef8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005ee2:	f7fd fd5d 	bl	80039a0 <HAL_GetTick>
 8005ee6:	4602      	mov	r2, r0
 8005ee8:	693b      	ldr	r3, [r7, #16]
 8005eea:	1ad3      	subs	r3, r2, r3
 8005eec:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ef0:	4293      	cmp	r3, r2
 8005ef2:	d901      	bls.n	8005ef8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8005ef4:	2303      	movs	r3, #3
 8005ef6:	e0ce      	b.n	8006096 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005ef8:	4b4b      	ldr	r3, [pc, #300]	; (8006028 <HAL_RCC_OscConfig+0x4cc>)
 8005efa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005efc:	f003 0302 	and.w	r3, r3, #2
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d0ee      	beq.n	8005ee2 <HAL_RCC_OscConfig+0x386>
 8005f04:	e014      	b.n	8005f30 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f06:	f7fd fd4b 	bl	80039a0 <HAL_GetTick>
 8005f0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005f0c:	e00a      	b.n	8005f24 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005f0e:	f7fd fd47 	bl	80039a0 <HAL_GetTick>
 8005f12:	4602      	mov	r2, r0
 8005f14:	693b      	ldr	r3, [r7, #16]
 8005f16:	1ad3      	subs	r3, r2, r3
 8005f18:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f1c:	4293      	cmp	r3, r2
 8005f1e:	d901      	bls.n	8005f24 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8005f20:	2303      	movs	r3, #3
 8005f22:	e0b8      	b.n	8006096 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005f24:	4b40      	ldr	r3, [pc, #256]	; (8006028 <HAL_RCC_OscConfig+0x4cc>)
 8005f26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f28:	f003 0302 	and.w	r3, r3, #2
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d1ee      	bne.n	8005f0e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005f30:	7dfb      	ldrb	r3, [r7, #23]
 8005f32:	2b01      	cmp	r3, #1
 8005f34:	d105      	bne.n	8005f42 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005f36:	4b3c      	ldr	r3, [pc, #240]	; (8006028 <HAL_RCC_OscConfig+0x4cc>)
 8005f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f3a:	4a3b      	ldr	r2, [pc, #236]	; (8006028 <HAL_RCC_OscConfig+0x4cc>)
 8005f3c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005f40:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	699b      	ldr	r3, [r3, #24]
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	f000 80a4 	beq.w	8006094 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005f4c:	4b36      	ldr	r3, [pc, #216]	; (8006028 <HAL_RCC_OscConfig+0x4cc>)
 8005f4e:	689b      	ldr	r3, [r3, #8]
 8005f50:	f003 030c 	and.w	r3, r3, #12
 8005f54:	2b08      	cmp	r3, #8
 8005f56:	d06b      	beq.n	8006030 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	699b      	ldr	r3, [r3, #24]
 8005f5c:	2b02      	cmp	r3, #2
 8005f5e:	d149      	bne.n	8005ff4 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005f60:	4b31      	ldr	r3, [pc, #196]	; (8006028 <HAL_RCC_OscConfig+0x4cc>)
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	4a30      	ldr	r2, [pc, #192]	; (8006028 <HAL_RCC_OscConfig+0x4cc>)
 8005f66:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005f6a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f6c:	f7fd fd18 	bl	80039a0 <HAL_GetTick>
 8005f70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005f72:	e008      	b.n	8005f86 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005f74:	f7fd fd14 	bl	80039a0 <HAL_GetTick>
 8005f78:	4602      	mov	r2, r0
 8005f7a:	693b      	ldr	r3, [r7, #16]
 8005f7c:	1ad3      	subs	r3, r2, r3
 8005f7e:	2b02      	cmp	r3, #2
 8005f80:	d901      	bls.n	8005f86 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8005f82:	2303      	movs	r3, #3
 8005f84:	e087      	b.n	8006096 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005f86:	4b28      	ldr	r3, [pc, #160]	; (8006028 <HAL_RCC_OscConfig+0x4cc>)
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d1f0      	bne.n	8005f74 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	69da      	ldr	r2, [r3, #28]
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	6a1b      	ldr	r3, [r3, #32]
 8005f9a:	431a      	orrs	r2, r3
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fa0:	019b      	lsls	r3, r3, #6
 8005fa2:	431a      	orrs	r2, r3
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fa8:	085b      	lsrs	r3, r3, #1
 8005faa:	3b01      	subs	r3, #1
 8005fac:	041b      	lsls	r3, r3, #16
 8005fae:	431a      	orrs	r2, r3
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fb4:	061b      	lsls	r3, r3, #24
 8005fb6:	4313      	orrs	r3, r2
 8005fb8:	4a1b      	ldr	r2, [pc, #108]	; (8006028 <HAL_RCC_OscConfig+0x4cc>)
 8005fba:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005fbe:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005fc0:	4b19      	ldr	r3, [pc, #100]	; (8006028 <HAL_RCC_OscConfig+0x4cc>)
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	4a18      	ldr	r2, [pc, #96]	; (8006028 <HAL_RCC_OscConfig+0x4cc>)
 8005fc6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005fca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fcc:	f7fd fce8 	bl	80039a0 <HAL_GetTick>
 8005fd0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005fd2:	e008      	b.n	8005fe6 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005fd4:	f7fd fce4 	bl	80039a0 <HAL_GetTick>
 8005fd8:	4602      	mov	r2, r0
 8005fda:	693b      	ldr	r3, [r7, #16]
 8005fdc:	1ad3      	subs	r3, r2, r3
 8005fde:	2b02      	cmp	r3, #2
 8005fe0:	d901      	bls.n	8005fe6 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8005fe2:	2303      	movs	r3, #3
 8005fe4:	e057      	b.n	8006096 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005fe6:	4b10      	ldr	r3, [pc, #64]	; (8006028 <HAL_RCC_OscConfig+0x4cc>)
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d0f0      	beq.n	8005fd4 <HAL_RCC_OscConfig+0x478>
 8005ff2:	e04f      	b.n	8006094 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005ff4:	4b0c      	ldr	r3, [pc, #48]	; (8006028 <HAL_RCC_OscConfig+0x4cc>)
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	4a0b      	ldr	r2, [pc, #44]	; (8006028 <HAL_RCC_OscConfig+0x4cc>)
 8005ffa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005ffe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006000:	f7fd fcce 	bl	80039a0 <HAL_GetTick>
 8006004:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006006:	e008      	b.n	800601a <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006008:	f7fd fcca 	bl	80039a0 <HAL_GetTick>
 800600c:	4602      	mov	r2, r0
 800600e:	693b      	ldr	r3, [r7, #16]
 8006010:	1ad3      	subs	r3, r2, r3
 8006012:	2b02      	cmp	r3, #2
 8006014:	d901      	bls.n	800601a <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8006016:	2303      	movs	r3, #3
 8006018:	e03d      	b.n	8006096 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800601a:	4b03      	ldr	r3, [pc, #12]	; (8006028 <HAL_RCC_OscConfig+0x4cc>)
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006022:	2b00      	cmp	r3, #0
 8006024:	d1f0      	bne.n	8006008 <HAL_RCC_OscConfig+0x4ac>
 8006026:	e035      	b.n	8006094 <HAL_RCC_OscConfig+0x538>
 8006028:	40023800 	.word	0x40023800
 800602c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8006030:	4b1b      	ldr	r3, [pc, #108]	; (80060a0 <HAL_RCC_OscConfig+0x544>)
 8006032:	685b      	ldr	r3, [r3, #4]
 8006034:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	699b      	ldr	r3, [r3, #24]
 800603a:	2b01      	cmp	r3, #1
 800603c:	d028      	beq.n	8006090 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006048:	429a      	cmp	r2, r3
 800604a:	d121      	bne.n	8006090 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006056:	429a      	cmp	r2, r3
 8006058:	d11a      	bne.n	8006090 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800605a:	68fa      	ldr	r2, [r7, #12]
 800605c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006060:	4013      	ands	r3, r2
 8006062:	687a      	ldr	r2, [r7, #4]
 8006064:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006066:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006068:	4293      	cmp	r3, r2
 800606a:	d111      	bne.n	8006090 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006076:	085b      	lsrs	r3, r3, #1
 8006078:	3b01      	subs	r3, #1
 800607a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800607c:	429a      	cmp	r2, r3
 800607e:	d107      	bne.n	8006090 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800608a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800608c:	429a      	cmp	r2, r3
 800608e:	d001      	beq.n	8006094 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8006090:	2301      	movs	r3, #1
 8006092:	e000      	b.n	8006096 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8006094:	2300      	movs	r3, #0
}
 8006096:	4618      	mov	r0, r3
 8006098:	3718      	adds	r7, #24
 800609a:	46bd      	mov	sp, r7
 800609c:	bd80      	pop	{r7, pc}
 800609e:	bf00      	nop
 80060a0:	40023800 	.word	0x40023800

080060a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80060a4:	b580      	push	{r7, lr}
 80060a6:	b084      	sub	sp, #16
 80060a8:	af00      	add	r7, sp, #0
 80060aa:	6078      	str	r0, [r7, #4]
 80060ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80060ae:	2300      	movs	r3, #0
 80060b0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d101      	bne.n	80060bc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80060b8:	2301      	movs	r3, #1
 80060ba:	e0d0      	b.n	800625e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80060bc:	4b6a      	ldr	r3, [pc, #424]	; (8006268 <HAL_RCC_ClockConfig+0x1c4>)
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	f003 030f 	and.w	r3, r3, #15
 80060c4:	683a      	ldr	r2, [r7, #0]
 80060c6:	429a      	cmp	r2, r3
 80060c8:	d910      	bls.n	80060ec <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80060ca:	4b67      	ldr	r3, [pc, #412]	; (8006268 <HAL_RCC_ClockConfig+0x1c4>)
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	f023 020f 	bic.w	r2, r3, #15
 80060d2:	4965      	ldr	r1, [pc, #404]	; (8006268 <HAL_RCC_ClockConfig+0x1c4>)
 80060d4:	683b      	ldr	r3, [r7, #0]
 80060d6:	4313      	orrs	r3, r2
 80060d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80060da:	4b63      	ldr	r3, [pc, #396]	; (8006268 <HAL_RCC_ClockConfig+0x1c4>)
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	f003 030f 	and.w	r3, r3, #15
 80060e2:	683a      	ldr	r2, [r7, #0]
 80060e4:	429a      	cmp	r2, r3
 80060e6:	d001      	beq.n	80060ec <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80060e8:	2301      	movs	r3, #1
 80060ea:	e0b8      	b.n	800625e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	f003 0302 	and.w	r3, r3, #2
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d020      	beq.n	800613a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	f003 0304 	and.w	r3, r3, #4
 8006100:	2b00      	cmp	r3, #0
 8006102:	d005      	beq.n	8006110 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006104:	4b59      	ldr	r3, [pc, #356]	; (800626c <HAL_RCC_ClockConfig+0x1c8>)
 8006106:	689b      	ldr	r3, [r3, #8]
 8006108:	4a58      	ldr	r2, [pc, #352]	; (800626c <HAL_RCC_ClockConfig+0x1c8>)
 800610a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800610e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	f003 0308 	and.w	r3, r3, #8
 8006118:	2b00      	cmp	r3, #0
 800611a:	d005      	beq.n	8006128 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800611c:	4b53      	ldr	r3, [pc, #332]	; (800626c <HAL_RCC_ClockConfig+0x1c8>)
 800611e:	689b      	ldr	r3, [r3, #8]
 8006120:	4a52      	ldr	r2, [pc, #328]	; (800626c <HAL_RCC_ClockConfig+0x1c8>)
 8006122:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006126:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006128:	4b50      	ldr	r3, [pc, #320]	; (800626c <HAL_RCC_ClockConfig+0x1c8>)
 800612a:	689b      	ldr	r3, [r3, #8]
 800612c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	689b      	ldr	r3, [r3, #8]
 8006134:	494d      	ldr	r1, [pc, #308]	; (800626c <HAL_RCC_ClockConfig+0x1c8>)
 8006136:	4313      	orrs	r3, r2
 8006138:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	f003 0301 	and.w	r3, r3, #1
 8006142:	2b00      	cmp	r3, #0
 8006144:	d040      	beq.n	80061c8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	685b      	ldr	r3, [r3, #4]
 800614a:	2b01      	cmp	r3, #1
 800614c:	d107      	bne.n	800615e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800614e:	4b47      	ldr	r3, [pc, #284]	; (800626c <HAL_RCC_ClockConfig+0x1c8>)
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006156:	2b00      	cmp	r3, #0
 8006158:	d115      	bne.n	8006186 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800615a:	2301      	movs	r3, #1
 800615c:	e07f      	b.n	800625e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	685b      	ldr	r3, [r3, #4]
 8006162:	2b02      	cmp	r3, #2
 8006164:	d107      	bne.n	8006176 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006166:	4b41      	ldr	r3, [pc, #260]	; (800626c <HAL_RCC_ClockConfig+0x1c8>)
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800616e:	2b00      	cmp	r3, #0
 8006170:	d109      	bne.n	8006186 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006172:	2301      	movs	r3, #1
 8006174:	e073      	b.n	800625e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006176:	4b3d      	ldr	r3, [pc, #244]	; (800626c <HAL_RCC_ClockConfig+0x1c8>)
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	f003 0302 	and.w	r3, r3, #2
 800617e:	2b00      	cmp	r3, #0
 8006180:	d101      	bne.n	8006186 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006182:	2301      	movs	r3, #1
 8006184:	e06b      	b.n	800625e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006186:	4b39      	ldr	r3, [pc, #228]	; (800626c <HAL_RCC_ClockConfig+0x1c8>)
 8006188:	689b      	ldr	r3, [r3, #8]
 800618a:	f023 0203 	bic.w	r2, r3, #3
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	685b      	ldr	r3, [r3, #4]
 8006192:	4936      	ldr	r1, [pc, #216]	; (800626c <HAL_RCC_ClockConfig+0x1c8>)
 8006194:	4313      	orrs	r3, r2
 8006196:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006198:	f7fd fc02 	bl	80039a0 <HAL_GetTick>
 800619c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800619e:	e00a      	b.n	80061b6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80061a0:	f7fd fbfe 	bl	80039a0 <HAL_GetTick>
 80061a4:	4602      	mov	r2, r0
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	1ad3      	subs	r3, r2, r3
 80061aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80061ae:	4293      	cmp	r3, r2
 80061b0:	d901      	bls.n	80061b6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80061b2:	2303      	movs	r3, #3
 80061b4:	e053      	b.n	800625e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80061b6:	4b2d      	ldr	r3, [pc, #180]	; (800626c <HAL_RCC_ClockConfig+0x1c8>)
 80061b8:	689b      	ldr	r3, [r3, #8]
 80061ba:	f003 020c 	and.w	r2, r3, #12
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	685b      	ldr	r3, [r3, #4]
 80061c2:	009b      	lsls	r3, r3, #2
 80061c4:	429a      	cmp	r2, r3
 80061c6:	d1eb      	bne.n	80061a0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80061c8:	4b27      	ldr	r3, [pc, #156]	; (8006268 <HAL_RCC_ClockConfig+0x1c4>)
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	f003 030f 	and.w	r3, r3, #15
 80061d0:	683a      	ldr	r2, [r7, #0]
 80061d2:	429a      	cmp	r2, r3
 80061d4:	d210      	bcs.n	80061f8 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80061d6:	4b24      	ldr	r3, [pc, #144]	; (8006268 <HAL_RCC_ClockConfig+0x1c4>)
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	f023 020f 	bic.w	r2, r3, #15
 80061de:	4922      	ldr	r1, [pc, #136]	; (8006268 <HAL_RCC_ClockConfig+0x1c4>)
 80061e0:	683b      	ldr	r3, [r7, #0]
 80061e2:	4313      	orrs	r3, r2
 80061e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80061e6:	4b20      	ldr	r3, [pc, #128]	; (8006268 <HAL_RCC_ClockConfig+0x1c4>)
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	f003 030f 	and.w	r3, r3, #15
 80061ee:	683a      	ldr	r2, [r7, #0]
 80061f0:	429a      	cmp	r2, r3
 80061f2:	d001      	beq.n	80061f8 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80061f4:	2301      	movs	r3, #1
 80061f6:	e032      	b.n	800625e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	f003 0304 	and.w	r3, r3, #4
 8006200:	2b00      	cmp	r3, #0
 8006202:	d008      	beq.n	8006216 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006204:	4b19      	ldr	r3, [pc, #100]	; (800626c <HAL_RCC_ClockConfig+0x1c8>)
 8006206:	689b      	ldr	r3, [r3, #8]
 8006208:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	68db      	ldr	r3, [r3, #12]
 8006210:	4916      	ldr	r1, [pc, #88]	; (800626c <HAL_RCC_ClockConfig+0x1c8>)
 8006212:	4313      	orrs	r3, r2
 8006214:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	f003 0308 	and.w	r3, r3, #8
 800621e:	2b00      	cmp	r3, #0
 8006220:	d009      	beq.n	8006236 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006222:	4b12      	ldr	r3, [pc, #72]	; (800626c <HAL_RCC_ClockConfig+0x1c8>)
 8006224:	689b      	ldr	r3, [r3, #8]
 8006226:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	691b      	ldr	r3, [r3, #16]
 800622e:	00db      	lsls	r3, r3, #3
 8006230:	490e      	ldr	r1, [pc, #56]	; (800626c <HAL_RCC_ClockConfig+0x1c8>)
 8006232:	4313      	orrs	r3, r2
 8006234:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006236:	f000 f821 	bl	800627c <HAL_RCC_GetSysClockFreq>
 800623a:	4601      	mov	r1, r0
 800623c:	4b0b      	ldr	r3, [pc, #44]	; (800626c <HAL_RCC_ClockConfig+0x1c8>)
 800623e:	689b      	ldr	r3, [r3, #8]
 8006240:	091b      	lsrs	r3, r3, #4
 8006242:	f003 030f 	and.w	r3, r3, #15
 8006246:	4a0a      	ldr	r2, [pc, #40]	; (8006270 <HAL_RCC_ClockConfig+0x1cc>)
 8006248:	5cd3      	ldrb	r3, [r2, r3]
 800624a:	fa21 f303 	lsr.w	r3, r1, r3
 800624e:	4a09      	ldr	r2, [pc, #36]	; (8006274 <HAL_RCC_ClockConfig+0x1d0>)
 8006250:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8006252:	4b09      	ldr	r3, [pc, #36]	; (8006278 <HAL_RCC_ClockConfig+0x1d4>)
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	4618      	mov	r0, r3
 8006258:	f7fd fb5e 	bl	8003918 <HAL_InitTick>

  return HAL_OK;
 800625c:	2300      	movs	r3, #0
}
 800625e:	4618      	mov	r0, r3
 8006260:	3710      	adds	r7, #16
 8006262:	46bd      	mov	sp, r7
 8006264:	bd80      	pop	{r7, pc}
 8006266:	bf00      	nop
 8006268:	40023c00 	.word	0x40023c00
 800626c:	40023800 	.word	0x40023800
 8006270:	08009ef8 	.word	0x08009ef8
 8006274:	20000144 	.word	0x20000144
 8006278:	20000148 	.word	0x20000148

0800627c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800627c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800627e:	b085      	sub	sp, #20
 8006280:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8006282:	2300      	movs	r3, #0
 8006284:	607b      	str	r3, [r7, #4]
 8006286:	2300      	movs	r3, #0
 8006288:	60fb      	str	r3, [r7, #12]
 800628a:	2300      	movs	r3, #0
 800628c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 800628e:	2300      	movs	r3, #0
 8006290:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006292:	4b63      	ldr	r3, [pc, #396]	; (8006420 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006294:	689b      	ldr	r3, [r3, #8]
 8006296:	f003 030c 	and.w	r3, r3, #12
 800629a:	2b04      	cmp	r3, #4
 800629c:	d007      	beq.n	80062ae <HAL_RCC_GetSysClockFreq+0x32>
 800629e:	2b08      	cmp	r3, #8
 80062a0:	d008      	beq.n	80062b4 <HAL_RCC_GetSysClockFreq+0x38>
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	f040 80b4 	bne.w	8006410 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80062a8:	4b5e      	ldr	r3, [pc, #376]	; (8006424 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80062aa:	60bb      	str	r3, [r7, #8]
      break;
 80062ac:	e0b3      	b.n	8006416 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80062ae:	4b5e      	ldr	r3, [pc, #376]	; (8006428 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80062b0:	60bb      	str	r3, [r7, #8]
      break;
 80062b2:	e0b0      	b.n	8006416 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80062b4:	4b5a      	ldr	r3, [pc, #360]	; (8006420 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80062b6:	685b      	ldr	r3, [r3, #4]
 80062b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80062bc:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80062be:	4b58      	ldr	r3, [pc, #352]	; (8006420 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80062c0:	685b      	ldr	r3, [r3, #4]
 80062c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d04a      	beq.n	8006360 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80062ca:	4b55      	ldr	r3, [pc, #340]	; (8006420 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80062cc:	685b      	ldr	r3, [r3, #4]
 80062ce:	099b      	lsrs	r3, r3, #6
 80062d0:	f04f 0400 	mov.w	r4, #0
 80062d4:	f240 11ff 	movw	r1, #511	; 0x1ff
 80062d8:	f04f 0200 	mov.w	r2, #0
 80062dc:	ea03 0501 	and.w	r5, r3, r1
 80062e0:	ea04 0602 	and.w	r6, r4, r2
 80062e4:	4629      	mov	r1, r5
 80062e6:	4632      	mov	r2, r6
 80062e8:	f04f 0300 	mov.w	r3, #0
 80062ec:	f04f 0400 	mov.w	r4, #0
 80062f0:	0154      	lsls	r4, r2, #5
 80062f2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80062f6:	014b      	lsls	r3, r1, #5
 80062f8:	4619      	mov	r1, r3
 80062fa:	4622      	mov	r2, r4
 80062fc:	1b49      	subs	r1, r1, r5
 80062fe:	eb62 0206 	sbc.w	r2, r2, r6
 8006302:	f04f 0300 	mov.w	r3, #0
 8006306:	f04f 0400 	mov.w	r4, #0
 800630a:	0194      	lsls	r4, r2, #6
 800630c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8006310:	018b      	lsls	r3, r1, #6
 8006312:	1a5b      	subs	r3, r3, r1
 8006314:	eb64 0402 	sbc.w	r4, r4, r2
 8006318:	f04f 0100 	mov.w	r1, #0
 800631c:	f04f 0200 	mov.w	r2, #0
 8006320:	00e2      	lsls	r2, r4, #3
 8006322:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8006326:	00d9      	lsls	r1, r3, #3
 8006328:	460b      	mov	r3, r1
 800632a:	4614      	mov	r4, r2
 800632c:	195b      	adds	r3, r3, r5
 800632e:	eb44 0406 	adc.w	r4, r4, r6
 8006332:	f04f 0100 	mov.w	r1, #0
 8006336:	f04f 0200 	mov.w	r2, #0
 800633a:	0262      	lsls	r2, r4, #9
 800633c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8006340:	0259      	lsls	r1, r3, #9
 8006342:	460b      	mov	r3, r1
 8006344:	4614      	mov	r4, r2
 8006346:	4618      	mov	r0, r3
 8006348:	4621      	mov	r1, r4
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	f04f 0400 	mov.w	r4, #0
 8006350:	461a      	mov	r2, r3
 8006352:	4623      	mov	r3, r4
 8006354:	f7fa fbf2 	bl	8000b3c <__aeabi_uldivmod>
 8006358:	4603      	mov	r3, r0
 800635a:	460c      	mov	r4, r1
 800635c:	60fb      	str	r3, [r7, #12]
 800635e:	e049      	b.n	80063f4 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006360:	4b2f      	ldr	r3, [pc, #188]	; (8006420 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006362:	685b      	ldr	r3, [r3, #4]
 8006364:	099b      	lsrs	r3, r3, #6
 8006366:	f04f 0400 	mov.w	r4, #0
 800636a:	f240 11ff 	movw	r1, #511	; 0x1ff
 800636e:	f04f 0200 	mov.w	r2, #0
 8006372:	ea03 0501 	and.w	r5, r3, r1
 8006376:	ea04 0602 	and.w	r6, r4, r2
 800637a:	4629      	mov	r1, r5
 800637c:	4632      	mov	r2, r6
 800637e:	f04f 0300 	mov.w	r3, #0
 8006382:	f04f 0400 	mov.w	r4, #0
 8006386:	0154      	lsls	r4, r2, #5
 8006388:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800638c:	014b      	lsls	r3, r1, #5
 800638e:	4619      	mov	r1, r3
 8006390:	4622      	mov	r2, r4
 8006392:	1b49      	subs	r1, r1, r5
 8006394:	eb62 0206 	sbc.w	r2, r2, r6
 8006398:	f04f 0300 	mov.w	r3, #0
 800639c:	f04f 0400 	mov.w	r4, #0
 80063a0:	0194      	lsls	r4, r2, #6
 80063a2:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80063a6:	018b      	lsls	r3, r1, #6
 80063a8:	1a5b      	subs	r3, r3, r1
 80063aa:	eb64 0402 	sbc.w	r4, r4, r2
 80063ae:	f04f 0100 	mov.w	r1, #0
 80063b2:	f04f 0200 	mov.w	r2, #0
 80063b6:	00e2      	lsls	r2, r4, #3
 80063b8:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80063bc:	00d9      	lsls	r1, r3, #3
 80063be:	460b      	mov	r3, r1
 80063c0:	4614      	mov	r4, r2
 80063c2:	195b      	adds	r3, r3, r5
 80063c4:	eb44 0406 	adc.w	r4, r4, r6
 80063c8:	f04f 0100 	mov.w	r1, #0
 80063cc:	f04f 0200 	mov.w	r2, #0
 80063d0:	02a2      	lsls	r2, r4, #10
 80063d2:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80063d6:	0299      	lsls	r1, r3, #10
 80063d8:	460b      	mov	r3, r1
 80063da:	4614      	mov	r4, r2
 80063dc:	4618      	mov	r0, r3
 80063de:	4621      	mov	r1, r4
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	f04f 0400 	mov.w	r4, #0
 80063e6:	461a      	mov	r2, r3
 80063e8:	4623      	mov	r3, r4
 80063ea:	f7fa fba7 	bl	8000b3c <__aeabi_uldivmod>
 80063ee:	4603      	mov	r3, r0
 80063f0:	460c      	mov	r4, r1
 80063f2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80063f4:	4b0a      	ldr	r3, [pc, #40]	; (8006420 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80063f6:	685b      	ldr	r3, [r3, #4]
 80063f8:	0c1b      	lsrs	r3, r3, #16
 80063fa:	f003 0303 	and.w	r3, r3, #3
 80063fe:	3301      	adds	r3, #1
 8006400:	005b      	lsls	r3, r3, #1
 8006402:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8006404:	68fa      	ldr	r2, [r7, #12]
 8006406:	683b      	ldr	r3, [r7, #0]
 8006408:	fbb2 f3f3 	udiv	r3, r2, r3
 800640c:	60bb      	str	r3, [r7, #8]
      break;
 800640e:	e002      	b.n	8006416 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006410:	4b04      	ldr	r3, [pc, #16]	; (8006424 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8006412:	60bb      	str	r3, [r7, #8]
      break;
 8006414:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006416:	68bb      	ldr	r3, [r7, #8]
}
 8006418:	4618      	mov	r0, r3
 800641a:	3714      	adds	r7, #20
 800641c:	46bd      	mov	sp, r7
 800641e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006420:	40023800 	.word	0x40023800
 8006424:	00f42400 	.word	0x00f42400
 8006428:	007a1200 	.word	0x007a1200

0800642c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800642c:	b480      	push	{r7}
 800642e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006430:	4b03      	ldr	r3, [pc, #12]	; (8006440 <HAL_RCC_GetHCLKFreq+0x14>)
 8006432:	681b      	ldr	r3, [r3, #0]
}
 8006434:	4618      	mov	r0, r3
 8006436:	46bd      	mov	sp, r7
 8006438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643c:	4770      	bx	lr
 800643e:	bf00      	nop
 8006440:	20000144 	.word	0x20000144

08006444 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006444:	b580      	push	{r7, lr}
 8006446:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006448:	f7ff fff0 	bl	800642c <HAL_RCC_GetHCLKFreq>
 800644c:	4601      	mov	r1, r0
 800644e:	4b05      	ldr	r3, [pc, #20]	; (8006464 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006450:	689b      	ldr	r3, [r3, #8]
 8006452:	0a9b      	lsrs	r3, r3, #10
 8006454:	f003 0307 	and.w	r3, r3, #7
 8006458:	4a03      	ldr	r2, [pc, #12]	; (8006468 <HAL_RCC_GetPCLK1Freq+0x24>)
 800645a:	5cd3      	ldrb	r3, [r2, r3]
 800645c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006460:	4618      	mov	r0, r3
 8006462:	bd80      	pop	{r7, pc}
 8006464:	40023800 	.word	0x40023800
 8006468:	08009f08 	.word	0x08009f08

0800646c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800646c:	b580      	push	{r7, lr}
 800646e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006470:	f7ff ffdc 	bl	800642c <HAL_RCC_GetHCLKFreq>
 8006474:	4601      	mov	r1, r0
 8006476:	4b05      	ldr	r3, [pc, #20]	; (800648c <HAL_RCC_GetPCLK2Freq+0x20>)
 8006478:	689b      	ldr	r3, [r3, #8]
 800647a:	0b5b      	lsrs	r3, r3, #13
 800647c:	f003 0307 	and.w	r3, r3, #7
 8006480:	4a03      	ldr	r2, [pc, #12]	; (8006490 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006482:	5cd3      	ldrb	r3, [r2, r3]
 8006484:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006488:	4618      	mov	r0, r3
 800648a:	bd80      	pop	{r7, pc}
 800648c:	40023800 	.word	0x40023800
 8006490:	08009f08 	.word	0x08009f08

08006494 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006494:	b580      	push	{r7, lr}
 8006496:	b088      	sub	sp, #32
 8006498:	af00      	add	r7, sp, #0
 800649a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800649c:	2300      	movs	r3, #0
 800649e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80064a0:	2300      	movs	r3, #0
 80064a2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80064a4:	2300      	movs	r3, #0
 80064a6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80064a8:	2300      	movs	r3, #0
 80064aa:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80064ac:	2300      	movs	r3, #0
 80064ae:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	f003 0301 	and.w	r3, r3, #1
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d012      	beq.n	80064e2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80064bc:	4b69      	ldr	r3, [pc, #420]	; (8006664 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80064be:	689b      	ldr	r3, [r3, #8]
 80064c0:	4a68      	ldr	r2, [pc, #416]	; (8006664 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80064c2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80064c6:	6093      	str	r3, [r2, #8]
 80064c8:	4b66      	ldr	r3, [pc, #408]	; (8006664 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80064ca:	689a      	ldr	r2, [r3, #8]
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064d0:	4964      	ldr	r1, [pc, #400]	; (8006664 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80064d2:	4313      	orrs	r3, r2
 80064d4:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d101      	bne.n	80064e2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80064de:	2301      	movs	r3, #1
 80064e0:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d017      	beq.n	800651e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80064ee:	4b5d      	ldr	r3, [pc, #372]	; (8006664 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80064f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80064f4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064fc:	4959      	ldr	r1, [pc, #356]	; (8006664 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80064fe:	4313      	orrs	r3, r2
 8006500:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006508:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800650c:	d101      	bne.n	8006512 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800650e:	2301      	movs	r3, #1
 8006510:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006516:	2b00      	cmp	r3, #0
 8006518:	d101      	bne.n	800651e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800651a:	2301      	movs	r3, #1
 800651c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006526:	2b00      	cmp	r3, #0
 8006528:	d017      	beq.n	800655a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800652a:	4b4e      	ldr	r3, [pc, #312]	; (8006664 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800652c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006530:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006538:	494a      	ldr	r1, [pc, #296]	; (8006664 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800653a:	4313      	orrs	r3, r2
 800653c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006544:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006548:	d101      	bne.n	800654e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800654a:	2301      	movs	r3, #1
 800654c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006552:	2b00      	cmp	r3, #0
 8006554:	d101      	bne.n	800655a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8006556:	2301      	movs	r3, #1
 8006558:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006562:	2b00      	cmp	r3, #0
 8006564:	d001      	beq.n	800656a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8006566:	2301      	movs	r3, #1
 8006568:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	f003 0320 	and.w	r3, r3, #32
 8006572:	2b00      	cmp	r3, #0
 8006574:	f000 808b 	beq.w	800668e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006578:	4b3a      	ldr	r3, [pc, #232]	; (8006664 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800657a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800657c:	4a39      	ldr	r2, [pc, #228]	; (8006664 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800657e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006582:	6413      	str	r3, [r2, #64]	; 0x40
 8006584:	4b37      	ldr	r3, [pc, #220]	; (8006664 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006588:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800658c:	60bb      	str	r3, [r7, #8]
 800658e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006590:	4b35      	ldr	r3, [pc, #212]	; (8006668 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	4a34      	ldr	r2, [pc, #208]	; (8006668 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006596:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800659a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800659c:	f7fd fa00 	bl	80039a0 <HAL_GetTick>
 80065a0:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80065a2:	e008      	b.n	80065b6 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80065a4:	f7fd f9fc 	bl	80039a0 <HAL_GetTick>
 80065a8:	4602      	mov	r2, r0
 80065aa:	697b      	ldr	r3, [r7, #20]
 80065ac:	1ad3      	subs	r3, r2, r3
 80065ae:	2b64      	cmp	r3, #100	; 0x64
 80065b0:	d901      	bls.n	80065b6 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80065b2:	2303      	movs	r3, #3
 80065b4:	e355      	b.n	8006c62 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80065b6:	4b2c      	ldr	r3, [pc, #176]	; (8006668 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d0f0      	beq.n	80065a4 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80065c2:	4b28      	ldr	r3, [pc, #160]	; (8006664 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80065c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80065ca:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80065cc:	693b      	ldr	r3, [r7, #16]
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d035      	beq.n	800663e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80065da:	693a      	ldr	r2, [r7, #16]
 80065dc:	429a      	cmp	r2, r3
 80065de:	d02e      	beq.n	800663e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80065e0:	4b20      	ldr	r3, [pc, #128]	; (8006664 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80065e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80065e8:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80065ea:	4b1e      	ldr	r3, [pc, #120]	; (8006664 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80065ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065ee:	4a1d      	ldr	r2, [pc, #116]	; (8006664 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80065f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80065f4:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80065f6:	4b1b      	ldr	r3, [pc, #108]	; (8006664 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80065f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065fa:	4a1a      	ldr	r2, [pc, #104]	; (8006664 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80065fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006600:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8006602:	4a18      	ldr	r2, [pc, #96]	; (8006664 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006604:	693b      	ldr	r3, [r7, #16]
 8006606:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006608:	4b16      	ldr	r3, [pc, #88]	; (8006664 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800660a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800660c:	f003 0301 	and.w	r3, r3, #1
 8006610:	2b01      	cmp	r3, #1
 8006612:	d114      	bne.n	800663e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006614:	f7fd f9c4 	bl	80039a0 <HAL_GetTick>
 8006618:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800661a:	e00a      	b.n	8006632 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800661c:	f7fd f9c0 	bl	80039a0 <HAL_GetTick>
 8006620:	4602      	mov	r2, r0
 8006622:	697b      	ldr	r3, [r7, #20]
 8006624:	1ad3      	subs	r3, r2, r3
 8006626:	f241 3288 	movw	r2, #5000	; 0x1388
 800662a:	4293      	cmp	r3, r2
 800662c:	d901      	bls.n	8006632 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800662e:	2303      	movs	r3, #3
 8006630:	e317      	b.n	8006c62 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006632:	4b0c      	ldr	r3, [pc, #48]	; (8006664 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006634:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006636:	f003 0302 	and.w	r3, r3, #2
 800663a:	2b00      	cmp	r3, #0
 800663c:	d0ee      	beq.n	800661c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006642:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006646:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800664a:	d111      	bne.n	8006670 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800664c:	4b05      	ldr	r3, [pc, #20]	; (8006664 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800664e:	689b      	ldr	r3, [r3, #8]
 8006650:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006658:	4b04      	ldr	r3, [pc, #16]	; (800666c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800665a:	400b      	ands	r3, r1
 800665c:	4901      	ldr	r1, [pc, #4]	; (8006664 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800665e:	4313      	orrs	r3, r2
 8006660:	608b      	str	r3, [r1, #8]
 8006662:	e00b      	b.n	800667c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8006664:	40023800 	.word	0x40023800
 8006668:	40007000 	.word	0x40007000
 800666c:	0ffffcff 	.word	0x0ffffcff
 8006670:	4bb0      	ldr	r3, [pc, #704]	; (8006934 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006672:	689b      	ldr	r3, [r3, #8]
 8006674:	4aaf      	ldr	r2, [pc, #700]	; (8006934 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006676:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800667a:	6093      	str	r3, [r2, #8]
 800667c:	4bad      	ldr	r3, [pc, #692]	; (8006934 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800667e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006684:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006688:	49aa      	ldr	r1, [pc, #680]	; (8006934 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800668a:	4313      	orrs	r3, r2
 800668c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	f003 0310 	and.w	r3, r3, #16
 8006696:	2b00      	cmp	r3, #0
 8006698:	d010      	beq.n	80066bc <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800669a:	4ba6      	ldr	r3, [pc, #664]	; (8006934 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800669c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80066a0:	4aa4      	ldr	r2, [pc, #656]	; (8006934 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80066a2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80066a6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80066aa:	4ba2      	ldr	r3, [pc, #648]	; (8006934 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80066ac:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066b4:	499f      	ldr	r1, [pc, #636]	; (8006934 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80066b6:	4313      	orrs	r3, r2
 80066b8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d00a      	beq.n	80066de <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80066c8:	4b9a      	ldr	r3, [pc, #616]	; (8006934 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80066ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80066ce:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80066d6:	4997      	ldr	r1, [pc, #604]	; (8006934 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80066d8:	4313      	orrs	r3, r2
 80066da:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d00a      	beq.n	8006700 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80066ea:	4b92      	ldr	r3, [pc, #584]	; (8006934 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80066ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80066f0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80066f8:	498e      	ldr	r1, [pc, #568]	; (8006934 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80066fa:	4313      	orrs	r3, r2
 80066fc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006708:	2b00      	cmp	r3, #0
 800670a:	d00a      	beq.n	8006722 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800670c:	4b89      	ldr	r3, [pc, #548]	; (8006934 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800670e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006712:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800671a:	4986      	ldr	r1, [pc, #536]	; (8006934 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800671c:	4313      	orrs	r3, r2
 800671e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800672a:	2b00      	cmp	r3, #0
 800672c:	d00a      	beq.n	8006744 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800672e:	4b81      	ldr	r3, [pc, #516]	; (8006934 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006730:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006734:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800673c:	497d      	ldr	r1, [pc, #500]	; (8006934 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800673e:	4313      	orrs	r3, r2
 8006740:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800674c:	2b00      	cmp	r3, #0
 800674e:	d00a      	beq.n	8006766 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006750:	4b78      	ldr	r3, [pc, #480]	; (8006934 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006752:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006756:	f023 0203 	bic.w	r2, r3, #3
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800675e:	4975      	ldr	r1, [pc, #468]	; (8006934 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006760:	4313      	orrs	r3, r2
 8006762:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800676e:	2b00      	cmp	r3, #0
 8006770:	d00a      	beq.n	8006788 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006772:	4b70      	ldr	r3, [pc, #448]	; (8006934 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006774:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006778:	f023 020c 	bic.w	r2, r3, #12
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006780:	496c      	ldr	r1, [pc, #432]	; (8006934 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006782:	4313      	orrs	r3, r2
 8006784:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006790:	2b00      	cmp	r3, #0
 8006792:	d00a      	beq.n	80067aa <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006794:	4b67      	ldr	r3, [pc, #412]	; (8006934 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006796:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800679a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80067a2:	4964      	ldr	r1, [pc, #400]	; (8006934 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80067a4:	4313      	orrs	r3, r2
 80067a6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d00a      	beq.n	80067cc <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80067b6:	4b5f      	ldr	r3, [pc, #380]	; (8006934 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80067b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067bc:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80067c4:	495b      	ldr	r1, [pc, #364]	; (8006934 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80067c6:	4313      	orrs	r3, r2
 80067c8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d00a      	beq.n	80067ee <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80067d8:	4b56      	ldr	r3, [pc, #344]	; (8006934 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80067da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067de:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067e6:	4953      	ldr	r1, [pc, #332]	; (8006934 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80067e8:	4313      	orrs	r3, r2
 80067ea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d00a      	beq.n	8006810 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80067fa:	4b4e      	ldr	r3, [pc, #312]	; (8006934 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80067fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006800:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006808:	494a      	ldr	r1, [pc, #296]	; (8006934 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800680a:	4313      	orrs	r3, r2
 800680c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006818:	2b00      	cmp	r3, #0
 800681a:	d00a      	beq.n	8006832 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800681c:	4b45      	ldr	r3, [pc, #276]	; (8006934 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800681e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006822:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800682a:	4942      	ldr	r1, [pc, #264]	; (8006934 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800682c:	4313      	orrs	r3, r2
 800682e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800683a:	2b00      	cmp	r3, #0
 800683c:	d00a      	beq.n	8006854 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800683e:	4b3d      	ldr	r3, [pc, #244]	; (8006934 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006840:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006844:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800684c:	4939      	ldr	r1, [pc, #228]	; (8006934 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800684e:	4313      	orrs	r3, r2
 8006850:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800685c:	2b00      	cmp	r3, #0
 800685e:	d00a      	beq.n	8006876 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006860:	4b34      	ldr	r3, [pc, #208]	; (8006934 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006862:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006866:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800686e:	4931      	ldr	r1, [pc, #196]	; (8006934 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006870:	4313      	orrs	r3, r2
 8006872:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800687e:	2b00      	cmp	r3, #0
 8006880:	d011      	beq.n	80068a6 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8006882:	4b2c      	ldr	r3, [pc, #176]	; (8006934 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006884:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006888:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006890:	4928      	ldr	r1, [pc, #160]	; (8006934 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006892:	4313      	orrs	r3, r2
 8006894:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800689c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80068a0:	d101      	bne.n	80068a6 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80068a2:	2301      	movs	r3, #1
 80068a4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	f003 0308 	and.w	r3, r3, #8
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d001      	beq.n	80068b6 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80068b2:	2301      	movs	r3, #1
 80068b4:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d00a      	beq.n	80068d8 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80068c2:	4b1c      	ldr	r3, [pc, #112]	; (8006934 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80068c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068c8:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80068d0:	4918      	ldr	r1, [pc, #96]	; (8006934 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80068d2:	4313      	orrs	r3, r2
 80068d4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d00b      	beq.n	80068fc <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80068e4:	4b13      	ldr	r3, [pc, #76]	; (8006934 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80068e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068ea:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80068f4:	490f      	ldr	r1, [pc, #60]	; (8006934 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80068f6:	4313      	orrs	r3, r2
 80068f8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80068fc:	69fb      	ldr	r3, [r7, #28]
 80068fe:	2b01      	cmp	r3, #1
 8006900:	d005      	beq.n	800690e <HAL_RCCEx_PeriphCLKConfig+0x47a>
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800690a:	f040 80d8 	bne.w	8006abe <HAL_RCCEx_PeriphCLKConfig+0x62a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800690e:	4b09      	ldr	r3, [pc, #36]	; (8006934 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	4a08      	ldr	r2, [pc, #32]	; (8006934 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006914:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006918:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800691a:	f7fd f841 	bl	80039a0 <HAL_GetTick>
 800691e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006920:	e00a      	b.n	8006938 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006922:	f7fd f83d 	bl	80039a0 <HAL_GetTick>
 8006926:	4602      	mov	r2, r0
 8006928:	697b      	ldr	r3, [r7, #20]
 800692a:	1ad3      	subs	r3, r2, r3
 800692c:	2b64      	cmp	r3, #100	; 0x64
 800692e:	d903      	bls.n	8006938 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006930:	2303      	movs	r3, #3
 8006932:	e196      	b.n	8006c62 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 8006934:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006938:	4b6c      	ldr	r3, [pc, #432]	; (8006aec <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006940:	2b00      	cmp	r3, #0
 8006942:	d1ee      	bne.n	8006922 <HAL_RCCEx_PeriphCLKConfig+0x48e>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	f003 0301 	and.w	r3, r3, #1
 800694c:	2b00      	cmp	r3, #0
 800694e:	d021      	beq.n	8006994 <HAL_RCCEx_PeriphCLKConfig+0x500>
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006954:	2b00      	cmp	r3, #0
 8006956:	d11d      	bne.n	8006994 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8006958:	4b64      	ldr	r3, [pc, #400]	; (8006aec <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800695a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800695e:	0c1b      	lsrs	r3, r3, #16
 8006960:	f003 0303 	and.w	r3, r3, #3
 8006964:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006966:	4b61      	ldr	r3, [pc, #388]	; (8006aec <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006968:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800696c:	0e1b      	lsrs	r3, r3, #24
 800696e:	f003 030f 	and.w	r3, r3, #15
 8006972:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	685b      	ldr	r3, [r3, #4]
 8006978:	019a      	lsls	r2, r3, #6
 800697a:	693b      	ldr	r3, [r7, #16]
 800697c:	041b      	lsls	r3, r3, #16
 800697e:	431a      	orrs	r2, r3
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	061b      	lsls	r3, r3, #24
 8006984:	431a      	orrs	r2, r3
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	689b      	ldr	r3, [r3, #8]
 800698a:	071b      	lsls	r3, r3, #28
 800698c:	4957      	ldr	r1, [pc, #348]	; (8006aec <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800698e:	4313      	orrs	r3, r2
 8006990:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800699c:	2b00      	cmp	r3, #0
 800699e:	d004      	beq.n	80069aa <HAL_RCCEx_PeriphCLKConfig+0x516>
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069a4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80069a8:	d00a      	beq.n	80069c0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d02e      	beq.n	8006a14 <HAL_RCCEx_PeriphCLKConfig+0x580>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069ba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80069be:	d129      	bne.n	8006a14 <HAL_RCCEx_PeriphCLKConfig+0x580>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80069c0:	4b4a      	ldr	r3, [pc, #296]	; (8006aec <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80069c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80069c6:	0c1b      	lsrs	r3, r3, #16
 80069c8:	f003 0303 	and.w	r3, r3, #3
 80069cc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80069ce:	4b47      	ldr	r3, [pc, #284]	; (8006aec <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80069d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80069d4:	0f1b      	lsrs	r3, r3, #28
 80069d6:	f003 0307 	and.w	r3, r3, #7
 80069da:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	685b      	ldr	r3, [r3, #4]
 80069e0:	019a      	lsls	r2, r3, #6
 80069e2:	693b      	ldr	r3, [r7, #16]
 80069e4:	041b      	lsls	r3, r3, #16
 80069e6:	431a      	orrs	r2, r3
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	68db      	ldr	r3, [r3, #12]
 80069ec:	061b      	lsls	r3, r3, #24
 80069ee:	431a      	orrs	r2, r3
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	071b      	lsls	r3, r3, #28
 80069f4:	493d      	ldr	r1, [pc, #244]	; (8006aec <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80069f6:	4313      	orrs	r3, r2
 80069f8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80069fc:	4b3b      	ldr	r3, [pc, #236]	; (8006aec <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80069fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006a02:	f023 021f 	bic.w	r2, r3, #31
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a0a:	3b01      	subs	r3, #1
 8006a0c:	4937      	ldr	r1, [pc, #220]	; (8006aec <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006a0e:	4313      	orrs	r3, r2
 8006a10:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d01d      	beq.n	8006a5c <HAL_RCCEx_PeriphCLKConfig+0x5c8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006a20:	4b32      	ldr	r3, [pc, #200]	; (8006aec <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006a22:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006a26:	0e1b      	lsrs	r3, r3, #24
 8006a28:	f003 030f 	and.w	r3, r3, #15
 8006a2c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006a2e:	4b2f      	ldr	r3, [pc, #188]	; (8006aec <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006a30:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006a34:	0f1b      	lsrs	r3, r3, #28
 8006a36:	f003 0307 	and.w	r3, r3, #7
 8006a3a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	685b      	ldr	r3, [r3, #4]
 8006a40:	019a      	lsls	r2, r3, #6
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	691b      	ldr	r3, [r3, #16]
 8006a46:	041b      	lsls	r3, r3, #16
 8006a48:	431a      	orrs	r2, r3
 8006a4a:	693b      	ldr	r3, [r7, #16]
 8006a4c:	061b      	lsls	r3, r3, #24
 8006a4e:	431a      	orrs	r2, r3
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	071b      	lsls	r3, r3, #28
 8006a54:	4925      	ldr	r1, [pc, #148]	; (8006aec <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006a56:	4313      	orrs	r3, r2
 8006a58:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d011      	beq.n	8006a8c <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	685b      	ldr	r3, [r3, #4]
 8006a6c:	019a      	lsls	r2, r3, #6
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	691b      	ldr	r3, [r3, #16]
 8006a72:	041b      	lsls	r3, r3, #16
 8006a74:	431a      	orrs	r2, r3
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	68db      	ldr	r3, [r3, #12]
 8006a7a:	061b      	lsls	r3, r3, #24
 8006a7c:	431a      	orrs	r2, r3
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	689b      	ldr	r3, [r3, #8]
 8006a82:	071b      	lsls	r3, r3, #28
 8006a84:	4919      	ldr	r1, [pc, #100]	; (8006aec <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006a86:	4313      	orrs	r3, r2
 8006a88:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006a8c:	4b17      	ldr	r3, [pc, #92]	; (8006aec <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	4a16      	ldr	r2, [pc, #88]	; (8006aec <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006a92:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006a96:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006a98:	f7fc ff82 	bl	80039a0 <HAL_GetTick>
 8006a9c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006a9e:	e008      	b.n	8006ab2 <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006aa0:	f7fc ff7e 	bl	80039a0 <HAL_GetTick>
 8006aa4:	4602      	mov	r2, r0
 8006aa6:	697b      	ldr	r3, [r7, #20]
 8006aa8:	1ad3      	subs	r3, r2, r3
 8006aaa:	2b64      	cmp	r3, #100	; 0x64
 8006aac:	d901      	bls.n	8006ab2 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006aae:	2303      	movs	r3, #3
 8006ab0:	e0d7      	b.n	8006c62 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006ab2:	4b0e      	ldr	r3, [pc, #56]	; (8006aec <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d0f0      	beq.n	8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8006abe:	69bb      	ldr	r3, [r7, #24]
 8006ac0:	2b01      	cmp	r3, #1
 8006ac2:	f040 80cd 	bne.w	8006c60 <HAL_RCCEx_PeriphCLKConfig+0x7cc>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8006ac6:	4b09      	ldr	r3, [pc, #36]	; (8006aec <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	4a08      	ldr	r2, [pc, #32]	; (8006aec <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006acc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006ad0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006ad2:	f7fc ff65 	bl	80039a0 <HAL_GetTick>
 8006ad6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006ad8:	e00a      	b.n	8006af0 <HAL_RCCEx_PeriphCLKConfig+0x65c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006ada:	f7fc ff61 	bl	80039a0 <HAL_GetTick>
 8006ade:	4602      	mov	r2, r0
 8006ae0:	697b      	ldr	r3, [r7, #20]
 8006ae2:	1ad3      	subs	r3, r2, r3
 8006ae4:	2b64      	cmp	r3, #100	; 0x64
 8006ae6:	d903      	bls.n	8006af0 <HAL_RCCEx_PeriphCLKConfig+0x65c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006ae8:	2303      	movs	r3, #3
 8006aea:	e0ba      	b.n	8006c62 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 8006aec:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006af0:	4b5e      	ldr	r3, [pc, #376]	; (8006c6c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006af8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006afc:	d0ed      	beq.n	8006ada <HAL_RCCEx_PeriphCLKConfig+0x646>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d003      	beq.n	8006b12 <HAL_RCCEx_PeriphCLKConfig+0x67e>
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d009      	beq.n	8006b26 <HAL_RCCEx_PeriphCLKConfig+0x692>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d02e      	beq.n	8006b7c <HAL_RCCEx_PeriphCLKConfig+0x6e8>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d12a      	bne.n	8006b7c <HAL_RCCEx_PeriphCLKConfig+0x6e8>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8006b26:	4b51      	ldr	r3, [pc, #324]	; (8006c6c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006b28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b2c:	0c1b      	lsrs	r3, r3, #16
 8006b2e:	f003 0303 	and.w	r3, r3, #3
 8006b32:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006b34:	4b4d      	ldr	r3, [pc, #308]	; (8006c6c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006b36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b3a:	0f1b      	lsrs	r3, r3, #28
 8006b3c:	f003 0307 	and.w	r3, r3, #7
 8006b40:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	695b      	ldr	r3, [r3, #20]
 8006b46:	019a      	lsls	r2, r3, #6
 8006b48:	693b      	ldr	r3, [r7, #16]
 8006b4a:	041b      	lsls	r3, r3, #16
 8006b4c:	431a      	orrs	r2, r3
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	699b      	ldr	r3, [r3, #24]
 8006b52:	061b      	lsls	r3, r3, #24
 8006b54:	431a      	orrs	r2, r3
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	071b      	lsls	r3, r3, #28
 8006b5a:	4944      	ldr	r1, [pc, #272]	; (8006c6c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006b5c:	4313      	orrs	r3, r2
 8006b5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8006b62:	4b42      	ldr	r3, [pc, #264]	; (8006c6c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006b64:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006b68:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b70:	3b01      	subs	r3, #1
 8006b72:	021b      	lsls	r3, r3, #8
 8006b74:	493d      	ldr	r1, [pc, #244]	; (8006c6c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006b76:	4313      	orrs	r3, r2
 8006b78:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d022      	beq.n	8006bce <HAL_RCCEx_PeriphCLKConfig+0x73a>
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006b8c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006b90:	d11d      	bne.n	8006bce <HAL_RCCEx_PeriphCLKConfig+0x73a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006b92:	4b36      	ldr	r3, [pc, #216]	; (8006c6c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006b94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b98:	0e1b      	lsrs	r3, r3, #24
 8006b9a:	f003 030f 	and.w	r3, r3, #15
 8006b9e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006ba0:	4b32      	ldr	r3, [pc, #200]	; (8006c6c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006ba2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ba6:	0f1b      	lsrs	r3, r3, #28
 8006ba8:	f003 0307 	and.w	r3, r3, #7
 8006bac:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	695b      	ldr	r3, [r3, #20]
 8006bb2:	019a      	lsls	r2, r3, #6
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	6a1b      	ldr	r3, [r3, #32]
 8006bb8:	041b      	lsls	r3, r3, #16
 8006bba:	431a      	orrs	r2, r3
 8006bbc:	693b      	ldr	r3, [r7, #16]
 8006bbe:	061b      	lsls	r3, r3, #24
 8006bc0:	431a      	orrs	r2, r3
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	071b      	lsls	r3, r3, #28
 8006bc6:	4929      	ldr	r1, [pc, #164]	; (8006c6c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006bc8:	4313      	orrs	r3, r2
 8006bca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	f003 0308 	and.w	r3, r3, #8
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d028      	beq.n	8006c2c <HAL_RCCEx_PeriphCLKConfig+0x798>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006bda:	4b24      	ldr	r3, [pc, #144]	; (8006c6c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006bdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006be0:	0e1b      	lsrs	r3, r3, #24
 8006be2:	f003 030f 	and.w	r3, r3, #15
 8006be6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8006be8:	4b20      	ldr	r3, [pc, #128]	; (8006c6c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006bea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006bee:	0c1b      	lsrs	r3, r3, #16
 8006bf0:	f003 0303 	and.w	r3, r3, #3
 8006bf4:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	695b      	ldr	r3, [r3, #20]
 8006bfa:	019a      	lsls	r2, r3, #6
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	041b      	lsls	r3, r3, #16
 8006c00:	431a      	orrs	r2, r3
 8006c02:	693b      	ldr	r3, [r7, #16]
 8006c04:	061b      	lsls	r3, r3, #24
 8006c06:	431a      	orrs	r2, r3
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	69db      	ldr	r3, [r3, #28]
 8006c0c:	071b      	lsls	r3, r3, #28
 8006c0e:	4917      	ldr	r1, [pc, #92]	; (8006c6c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006c10:	4313      	orrs	r3, r2
 8006c12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8006c16:	4b15      	ldr	r3, [pc, #84]	; (8006c6c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006c18:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006c1c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c24:	4911      	ldr	r1, [pc, #68]	; (8006c6c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006c26:	4313      	orrs	r3, r2
 8006c28:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8006c2c:	4b0f      	ldr	r3, [pc, #60]	; (8006c6c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	4a0e      	ldr	r2, [pc, #56]	; (8006c6c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006c32:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006c36:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006c38:	f7fc feb2 	bl	80039a0 <HAL_GetTick>
 8006c3c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006c3e:	e008      	b.n	8006c52 <HAL_RCCEx_PeriphCLKConfig+0x7be>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006c40:	f7fc feae 	bl	80039a0 <HAL_GetTick>
 8006c44:	4602      	mov	r2, r0
 8006c46:	697b      	ldr	r3, [r7, #20]
 8006c48:	1ad3      	subs	r3, r2, r3
 8006c4a:	2b64      	cmp	r3, #100	; 0x64
 8006c4c:	d901      	bls.n	8006c52 <HAL_RCCEx_PeriphCLKConfig+0x7be>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006c4e:	2303      	movs	r3, #3
 8006c50:	e007      	b.n	8006c62 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006c52:	4b06      	ldr	r3, [pc, #24]	; (8006c6c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006c5a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006c5e:	d1ef      	bne.n	8006c40 <HAL_RCCEx_PeriphCLKConfig+0x7ac>
      }
    }
  }
  return HAL_OK;
 8006c60:	2300      	movs	r3, #0
}
 8006c62:	4618      	mov	r0, r3
 8006c64:	3720      	adds	r7, #32
 8006c66:	46bd      	mov	sp, r7
 8006c68:	bd80      	pop	{r7, pc}
 8006c6a:	bf00      	nop
 8006c6c:	40023800 	.word	0x40023800

08006c70 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006c70:	b580      	push	{r7, lr}
 8006c72:	b084      	sub	sp, #16
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d101      	bne.n	8006c82 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006c7e:	2301      	movs	r3, #1
 8006c80:	e084      	b.n	8006d8c <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	2200      	movs	r2, #0
 8006c86:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006c8e:	b2db      	uxtb	r3, r3
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d106      	bne.n	8006ca2 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	2200      	movs	r2, #0
 8006c98:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006c9c:	6878      	ldr	r0, [r7, #4]
 8006c9e:	f7fc fa25 	bl	80030ec <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	2202      	movs	r2, #2
 8006ca6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	681a      	ldr	r2, [r3, #0]
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006cb8:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	68db      	ldr	r3, [r3, #12]
 8006cbe:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006cc2:	d902      	bls.n	8006cca <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006cc4:	2300      	movs	r3, #0
 8006cc6:	60fb      	str	r3, [r7, #12]
 8006cc8:	e002      	b.n	8006cd0 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006cca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006cce:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	68db      	ldr	r3, [r3, #12]
 8006cd4:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8006cd8:	d007      	beq.n	8006cea <HAL_SPI_Init+0x7a>
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	68db      	ldr	r3, [r3, #12]
 8006cde:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006ce2:	d002      	beq.n	8006cea <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	2200      	movs	r2, #0
 8006ce8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d10b      	bne.n	8006d0a <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	68db      	ldr	r3, [r3, #12]
 8006cf6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006cfa:	d903      	bls.n	8006d04 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	2202      	movs	r2, #2
 8006d00:	631a      	str	r2, [r3, #48]	; 0x30
 8006d02:	e002      	b.n	8006d0a <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	2201      	movs	r2, #1
 8006d08:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	685a      	ldr	r2, [r3, #4]
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	689b      	ldr	r3, [r3, #8]
 8006d12:	431a      	orrs	r2, r3
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	691b      	ldr	r3, [r3, #16]
 8006d18:	431a      	orrs	r2, r3
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	695b      	ldr	r3, [r3, #20]
 8006d1e:	431a      	orrs	r2, r3
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	699b      	ldr	r3, [r3, #24]
 8006d24:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006d28:	431a      	orrs	r2, r3
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	69db      	ldr	r3, [r3, #28]
 8006d2e:	431a      	orrs	r2, r3
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	6a1b      	ldr	r3, [r3, #32]
 8006d34:	ea42 0103 	orr.w	r1, r2, r3
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	430a      	orrs	r2, r1
 8006d42:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	699b      	ldr	r3, [r3, #24]
 8006d48:	0c1b      	lsrs	r3, r3, #16
 8006d4a:	f003 0204 	and.w	r2, r3, #4
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d52:	431a      	orrs	r2, r3
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d58:	431a      	orrs	r2, r3
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	68db      	ldr	r3, [r3, #12]
 8006d5e:	ea42 0103 	orr.w	r1, r2, r3
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	68fa      	ldr	r2, [r7, #12]
 8006d68:	430a      	orrs	r2, r1
 8006d6a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	69da      	ldr	r2, [r3, #28]
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006d7a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	2200      	movs	r2, #0
 8006d80:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	2201      	movs	r2, #1
 8006d86:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8006d8a:	2300      	movs	r3, #0
}
 8006d8c:	4618      	mov	r0, r3
 8006d8e:	3710      	adds	r7, #16
 8006d90:	46bd      	mov	sp, r7
 8006d92:	bd80      	pop	{r7, pc}

08006d94 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006d94:	b580      	push	{r7, lr}
 8006d96:	b088      	sub	sp, #32
 8006d98:	af00      	add	r7, sp, #0
 8006d9a:	60f8      	str	r0, [r7, #12]
 8006d9c:	60b9      	str	r1, [r7, #8]
 8006d9e:	603b      	str	r3, [r7, #0]
 8006da0:	4613      	mov	r3, r2
 8006da2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006da4:	2300      	movs	r3, #0
 8006da6:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006dae:	2b01      	cmp	r3, #1
 8006db0:	d101      	bne.n	8006db6 <HAL_SPI_Transmit+0x22>
 8006db2:	2302      	movs	r3, #2
 8006db4:	e150      	b.n	8007058 <HAL_SPI_Transmit+0x2c4>
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	2201      	movs	r2, #1
 8006dba:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006dbe:	f7fc fdef 	bl	80039a0 <HAL_GetTick>
 8006dc2:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006dc4:	88fb      	ldrh	r3, [r7, #6]
 8006dc6:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006dce:	b2db      	uxtb	r3, r3
 8006dd0:	2b01      	cmp	r3, #1
 8006dd2:	d002      	beq.n	8006dda <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006dd4:	2302      	movs	r3, #2
 8006dd6:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006dd8:	e135      	b.n	8007046 <HAL_SPI_Transmit+0x2b2>
  }

  if ((pData == NULL) || (Size == 0U))
 8006dda:	68bb      	ldr	r3, [r7, #8]
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d002      	beq.n	8006de6 <HAL_SPI_Transmit+0x52>
 8006de0:	88fb      	ldrh	r3, [r7, #6]
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d102      	bne.n	8006dec <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006de6:	2301      	movs	r3, #1
 8006de8:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006dea:	e12c      	b.n	8007046 <HAL_SPI_Transmit+0x2b2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	2203      	movs	r2, #3
 8006df0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	2200      	movs	r2, #0
 8006df8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	68ba      	ldr	r2, [r7, #8]
 8006dfe:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	88fa      	ldrh	r2, [r7, #6]
 8006e04:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	88fa      	ldrh	r2, [r7, #6]
 8006e0a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	2200      	movs	r2, #0
 8006e10:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	2200      	movs	r2, #0
 8006e16:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	2200      	movs	r2, #0
 8006e1e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	2200      	movs	r2, #0
 8006e26:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	2200      	movs	r2, #0
 8006e2c:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	689b      	ldr	r3, [r3, #8]
 8006e32:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006e36:	d107      	bne.n	8006e48 <HAL_SPI_Transmit+0xb4>
  {
    SPI_1LINE_TX(hspi);
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	681a      	ldr	r2, [r3, #0]
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006e46:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e52:	2b40      	cmp	r3, #64	; 0x40
 8006e54:	d007      	beq.n	8006e66 <HAL_SPI_Transmit+0xd2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	681a      	ldr	r2, [r3, #0]
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006e64:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	68db      	ldr	r3, [r3, #12]
 8006e6a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006e6e:	d94b      	bls.n	8006f08 <HAL_SPI_Transmit+0x174>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	685b      	ldr	r3, [r3, #4]
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d002      	beq.n	8006e7e <HAL_SPI_Transmit+0xea>
 8006e78:	8afb      	ldrh	r3, [r7, #22]
 8006e7a:	2b01      	cmp	r3, #1
 8006e7c:	d13e      	bne.n	8006efc <HAL_SPI_Transmit+0x168>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e82:	881a      	ldrh	r2, [r3, #0]
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e8e:	1c9a      	adds	r2, r3, #2
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006e98:	b29b      	uxth	r3, r3
 8006e9a:	3b01      	subs	r3, #1
 8006e9c:	b29a      	uxth	r2, r3
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006ea2:	e02b      	b.n	8006efc <HAL_SPI_Transmit+0x168>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	689b      	ldr	r3, [r3, #8]
 8006eaa:	f003 0302 	and.w	r3, r3, #2
 8006eae:	2b02      	cmp	r3, #2
 8006eb0:	d112      	bne.n	8006ed8 <HAL_SPI_Transmit+0x144>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006eb6:	881a      	ldrh	r2, [r3, #0]
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ec2:	1c9a      	adds	r2, r3, #2
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006ecc:	b29b      	uxth	r3, r3
 8006ece:	3b01      	subs	r3, #1
 8006ed0:	b29a      	uxth	r2, r3
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006ed6:	e011      	b.n	8006efc <HAL_SPI_Transmit+0x168>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006ed8:	f7fc fd62 	bl	80039a0 <HAL_GetTick>
 8006edc:	4602      	mov	r2, r0
 8006ede:	69bb      	ldr	r3, [r7, #24]
 8006ee0:	1ad3      	subs	r3, r2, r3
 8006ee2:	683a      	ldr	r2, [r7, #0]
 8006ee4:	429a      	cmp	r2, r3
 8006ee6:	d803      	bhi.n	8006ef0 <HAL_SPI_Transmit+0x15c>
 8006ee8:	683b      	ldr	r3, [r7, #0]
 8006eea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006eee:	d102      	bne.n	8006ef6 <HAL_SPI_Transmit+0x162>
 8006ef0:	683b      	ldr	r3, [r7, #0]
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d102      	bne.n	8006efc <HAL_SPI_Transmit+0x168>
        {
          errorcode = HAL_TIMEOUT;
 8006ef6:	2303      	movs	r3, #3
 8006ef8:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006efa:	e0a4      	b.n	8007046 <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006f00:	b29b      	uxth	r3, r3
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d1ce      	bne.n	8006ea4 <HAL_SPI_Transmit+0x110>
 8006f06:	e07c      	b.n	8007002 <HAL_SPI_Transmit+0x26e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	685b      	ldr	r3, [r3, #4]
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d002      	beq.n	8006f16 <HAL_SPI_Transmit+0x182>
 8006f10:	8afb      	ldrh	r3, [r7, #22]
 8006f12:	2b01      	cmp	r3, #1
 8006f14:	d170      	bne.n	8006ff8 <HAL_SPI_Transmit+0x264>
    {
      if (hspi->TxXferCount > 1U)
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006f1a:	b29b      	uxth	r3, r3
 8006f1c:	2b01      	cmp	r3, #1
 8006f1e:	d912      	bls.n	8006f46 <HAL_SPI_Transmit+0x1b2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f24:	881a      	ldrh	r2, [r3, #0]
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f30:	1c9a      	adds	r2, r3, #2
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006f3a:	b29b      	uxth	r3, r3
 8006f3c:	3b02      	subs	r3, #2
 8006f3e:	b29a      	uxth	r2, r3
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006f44:	e058      	b.n	8006ff8 <HAL_SPI_Transmit+0x264>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	330c      	adds	r3, #12
 8006f50:	7812      	ldrb	r2, [r2, #0]
 8006f52:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f58:	1c5a      	adds	r2, r3, #1
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006f62:	b29b      	uxth	r3, r3
 8006f64:	3b01      	subs	r3, #1
 8006f66:	b29a      	uxth	r2, r3
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8006f6c:	e044      	b.n	8006ff8 <HAL_SPI_Transmit+0x264>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	689b      	ldr	r3, [r3, #8]
 8006f74:	f003 0302 	and.w	r3, r3, #2
 8006f78:	2b02      	cmp	r3, #2
 8006f7a:	d12b      	bne.n	8006fd4 <HAL_SPI_Transmit+0x240>
      {
        if (hspi->TxXferCount > 1U)
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006f80:	b29b      	uxth	r3, r3
 8006f82:	2b01      	cmp	r3, #1
 8006f84:	d912      	bls.n	8006fac <HAL_SPI_Transmit+0x218>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f8a:	881a      	ldrh	r2, [r3, #0]
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f96:	1c9a      	adds	r2, r3, #2
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006fa0:	b29b      	uxth	r3, r3
 8006fa2:	3b02      	subs	r3, #2
 8006fa4:	b29a      	uxth	r2, r3
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006faa:	e025      	b.n	8006ff8 <HAL_SPI_Transmit+0x264>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	330c      	adds	r3, #12
 8006fb6:	7812      	ldrb	r2, [r2, #0]
 8006fb8:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fbe:	1c5a      	adds	r2, r3, #1
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006fc8:	b29b      	uxth	r3, r3
 8006fca:	3b01      	subs	r3, #1
 8006fcc:	b29a      	uxth	r2, r3
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006fd2:	e011      	b.n	8006ff8 <HAL_SPI_Transmit+0x264>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006fd4:	f7fc fce4 	bl	80039a0 <HAL_GetTick>
 8006fd8:	4602      	mov	r2, r0
 8006fda:	69bb      	ldr	r3, [r7, #24]
 8006fdc:	1ad3      	subs	r3, r2, r3
 8006fde:	683a      	ldr	r2, [r7, #0]
 8006fe0:	429a      	cmp	r2, r3
 8006fe2:	d803      	bhi.n	8006fec <HAL_SPI_Transmit+0x258>
 8006fe4:	683b      	ldr	r3, [r7, #0]
 8006fe6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fea:	d102      	bne.n	8006ff2 <HAL_SPI_Transmit+0x25e>
 8006fec:	683b      	ldr	r3, [r7, #0]
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d102      	bne.n	8006ff8 <HAL_SPI_Transmit+0x264>
        {
          errorcode = HAL_TIMEOUT;
 8006ff2:	2303      	movs	r3, #3
 8006ff4:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006ff6:	e026      	b.n	8007046 <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006ffc:	b29b      	uxth	r3, r3
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d1b5      	bne.n	8006f6e <HAL_SPI_Transmit+0x1da>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007002:	69ba      	ldr	r2, [r7, #24]
 8007004:	6839      	ldr	r1, [r7, #0]
 8007006:	68f8      	ldr	r0, [r7, #12]
 8007008:	f000 fb14 	bl	8007634 <SPI_EndRxTxTransaction>
 800700c:	4603      	mov	r3, r0
 800700e:	2b00      	cmp	r3, #0
 8007010:	d002      	beq.n	8007018 <HAL_SPI_Transmit+0x284>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	2220      	movs	r2, #32
 8007016:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	689b      	ldr	r3, [r3, #8]
 800701c:	2b00      	cmp	r3, #0
 800701e:	d10a      	bne.n	8007036 <HAL_SPI_Transmit+0x2a2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007020:	2300      	movs	r3, #0
 8007022:	613b      	str	r3, [r7, #16]
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	68db      	ldr	r3, [r3, #12]
 800702a:	613b      	str	r3, [r7, #16]
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	689b      	ldr	r3, [r3, #8]
 8007032:	613b      	str	r3, [r7, #16]
 8007034:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800703a:	2b00      	cmp	r3, #0
 800703c:	d002      	beq.n	8007044 <HAL_SPI_Transmit+0x2b0>
  {
    errorcode = HAL_ERROR;
 800703e:	2301      	movs	r3, #1
 8007040:	77fb      	strb	r3, [r7, #31]
 8007042:	e000      	b.n	8007046 <HAL_SPI_Transmit+0x2b2>
  }

error:
 8007044:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	2201      	movs	r2, #1
 800704a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	2200      	movs	r2, #0
 8007052:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8007056:	7ffb      	ldrb	r3, [r7, #31]
}
 8007058:	4618      	mov	r0, r3
 800705a:	3720      	adds	r7, #32
 800705c:	46bd      	mov	sp, r7
 800705e:	bd80      	pop	{r7, pc}

08007060 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007060:	b580      	push	{r7, lr}
 8007062:	b08a      	sub	sp, #40	; 0x28
 8007064:	af00      	add	r7, sp, #0
 8007066:	60f8      	str	r0, [r7, #12]
 8007068:	60b9      	str	r1, [r7, #8]
 800706a:	607a      	str	r2, [r7, #4]
 800706c:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800706e:	2301      	movs	r3, #1
 8007070:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007072:	2300      	movs	r3, #0
 8007074:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800707e:	2b01      	cmp	r3, #1
 8007080:	d101      	bne.n	8007086 <HAL_SPI_TransmitReceive+0x26>
 8007082:	2302      	movs	r3, #2
 8007084:	e1fb      	b.n	800747e <HAL_SPI_TransmitReceive+0x41e>
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	2201      	movs	r2, #1
 800708a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800708e:	f7fc fc87 	bl	80039a0 <HAL_GetTick>
 8007092:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800709a:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	685b      	ldr	r3, [r3, #4]
 80070a0:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80070a2:	887b      	ldrh	r3, [r7, #2]
 80070a4:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80070a6:	887b      	ldrh	r3, [r7, #2]
 80070a8:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80070aa:	7efb      	ldrb	r3, [r7, #27]
 80070ac:	2b01      	cmp	r3, #1
 80070ae:	d00e      	beq.n	80070ce <HAL_SPI_TransmitReceive+0x6e>
 80070b0:	697b      	ldr	r3, [r7, #20]
 80070b2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80070b6:	d106      	bne.n	80070c6 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	689b      	ldr	r3, [r3, #8]
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d102      	bne.n	80070c6 <HAL_SPI_TransmitReceive+0x66>
 80070c0:	7efb      	ldrb	r3, [r7, #27]
 80070c2:	2b04      	cmp	r3, #4
 80070c4:	d003      	beq.n	80070ce <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80070c6:	2302      	movs	r3, #2
 80070c8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80070cc:	e1cd      	b.n	800746a <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80070ce:	68bb      	ldr	r3, [r7, #8]
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d005      	beq.n	80070e0 <HAL_SPI_TransmitReceive+0x80>
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d002      	beq.n	80070e0 <HAL_SPI_TransmitReceive+0x80>
 80070da:	887b      	ldrh	r3, [r7, #2]
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d103      	bne.n	80070e8 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80070e0:	2301      	movs	r3, #1
 80070e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80070e6:	e1c0      	b.n	800746a <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80070ee:	b2db      	uxtb	r3, r3
 80070f0:	2b04      	cmp	r3, #4
 80070f2:	d003      	beq.n	80070fc <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	2205      	movs	r2, #5
 80070f8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	2200      	movs	r2, #0
 8007100:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	687a      	ldr	r2, [r7, #4]
 8007106:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	887a      	ldrh	r2, [r7, #2]
 800710c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	887a      	ldrh	r2, [r7, #2]
 8007114:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	68ba      	ldr	r2, [r7, #8]
 800711c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	887a      	ldrh	r2, [r7, #2]
 8007122:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	887a      	ldrh	r2, [r7, #2]
 8007128:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	2200      	movs	r2, #0
 800712e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	2200      	movs	r2, #0
 8007134:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	68db      	ldr	r3, [r3, #12]
 800713a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800713e:	d802      	bhi.n	8007146 <HAL_SPI_TransmitReceive+0xe6>
 8007140:	8a3b      	ldrh	r3, [r7, #16]
 8007142:	2b01      	cmp	r3, #1
 8007144:	d908      	bls.n	8007158 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	685a      	ldr	r2, [r3, #4]
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007154:	605a      	str	r2, [r3, #4]
 8007156:	e007      	b.n	8007168 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	685a      	ldr	r2, [r3, #4]
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007166:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007172:	2b40      	cmp	r3, #64	; 0x40
 8007174:	d007      	beq.n	8007186 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	681a      	ldr	r2, [r3, #0]
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007184:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	68db      	ldr	r3, [r3, #12]
 800718a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800718e:	d97c      	bls.n	800728a <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	685b      	ldr	r3, [r3, #4]
 8007194:	2b00      	cmp	r3, #0
 8007196:	d002      	beq.n	800719e <HAL_SPI_TransmitReceive+0x13e>
 8007198:	8a7b      	ldrh	r3, [r7, #18]
 800719a:	2b01      	cmp	r3, #1
 800719c:	d169      	bne.n	8007272 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071a2:	881a      	ldrh	r2, [r3, #0]
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071ae:	1c9a      	adds	r2, r3, #2
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80071b8:	b29b      	uxth	r3, r3
 80071ba:	3b01      	subs	r3, #1
 80071bc:	b29a      	uxth	r2, r3
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80071c2:	e056      	b.n	8007272 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	689b      	ldr	r3, [r3, #8]
 80071ca:	f003 0302 	and.w	r3, r3, #2
 80071ce:	2b02      	cmp	r3, #2
 80071d0:	d11b      	bne.n	800720a <HAL_SPI_TransmitReceive+0x1aa>
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80071d6:	b29b      	uxth	r3, r3
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d016      	beq.n	800720a <HAL_SPI_TransmitReceive+0x1aa>
 80071dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071de:	2b01      	cmp	r3, #1
 80071e0:	d113      	bne.n	800720a <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071e6:	881a      	ldrh	r2, [r3, #0]
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071f2:	1c9a      	adds	r2, r3, #2
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80071fc:	b29b      	uxth	r3, r3
 80071fe:	3b01      	subs	r3, #1
 8007200:	b29a      	uxth	r2, r3
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007206:	2300      	movs	r3, #0
 8007208:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	689b      	ldr	r3, [r3, #8]
 8007210:	f003 0301 	and.w	r3, r3, #1
 8007214:	2b01      	cmp	r3, #1
 8007216:	d11c      	bne.n	8007252 <HAL_SPI_TransmitReceive+0x1f2>
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800721e:	b29b      	uxth	r3, r3
 8007220:	2b00      	cmp	r3, #0
 8007222:	d016      	beq.n	8007252 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	68da      	ldr	r2, [r3, #12]
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800722e:	b292      	uxth	r2, r2
 8007230:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007236:	1c9a      	adds	r2, r3, #2
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007242:	b29b      	uxth	r3, r3
 8007244:	3b01      	subs	r3, #1
 8007246:	b29a      	uxth	r2, r3
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800724e:	2301      	movs	r3, #1
 8007250:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007252:	f7fc fba5 	bl	80039a0 <HAL_GetTick>
 8007256:	4602      	mov	r2, r0
 8007258:	69fb      	ldr	r3, [r7, #28]
 800725a:	1ad3      	subs	r3, r2, r3
 800725c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800725e:	429a      	cmp	r2, r3
 8007260:	d807      	bhi.n	8007272 <HAL_SPI_TransmitReceive+0x212>
 8007262:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007264:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007268:	d003      	beq.n	8007272 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 800726a:	2303      	movs	r3, #3
 800726c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8007270:	e0fb      	b.n	800746a <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007276:	b29b      	uxth	r3, r3
 8007278:	2b00      	cmp	r3, #0
 800727a:	d1a3      	bne.n	80071c4 <HAL_SPI_TransmitReceive+0x164>
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007282:	b29b      	uxth	r3, r3
 8007284:	2b00      	cmp	r3, #0
 8007286:	d19d      	bne.n	80071c4 <HAL_SPI_TransmitReceive+0x164>
 8007288:	e0df      	b.n	800744a <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	685b      	ldr	r3, [r3, #4]
 800728e:	2b00      	cmp	r3, #0
 8007290:	d003      	beq.n	800729a <HAL_SPI_TransmitReceive+0x23a>
 8007292:	8a7b      	ldrh	r3, [r7, #18]
 8007294:	2b01      	cmp	r3, #1
 8007296:	f040 80cb 	bne.w	8007430 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800729e:	b29b      	uxth	r3, r3
 80072a0:	2b01      	cmp	r3, #1
 80072a2:	d912      	bls.n	80072ca <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072a8:	881a      	ldrh	r2, [r3, #0]
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072b4:	1c9a      	adds	r2, r3, #2
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80072be:	b29b      	uxth	r3, r3
 80072c0:	3b02      	subs	r3, #2
 80072c2:	b29a      	uxth	r2, r3
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80072c8:	e0b2      	b.n	8007430 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	330c      	adds	r3, #12
 80072d4:	7812      	ldrb	r2, [r2, #0]
 80072d6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072dc:	1c5a      	adds	r2, r3, #1
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80072e6:	b29b      	uxth	r3, r3
 80072e8:	3b01      	subs	r3, #1
 80072ea:	b29a      	uxth	r2, r3
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80072f0:	e09e      	b.n	8007430 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	689b      	ldr	r3, [r3, #8]
 80072f8:	f003 0302 	and.w	r3, r3, #2
 80072fc:	2b02      	cmp	r3, #2
 80072fe:	d134      	bne.n	800736a <HAL_SPI_TransmitReceive+0x30a>
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007304:	b29b      	uxth	r3, r3
 8007306:	2b00      	cmp	r3, #0
 8007308:	d02f      	beq.n	800736a <HAL_SPI_TransmitReceive+0x30a>
 800730a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800730c:	2b01      	cmp	r3, #1
 800730e:	d12c      	bne.n	800736a <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007314:	b29b      	uxth	r3, r3
 8007316:	2b01      	cmp	r3, #1
 8007318:	d912      	bls.n	8007340 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800731e:	881a      	ldrh	r2, [r3, #0]
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800732a:	1c9a      	adds	r2, r3, #2
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007334:	b29b      	uxth	r3, r3
 8007336:	3b02      	subs	r3, #2
 8007338:	b29a      	uxth	r2, r3
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800733e:	e012      	b.n	8007366 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	330c      	adds	r3, #12
 800734a:	7812      	ldrb	r2, [r2, #0]
 800734c:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007352:	1c5a      	adds	r2, r3, #1
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800735c:	b29b      	uxth	r3, r3
 800735e:	3b01      	subs	r3, #1
 8007360:	b29a      	uxth	r2, r3
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007366:	2300      	movs	r3, #0
 8007368:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	689b      	ldr	r3, [r3, #8]
 8007370:	f003 0301 	and.w	r3, r3, #1
 8007374:	2b01      	cmp	r3, #1
 8007376:	d148      	bne.n	800740a <HAL_SPI_TransmitReceive+0x3aa>
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800737e:	b29b      	uxth	r3, r3
 8007380:	2b00      	cmp	r3, #0
 8007382:	d042      	beq.n	800740a <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800738a:	b29b      	uxth	r3, r3
 800738c:	2b01      	cmp	r3, #1
 800738e:	d923      	bls.n	80073d8 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	68da      	ldr	r2, [r3, #12]
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800739a:	b292      	uxth	r2, r2
 800739c:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073a2:	1c9a      	adds	r2, r3, #2
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80073ae:	b29b      	uxth	r3, r3
 80073b0:	3b02      	subs	r3, #2
 80073b2:	b29a      	uxth	r2, r3
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80073c0:	b29b      	uxth	r3, r3
 80073c2:	2b01      	cmp	r3, #1
 80073c4:	d81f      	bhi.n	8007406 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	685a      	ldr	r2, [r3, #4]
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80073d4:	605a      	str	r2, [r3, #4]
 80073d6:	e016      	b.n	8007406 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	f103 020c 	add.w	r2, r3, #12
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073e4:	7812      	ldrb	r2, [r2, #0]
 80073e6:	b2d2      	uxtb	r2, r2
 80073e8:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073ee:	1c5a      	adds	r2, r3, #1
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80073fa:	b29b      	uxth	r3, r3
 80073fc:	3b01      	subs	r3, #1
 80073fe:	b29a      	uxth	r2, r3
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007406:	2301      	movs	r3, #1
 8007408:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800740a:	f7fc fac9 	bl	80039a0 <HAL_GetTick>
 800740e:	4602      	mov	r2, r0
 8007410:	69fb      	ldr	r3, [r7, #28]
 8007412:	1ad3      	subs	r3, r2, r3
 8007414:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007416:	429a      	cmp	r2, r3
 8007418:	d803      	bhi.n	8007422 <HAL_SPI_TransmitReceive+0x3c2>
 800741a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800741c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007420:	d102      	bne.n	8007428 <HAL_SPI_TransmitReceive+0x3c8>
 8007422:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007424:	2b00      	cmp	r3, #0
 8007426:	d103      	bne.n	8007430 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8007428:	2303      	movs	r3, #3
 800742a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800742e:	e01c      	b.n	800746a <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007434:	b29b      	uxth	r3, r3
 8007436:	2b00      	cmp	r3, #0
 8007438:	f47f af5b 	bne.w	80072f2 <HAL_SPI_TransmitReceive+0x292>
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007442:	b29b      	uxth	r3, r3
 8007444:	2b00      	cmp	r3, #0
 8007446:	f47f af54 	bne.w	80072f2 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800744a:	69fa      	ldr	r2, [r7, #28]
 800744c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800744e:	68f8      	ldr	r0, [r7, #12]
 8007450:	f000 f8f0 	bl	8007634 <SPI_EndRxTxTransaction>
 8007454:	4603      	mov	r3, r0
 8007456:	2b00      	cmp	r3, #0
 8007458:	d006      	beq.n	8007468 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 800745a:	2301      	movs	r3, #1
 800745c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	2220      	movs	r2, #32
 8007464:	661a      	str	r2, [r3, #96]	; 0x60
 8007466:	e000      	b.n	800746a <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8007468:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	2201      	movs	r2, #1
 800746e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	2200      	movs	r2, #0
 8007476:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800747a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800747e:	4618      	mov	r0, r3
 8007480:	3728      	adds	r7, #40	; 0x28
 8007482:	46bd      	mov	sp, r7
 8007484:	bd80      	pop	{r7, pc}

08007486 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007486:	b580      	push	{r7, lr}
 8007488:	b084      	sub	sp, #16
 800748a:	af00      	add	r7, sp, #0
 800748c:	60f8      	str	r0, [r7, #12]
 800748e:	60b9      	str	r1, [r7, #8]
 8007490:	603b      	str	r3, [r7, #0]
 8007492:	4613      	mov	r3, r2
 8007494:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007496:	e04c      	b.n	8007532 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007498:	683b      	ldr	r3, [r7, #0]
 800749a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800749e:	d048      	beq.n	8007532 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80074a0:	f7fc fa7e 	bl	80039a0 <HAL_GetTick>
 80074a4:	4602      	mov	r2, r0
 80074a6:	69bb      	ldr	r3, [r7, #24]
 80074a8:	1ad3      	subs	r3, r2, r3
 80074aa:	683a      	ldr	r2, [r7, #0]
 80074ac:	429a      	cmp	r2, r3
 80074ae:	d902      	bls.n	80074b6 <SPI_WaitFlagStateUntilTimeout+0x30>
 80074b0:	683b      	ldr	r3, [r7, #0]
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d13d      	bne.n	8007532 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	685a      	ldr	r2, [r3, #4]
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80074c4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	685b      	ldr	r3, [r3, #4]
 80074ca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80074ce:	d111      	bne.n	80074f4 <SPI_WaitFlagStateUntilTimeout+0x6e>
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	689b      	ldr	r3, [r3, #8]
 80074d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80074d8:	d004      	beq.n	80074e4 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	689b      	ldr	r3, [r3, #8]
 80074de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80074e2:	d107      	bne.n	80074f4 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	681a      	ldr	r2, [r3, #0]
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80074f2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80074fc:	d10f      	bne.n	800751e <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	681a      	ldr	r2, [r3, #0]
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800750c:	601a      	str	r2, [r3, #0]
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	681a      	ldr	r2, [r3, #0]
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800751c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	2201      	movs	r2, #1
 8007522:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	2200      	movs	r2, #0
 800752a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800752e:	2303      	movs	r3, #3
 8007530:	e00f      	b.n	8007552 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	689a      	ldr	r2, [r3, #8]
 8007538:	68bb      	ldr	r3, [r7, #8]
 800753a:	4013      	ands	r3, r2
 800753c:	68ba      	ldr	r2, [r7, #8]
 800753e:	429a      	cmp	r2, r3
 8007540:	bf0c      	ite	eq
 8007542:	2301      	moveq	r3, #1
 8007544:	2300      	movne	r3, #0
 8007546:	b2db      	uxtb	r3, r3
 8007548:	461a      	mov	r2, r3
 800754a:	79fb      	ldrb	r3, [r7, #7]
 800754c:	429a      	cmp	r2, r3
 800754e:	d1a3      	bne.n	8007498 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8007550:	2300      	movs	r3, #0
}
 8007552:	4618      	mov	r0, r3
 8007554:	3710      	adds	r7, #16
 8007556:	46bd      	mov	sp, r7
 8007558:	bd80      	pop	{r7, pc}

0800755a <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800755a:	b580      	push	{r7, lr}
 800755c:	b084      	sub	sp, #16
 800755e:	af00      	add	r7, sp, #0
 8007560:	60f8      	str	r0, [r7, #12]
 8007562:	60b9      	str	r1, [r7, #8]
 8007564:	607a      	str	r2, [r7, #4]
 8007566:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 8007568:	e057      	b.n	800761a <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800756a:	68bb      	ldr	r3, [r7, #8]
 800756c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8007570:	d106      	bne.n	8007580 <SPI_WaitFifoStateUntilTimeout+0x26>
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	2b00      	cmp	r3, #0
 8007576:	d103      	bne.n	8007580 <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	330c      	adds	r3, #12
 800757e:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8007580:	683b      	ldr	r3, [r7, #0]
 8007582:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007586:	d048      	beq.n	800761a <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8007588:	f7fc fa0a 	bl	80039a0 <HAL_GetTick>
 800758c:	4602      	mov	r2, r0
 800758e:	69bb      	ldr	r3, [r7, #24]
 8007590:	1ad3      	subs	r3, r2, r3
 8007592:	683a      	ldr	r2, [r7, #0]
 8007594:	429a      	cmp	r2, r3
 8007596:	d902      	bls.n	800759e <SPI_WaitFifoStateUntilTimeout+0x44>
 8007598:	683b      	ldr	r3, [r7, #0]
 800759a:	2b00      	cmp	r3, #0
 800759c:	d13d      	bne.n	800761a <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	685a      	ldr	r2, [r3, #4]
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80075ac:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	685b      	ldr	r3, [r3, #4]
 80075b2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80075b6:	d111      	bne.n	80075dc <SPI_WaitFifoStateUntilTimeout+0x82>
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	689b      	ldr	r3, [r3, #8]
 80075bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80075c0:	d004      	beq.n	80075cc <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	689b      	ldr	r3, [r3, #8]
 80075c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80075ca:	d107      	bne.n	80075dc <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	681a      	ldr	r2, [r3, #0]
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80075da:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80075e4:	d10f      	bne.n	8007606 <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	681a      	ldr	r2, [r3, #0]
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80075f4:	601a      	str	r2, [r3, #0]
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	681a      	ldr	r2, [r3, #0]
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007604:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	2201      	movs	r2, #1
 800760a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	2200      	movs	r2, #0
 8007612:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8007616:	2303      	movs	r3, #3
 8007618:	e008      	b.n	800762c <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	689a      	ldr	r2, [r3, #8]
 8007620:	68bb      	ldr	r3, [r7, #8]
 8007622:	4013      	ands	r3, r2
 8007624:	687a      	ldr	r2, [r7, #4]
 8007626:	429a      	cmp	r2, r3
 8007628:	d19f      	bne.n	800756a <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 800762a:	2300      	movs	r3, #0
}
 800762c:	4618      	mov	r0, r3
 800762e:	3710      	adds	r7, #16
 8007630:	46bd      	mov	sp, r7
 8007632:	bd80      	pop	{r7, pc}

08007634 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007634:	b580      	push	{r7, lr}
 8007636:	b086      	sub	sp, #24
 8007638:	af02      	add	r7, sp, #8
 800763a:	60f8      	str	r0, [r7, #12]
 800763c:	60b9      	str	r1, [r7, #8]
 800763e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	9300      	str	r3, [sp, #0]
 8007644:	68bb      	ldr	r3, [r7, #8]
 8007646:	2200      	movs	r2, #0
 8007648:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800764c:	68f8      	ldr	r0, [r7, #12]
 800764e:	f7ff ff84 	bl	800755a <SPI_WaitFifoStateUntilTimeout>
 8007652:	4603      	mov	r3, r0
 8007654:	2b00      	cmp	r3, #0
 8007656:	d007      	beq.n	8007668 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800765c:	f043 0220 	orr.w	r2, r3, #32
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007664:	2303      	movs	r3, #3
 8007666:	e027      	b.n	80076b8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	9300      	str	r3, [sp, #0]
 800766c:	68bb      	ldr	r3, [r7, #8]
 800766e:	2200      	movs	r2, #0
 8007670:	2180      	movs	r1, #128	; 0x80
 8007672:	68f8      	ldr	r0, [r7, #12]
 8007674:	f7ff ff07 	bl	8007486 <SPI_WaitFlagStateUntilTimeout>
 8007678:	4603      	mov	r3, r0
 800767a:	2b00      	cmp	r3, #0
 800767c:	d007      	beq.n	800768e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007682:	f043 0220 	orr.w	r2, r3, #32
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800768a:	2303      	movs	r3, #3
 800768c:	e014      	b.n	80076b8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	9300      	str	r3, [sp, #0]
 8007692:	68bb      	ldr	r3, [r7, #8]
 8007694:	2200      	movs	r2, #0
 8007696:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800769a:	68f8      	ldr	r0, [r7, #12]
 800769c:	f7ff ff5d 	bl	800755a <SPI_WaitFifoStateUntilTimeout>
 80076a0:	4603      	mov	r3, r0
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d007      	beq.n	80076b6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80076aa:	f043 0220 	orr.w	r2, r3, #32
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80076b2:	2303      	movs	r3, #3
 80076b4:	e000      	b.n	80076b8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80076b6:	2300      	movs	r3, #0
}
 80076b8:	4618      	mov	r0, r3
 80076ba:	3710      	adds	r7, #16
 80076bc:	46bd      	mov	sp, r7
 80076be:	bd80      	pop	{r7, pc}

080076c0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80076c0:	b580      	push	{r7, lr}
 80076c2:	b082      	sub	sp, #8
 80076c4:	af00      	add	r7, sp, #0
 80076c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d101      	bne.n	80076d2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80076ce:	2301      	movs	r3, #1
 80076d0:	e01d      	b.n	800770e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80076d8:	b2db      	uxtb	r3, r3
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d106      	bne.n	80076ec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	2200      	movs	r2, #0
 80076e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80076e6:	6878      	ldr	r0, [r7, #4]
 80076e8:	f7fb ff76 	bl	80035d8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	2202      	movs	r2, #2
 80076f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681a      	ldr	r2, [r3, #0]
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	3304      	adds	r3, #4
 80076fc:	4619      	mov	r1, r3
 80076fe:	4610      	mov	r0, r2
 8007700:	f000 fcd6 	bl	80080b0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	2201      	movs	r2, #1
 8007708:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800770c:	2300      	movs	r3, #0
}
 800770e:	4618      	mov	r0, r3
 8007710:	3708      	adds	r7, #8
 8007712:	46bd      	mov	sp, r7
 8007714:	bd80      	pop	{r7, pc}
	...

08007718 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007718:	b480      	push	{r7}
 800771a:	b085      	sub	sp, #20
 800771c:	af00      	add	r7, sp, #0
 800771e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	68da      	ldr	r2, [r3, #12]
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	f042 0201 	orr.w	r2, r2, #1
 800772e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	689a      	ldr	r2, [r3, #8]
 8007736:	4b0c      	ldr	r3, [pc, #48]	; (8007768 <HAL_TIM_Base_Start_IT+0x50>)
 8007738:	4013      	ands	r3, r2
 800773a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	2b06      	cmp	r3, #6
 8007740:	d00b      	beq.n	800775a <HAL_TIM_Base_Start_IT+0x42>
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007748:	d007      	beq.n	800775a <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	681a      	ldr	r2, [r3, #0]
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	f042 0201 	orr.w	r2, r2, #1
 8007758:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800775a:	2300      	movs	r3, #0
}
 800775c:	4618      	mov	r0, r3
 800775e:	3714      	adds	r7, #20
 8007760:	46bd      	mov	sp, r7
 8007762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007766:	4770      	bx	lr
 8007768:	00010007 	.word	0x00010007

0800776c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800776c:	b580      	push	{r7, lr}
 800776e:	b082      	sub	sp, #8
 8007770:	af00      	add	r7, sp, #0
 8007772:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	2b00      	cmp	r3, #0
 8007778:	d101      	bne.n	800777e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800777a:	2301      	movs	r3, #1
 800777c:	e01d      	b.n	80077ba <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007784:	b2db      	uxtb	r3, r3
 8007786:	2b00      	cmp	r3, #0
 8007788:	d106      	bne.n	8007798 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	2200      	movs	r2, #0
 800778e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007792:	6878      	ldr	r0, [r7, #4]
 8007794:	f000 f815 	bl	80077c2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	2202      	movs	r2, #2
 800779c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681a      	ldr	r2, [r3, #0]
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	3304      	adds	r3, #4
 80077a8:	4619      	mov	r1, r3
 80077aa:	4610      	mov	r0, r2
 80077ac:	f000 fc80 	bl	80080b0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	2201      	movs	r2, #1
 80077b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80077b8:	2300      	movs	r3, #0
}
 80077ba:	4618      	mov	r0, r3
 80077bc:	3708      	adds	r7, #8
 80077be:	46bd      	mov	sp, r7
 80077c0:	bd80      	pop	{r7, pc}

080077c2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80077c2:	b480      	push	{r7}
 80077c4:	b083      	sub	sp, #12
 80077c6:	af00      	add	r7, sp, #0
 80077c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80077ca:	bf00      	nop
 80077cc:	370c      	adds	r7, #12
 80077ce:	46bd      	mov	sp, r7
 80077d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d4:	4770      	bx	lr
	...

080077d8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80077d8:	b580      	push	{r7, lr}
 80077da:	b084      	sub	sp, #16
 80077dc:	af00      	add	r7, sp, #0
 80077de:	6078      	str	r0, [r7, #4]
 80077e0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	2201      	movs	r2, #1
 80077e8:	6839      	ldr	r1, [r7, #0]
 80077ea:	4618      	mov	r0, r3
 80077ec:	f000 fff8 	bl	80087e0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	4a17      	ldr	r2, [pc, #92]	; (8007854 <HAL_TIM_PWM_Start+0x7c>)
 80077f6:	4293      	cmp	r3, r2
 80077f8:	d004      	beq.n	8007804 <HAL_TIM_PWM_Start+0x2c>
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	4a16      	ldr	r2, [pc, #88]	; (8007858 <HAL_TIM_PWM_Start+0x80>)
 8007800:	4293      	cmp	r3, r2
 8007802:	d101      	bne.n	8007808 <HAL_TIM_PWM_Start+0x30>
 8007804:	2301      	movs	r3, #1
 8007806:	e000      	b.n	800780a <HAL_TIM_PWM_Start+0x32>
 8007808:	2300      	movs	r3, #0
 800780a:	2b00      	cmp	r3, #0
 800780c:	d007      	beq.n	800781e <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800781c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	689a      	ldr	r2, [r3, #8]
 8007824:	4b0d      	ldr	r3, [pc, #52]	; (800785c <HAL_TIM_PWM_Start+0x84>)
 8007826:	4013      	ands	r3, r2
 8007828:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	2b06      	cmp	r3, #6
 800782e:	d00b      	beq.n	8007848 <HAL_TIM_PWM_Start+0x70>
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007836:	d007      	beq.n	8007848 <HAL_TIM_PWM_Start+0x70>
  {
    __HAL_TIM_ENABLE(htim);
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	681a      	ldr	r2, [r3, #0]
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	f042 0201 	orr.w	r2, r2, #1
 8007846:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007848:	2300      	movs	r3, #0
}
 800784a:	4618      	mov	r0, r3
 800784c:	3710      	adds	r7, #16
 800784e:	46bd      	mov	sp, r7
 8007850:	bd80      	pop	{r7, pc}
 8007852:	bf00      	nop
 8007854:	40010000 	.word	0x40010000
 8007858:	40010400 	.word	0x40010400
 800785c:	00010007 	.word	0x00010007

08007860 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8007860:	b580      	push	{r7, lr}
 8007862:	b082      	sub	sp, #8
 8007864:	af00      	add	r7, sp, #0
 8007866:	6078      	str	r0, [r7, #4]
 8007868:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	2b00      	cmp	r3, #0
 800786e:	d101      	bne.n	8007874 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8007870:	2301      	movs	r3, #1
 8007872:	e02d      	b.n	80078d0 <HAL_TIM_OnePulse_Init+0x70>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800787a:	b2db      	uxtb	r3, r3
 800787c:	2b00      	cmp	r3, #0
 800787e:	d106      	bne.n	800788e <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	2200      	movs	r2, #0
 8007884:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 8007888:	6878      	ldr	r0, [r7, #4]
 800788a:	f000 f825 	bl	80078d8 <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	2202      	movs	r2, #2
 8007892:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681a      	ldr	r2, [r3, #0]
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	3304      	adds	r3, #4
 800789e:	4619      	mov	r1, r3
 80078a0:	4610      	mov	r0, r2
 80078a2:	f000 fc05 	bl	80080b0 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	681a      	ldr	r2, [r3, #0]
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	f022 0208 	bic.w	r2, r2, #8
 80078b4:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	6819      	ldr	r1, [r3, #0]
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	683a      	ldr	r2, [r7, #0]
 80078c2:	430a      	orrs	r2, r1
 80078c4:	601a      	str	r2, [r3, #0]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	2201      	movs	r2, #1
 80078ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80078ce:	2300      	movs	r3, #0
}
 80078d0:	4618      	mov	r0, r3
 80078d2:	3708      	adds	r7, #8
 80078d4:	46bd      	mov	sp, r7
 80078d6:	bd80      	pop	{r7, pc}

080078d8 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 80078d8:	b480      	push	{r7}
 80078da:	b083      	sub	sp, #12
 80078dc:	af00      	add	r7, sp, #0
 80078de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 80078e0:	bf00      	nop
 80078e2:	370c      	adds	r7, #12
 80078e4:	46bd      	mov	sp, r7
 80078e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ea:	4770      	bx	lr

080078ec <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80078ec:	b580      	push	{r7, lr}
 80078ee:	b086      	sub	sp, #24
 80078f0:	af00      	add	r7, sp, #0
 80078f2:	6078      	str	r0, [r7, #4]
 80078f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d101      	bne.n	8007900 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80078fc:	2301      	movs	r3, #1
 80078fe:	e07b      	b.n	80079f8 <HAL_TIM_Encoder_Init+0x10c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007906:	b2db      	uxtb	r3, r3
 8007908:	2b00      	cmp	r3, #0
 800790a:	d106      	bne.n	800791a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	2200      	movs	r2, #0
 8007910:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8007914:	6878      	ldr	r0, [r7, #4]
 8007916:	f7fb feb3 	bl	8003680 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	2202      	movs	r2, #2
 800791e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	6899      	ldr	r1, [r3, #8]
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681a      	ldr	r2, [r3, #0]
 800792c:	4b34      	ldr	r3, [pc, #208]	; (8007a00 <HAL_TIM_Encoder_Init+0x114>)
 800792e:	400b      	ands	r3, r1
 8007930:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681a      	ldr	r2, [r3, #0]
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	3304      	adds	r3, #4
 800793a:	4619      	mov	r1, r3
 800793c:	4610      	mov	r0, r2
 800793e:	f000 fbb7 	bl	80080b0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	689b      	ldr	r3, [r3, #8]
 8007948:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	699b      	ldr	r3, [r3, #24]
 8007950:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	6a1b      	ldr	r3, [r3, #32]
 8007958:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800795a:	683b      	ldr	r3, [r7, #0]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	697a      	ldr	r2, [r7, #20]
 8007960:	4313      	orrs	r3, r2
 8007962:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8007964:	693a      	ldr	r2, [r7, #16]
 8007966:	4b27      	ldr	r3, [pc, #156]	; (8007a04 <HAL_TIM_Encoder_Init+0x118>)
 8007968:	4013      	ands	r3, r2
 800796a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800796c:	683b      	ldr	r3, [r7, #0]
 800796e:	689a      	ldr	r2, [r3, #8]
 8007970:	683b      	ldr	r3, [r7, #0]
 8007972:	699b      	ldr	r3, [r3, #24]
 8007974:	021b      	lsls	r3, r3, #8
 8007976:	4313      	orrs	r3, r2
 8007978:	693a      	ldr	r2, [r7, #16]
 800797a:	4313      	orrs	r3, r2
 800797c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800797e:	693a      	ldr	r2, [r7, #16]
 8007980:	4b21      	ldr	r3, [pc, #132]	; (8007a08 <HAL_TIM_Encoder_Init+0x11c>)
 8007982:	4013      	ands	r3, r2
 8007984:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8007986:	693a      	ldr	r2, [r7, #16]
 8007988:	4b20      	ldr	r3, [pc, #128]	; (8007a0c <HAL_TIM_Encoder_Init+0x120>)
 800798a:	4013      	ands	r3, r2
 800798c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800798e:	683b      	ldr	r3, [r7, #0]
 8007990:	68da      	ldr	r2, [r3, #12]
 8007992:	683b      	ldr	r3, [r7, #0]
 8007994:	69db      	ldr	r3, [r3, #28]
 8007996:	021b      	lsls	r3, r3, #8
 8007998:	4313      	orrs	r3, r2
 800799a:	693a      	ldr	r2, [r7, #16]
 800799c:	4313      	orrs	r3, r2
 800799e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80079a0:	683b      	ldr	r3, [r7, #0]
 80079a2:	691b      	ldr	r3, [r3, #16]
 80079a4:	011a      	lsls	r2, r3, #4
 80079a6:	683b      	ldr	r3, [r7, #0]
 80079a8:	6a1b      	ldr	r3, [r3, #32]
 80079aa:	031b      	lsls	r3, r3, #12
 80079ac:	4313      	orrs	r3, r2
 80079ae:	693a      	ldr	r2, [r7, #16]
 80079b0:	4313      	orrs	r3, r2
 80079b2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80079ba:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80079c2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80079c4:	683b      	ldr	r3, [r7, #0]
 80079c6:	685a      	ldr	r2, [r3, #4]
 80079c8:	683b      	ldr	r3, [r7, #0]
 80079ca:	695b      	ldr	r3, [r3, #20]
 80079cc:	011b      	lsls	r3, r3, #4
 80079ce:	4313      	orrs	r3, r2
 80079d0:	68fa      	ldr	r2, [r7, #12]
 80079d2:	4313      	orrs	r3, r2
 80079d4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	697a      	ldr	r2, [r7, #20]
 80079dc:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	693a      	ldr	r2, [r7, #16]
 80079e4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	68fa      	ldr	r2, [r7, #12]
 80079ec:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	2201      	movs	r2, #1
 80079f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80079f6:	2300      	movs	r3, #0
}
 80079f8:	4618      	mov	r0, r3
 80079fa:	3718      	adds	r7, #24
 80079fc:	46bd      	mov	sp, r7
 80079fe:	bd80      	pop	{r7, pc}
 8007a00:	fffebff8 	.word	0xfffebff8
 8007a04:	fffffcfc 	.word	0xfffffcfc
 8007a08:	fffff3f3 	.word	0xfffff3f3
 8007a0c:	ffff0f0f 	.word	0xffff0f0f

08007a10 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007a10:	b580      	push	{r7, lr}
 8007a12:	b082      	sub	sp, #8
 8007a14:	af00      	add	r7, sp, #0
 8007a16:	6078      	str	r0, [r7, #4]
 8007a18:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 8007a1a:	683b      	ldr	r3, [r7, #0]
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d002      	beq.n	8007a26 <HAL_TIM_Encoder_Start+0x16>
 8007a20:	2b04      	cmp	r3, #4
 8007a22:	d008      	beq.n	8007a36 <HAL_TIM_Encoder_Start+0x26>
 8007a24:	e00f      	b.n	8007a46 <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	2201      	movs	r2, #1
 8007a2c:	2100      	movs	r1, #0
 8007a2e:	4618      	mov	r0, r3
 8007a30:	f000 fed6 	bl	80087e0 <TIM_CCxChannelCmd>
      break;
 8007a34:	e016      	b.n	8007a64 <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	2201      	movs	r2, #1
 8007a3c:	2104      	movs	r1, #4
 8007a3e:	4618      	mov	r0, r3
 8007a40:	f000 fece 	bl	80087e0 <TIM_CCxChannelCmd>
      break;
 8007a44:	e00e      	b.n	8007a64 <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	2201      	movs	r2, #1
 8007a4c:	2100      	movs	r1, #0
 8007a4e:	4618      	mov	r0, r3
 8007a50:	f000 fec6 	bl	80087e0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	2201      	movs	r2, #1
 8007a5a:	2104      	movs	r1, #4
 8007a5c:	4618      	mov	r0, r3
 8007a5e:	f000 febf 	bl	80087e0 <TIM_CCxChannelCmd>
      break;
 8007a62:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	681a      	ldr	r2, [r3, #0]
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	f042 0201 	orr.w	r2, r2, #1
 8007a72:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8007a74:	2300      	movs	r3, #0
}
 8007a76:	4618      	mov	r0, r3
 8007a78:	3708      	adds	r7, #8
 8007a7a:	46bd      	mov	sp, r7
 8007a7c:	bd80      	pop	{r7, pc}

08007a7e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007a7e:	b580      	push	{r7, lr}
 8007a80:	b082      	sub	sp, #8
 8007a82:	af00      	add	r7, sp, #0
 8007a84:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	691b      	ldr	r3, [r3, #16]
 8007a8c:	f003 0302 	and.w	r3, r3, #2
 8007a90:	2b02      	cmp	r3, #2
 8007a92:	d122      	bne.n	8007ada <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	68db      	ldr	r3, [r3, #12]
 8007a9a:	f003 0302 	and.w	r3, r3, #2
 8007a9e:	2b02      	cmp	r3, #2
 8007aa0:	d11b      	bne.n	8007ada <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	f06f 0202 	mvn.w	r2, #2
 8007aaa:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	2201      	movs	r2, #1
 8007ab0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	699b      	ldr	r3, [r3, #24]
 8007ab8:	f003 0303 	and.w	r3, r3, #3
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d003      	beq.n	8007ac8 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007ac0:	6878      	ldr	r0, [r7, #4]
 8007ac2:	f000 fad7 	bl	8008074 <HAL_TIM_IC_CaptureCallback>
 8007ac6:	e005      	b.n	8007ad4 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007ac8:	6878      	ldr	r0, [r7, #4]
 8007aca:	f000 fac9 	bl	8008060 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007ace:	6878      	ldr	r0, [r7, #4]
 8007ad0:	f000 fada 	bl	8008088 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	2200      	movs	r2, #0
 8007ad8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	691b      	ldr	r3, [r3, #16]
 8007ae0:	f003 0304 	and.w	r3, r3, #4
 8007ae4:	2b04      	cmp	r3, #4
 8007ae6:	d122      	bne.n	8007b2e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	68db      	ldr	r3, [r3, #12]
 8007aee:	f003 0304 	and.w	r3, r3, #4
 8007af2:	2b04      	cmp	r3, #4
 8007af4:	d11b      	bne.n	8007b2e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	f06f 0204 	mvn.w	r2, #4
 8007afe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	2202      	movs	r2, #2
 8007b04:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	699b      	ldr	r3, [r3, #24]
 8007b0c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d003      	beq.n	8007b1c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007b14:	6878      	ldr	r0, [r7, #4]
 8007b16:	f000 faad 	bl	8008074 <HAL_TIM_IC_CaptureCallback>
 8007b1a:	e005      	b.n	8007b28 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007b1c:	6878      	ldr	r0, [r7, #4]
 8007b1e:	f000 fa9f 	bl	8008060 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007b22:	6878      	ldr	r0, [r7, #4]
 8007b24:	f000 fab0 	bl	8008088 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	2200      	movs	r2, #0
 8007b2c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	691b      	ldr	r3, [r3, #16]
 8007b34:	f003 0308 	and.w	r3, r3, #8
 8007b38:	2b08      	cmp	r3, #8
 8007b3a:	d122      	bne.n	8007b82 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	68db      	ldr	r3, [r3, #12]
 8007b42:	f003 0308 	and.w	r3, r3, #8
 8007b46:	2b08      	cmp	r3, #8
 8007b48:	d11b      	bne.n	8007b82 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	f06f 0208 	mvn.w	r2, #8
 8007b52:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	2204      	movs	r2, #4
 8007b58:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	69db      	ldr	r3, [r3, #28]
 8007b60:	f003 0303 	and.w	r3, r3, #3
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d003      	beq.n	8007b70 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007b68:	6878      	ldr	r0, [r7, #4]
 8007b6a:	f000 fa83 	bl	8008074 <HAL_TIM_IC_CaptureCallback>
 8007b6e:	e005      	b.n	8007b7c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007b70:	6878      	ldr	r0, [r7, #4]
 8007b72:	f000 fa75 	bl	8008060 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007b76:	6878      	ldr	r0, [r7, #4]
 8007b78:	f000 fa86 	bl	8008088 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	2200      	movs	r2, #0
 8007b80:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	691b      	ldr	r3, [r3, #16]
 8007b88:	f003 0310 	and.w	r3, r3, #16
 8007b8c:	2b10      	cmp	r3, #16
 8007b8e:	d122      	bne.n	8007bd6 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	68db      	ldr	r3, [r3, #12]
 8007b96:	f003 0310 	and.w	r3, r3, #16
 8007b9a:	2b10      	cmp	r3, #16
 8007b9c:	d11b      	bne.n	8007bd6 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	f06f 0210 	mvn.w	r2, #16
 8007ba6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	2208      	movs	r2, #8
 8007bac:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	69db      	ldr	r3, [r3, #28]
 8007bb4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d003      	beq.n	8007bc4 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007bbc:	6878      	ldr	r0, [r7, #4]
 8007bbe:	f000 fa59 	bl	8008074 <HAL_TIM_IC_CaptureCallback>
 8007bc2:	e005      	b.n	8007bd0 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007bc4:	6878      	ldr	r0, [r7, #4]
 8007bc6:	f000 fa4b 	bl	8008060 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007bca:	6878      	ldr	r0, [r7, #4]
 8007bcc:	f000 fa5c 	bl	8008088 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	2200      	movs	r2, #0
 8007bd4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	691b      	ldr	r3, [r3, #16]
 8007bdc:	f003 0301 	and.w	r3, r3, #1
 8007be0:	2b01      	cmp	r3, #1
 8007be2:	d10e      	bne.n	8007c02 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	68db      	ldr	r3, [r3, #12]
 8007bea:	f003 0301 	and.w	r3, r3, #1
 8007bee:	2b01      	cmp	r3, #1
 8007bf0:	d107      	bne.n	8007c02 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	f06f 0201 	mvn.w	r2, #1
 8007bfa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007bfc:	6878      	ldr	r0, [r7, #4]
 8007bfe:	f7fa fe6f 	bl	80028e0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	691b      	ldr	r3, [r3, #16]
 8007c08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c0c:	2b80      	cmp	r3, #128	; 0x80
 8007c0e:	d10e      	bne.n	8007c2e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	68db      	ldr	r3, [r3, #12]
 8007c16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c1a:	2b80      	cmp	r3, #128	; 0x80
 8007c1c:	d107      	bne.n	8007c2e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007c26:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007c28:	6878      	ldr	r0, [r7, #4]
 8007c2a:	f000 fe97 	bl	800895c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	691b      	ldr	r3, [r3, #16]
 8007c34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c38:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007c3c:	d10e      	bne.n	8007c5c <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	68db      	ldr	r3, [r3, #12]
 8007c44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c48:	2b80      	cmp	r3, #128	; 0x80
 8007c4a:	d107      	bne.n	8007c5c <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007c54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007c56:	6878      	ldr	r0, [r7, #4]
 8007c58:	f000 fe8a 	bl	8008970 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	691b      	ldr	r3, [r3, #16]
 8007c62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c66:	2b40      	cmp	r3, #64	; 0x40
 8007c68:	d10e      	bne.n	8007c88 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	68db      	ldr	r3, [r3, #12]
 8007c70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c74:	2b40      	cmp	r3, #64	; 0x40
 8007c76:	d107      	bne.n	8007c88 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007c80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007c82:	6878      	ldr	r0, [r7, #4]
 8007c84:	f000 fa0a 	bl	800809c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	691b      	ldr	r3, [r3, #16]
 8007c8e:	f003 0320 	and.w	r3, r3, #32
 8007c92:	2b20      	cmp	r3, #32
 8007c94:	d10e      	bne.n	8007cb4 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	68db      	ldr	r3, [r3, #12]
 8007c9c:	f003 0320 	and.w	r3, r3, #32
 8007ca0:	2b20      	cmp	r3, #32
 8007ca2:	d107      	bne.n	8007cb4 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	f06f 0220 	mvn.w	r2, #32
 8007cac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007cae:	6878      	ldr	r0, [r7, #4]
 8007cb0:	f000 fe4a 	bl	8008948 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007cb4:	bf00      	nop
 8007cb6:	3708      	adds	r7, #8
 8007cb8:	46bd      	mov	sp, r7
 8007cba:	bd80      	pop	{r7, pc}

08007cbc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007cbc:	b580      	push	{r7, lr}
 8007cbe:	b084      	sub	sp, #16
 8007cc0:	af00      	add	r7, sp, #0
 8007cc2:	60f8      	str	r0, [r7, #12]
 8007cc4:	60b9      	str	r1, [r7, #8]
 8007cc6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007cce:	2b01      	cmp	r3, #1
 8007cd0:	d101      	bne.n	8007cd6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8007cd2:	2302      	movs	r3, #2
 8007cd4:	e105      	b.n	8007ee2 <HAL_TIM_PWM_ConfigChannel+0x226>
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	2201      	movs	r2, #1
 8007cda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	2202      	movs	r2, #2
 8007ce2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	2b14      	cmp	r3, #20
 8007cea:	f200 80f0 	bhi.w	8007ece <HAL_TIM_PWM_ConfigChannel+0x212>
 8007cee:	a201      	add	r2, pc, #4	; (adr r2, 8007cf4 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8007cf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cf4:	08007d49 	.word	0x08007d49
 8007cf8:	08007ecf 	.word	0x08007ecf
 8007cfc:	08007ecf 	.word	0x08007ecf
 8007d00:	08007ecf 	.word	0x08007ecf
 8007d04:	08007d89 	.word	0x08007d89
 8007d08:	08007ecf 	.word	0x08007ecf
 8007d0c:	08007ecf 	.word	0x08007ecf
 8007d10:	08007ecf 	.word	0x08007ecf
 8007d14:	08007dcb 	.word	0x08007dcb
 8007d18:	08007ecf 	.word	0x08007ecf
 8007d1c:	08007ecf 	.word	0x08007ecf
 8007d20:	08007ecf 	.word	0x08007ecf
 8007d24:	08007e0b 	.word	0x08007e0b
 8007d28:	08007ecf 	.word	0x08007ecf
 8007d2c:	08007ecf 	.word	0x08007ecf
 8007d30:	08007ecf 	.word	0x08007ecf
 8007d34:	08007e4d 	.word	0x08007e4d
 8007d38:	08007ecf 	.word	0x08007ecf
 8007d3c:	08007ecf 	.word	0x08007ecf
 8007d40:	08007ecf 	.word	0x08007ecf
 8007d44:	08007e8d 	.word	0x08007e8d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	68b9      	ldr	r1, [r7, #8]
 8007d4e:	4618      	mov	r0, r3
 8007d50:	f000 fa4e 	bl	80081f0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	699a      	ldr	r2, [r3, #24]
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	f042 0208 	orr.w	r2, r2, #8
 8007d62:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	699a      	ldr	r2, [r3, #24]
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	f022 0204 	bic.w	r2, r2, #4
 8007d72:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	6999      	ldr	r1, [r3, #24]
 8007d7a:	68bb      	ldr	r3, [r7, #8]
 8007d7c:	691a      	ldr	r2, [r3, #16]
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	430a      	orrs	r2, r1
 8007d84:	619a      	str	r2, [r3, #24]
      break;
 8007d86:	e0a3      	b.n	8007ed0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	68b9      	ldr	r1, [r7, #8]
 8007d8e:	4618      	mov	r0, r3
 8007d90:	f000 faa0 	bl	80082d4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	699a      	ldr	r2, [r3, #24]
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007da2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	699a      	ldr	r2, [r3, #24]
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007db2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	6999      	ldr	r1, [r3, #24]
 8007dba:	68bb      	ldr	r3, [r7, #8]
 8007dbc:	691b      	ldr	r3, [r3, #16]
 8007dbe:	021a      	lsls	r2, r3, #8
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	430a      	orrs	r2, r1
 8007dc6:	619a      	str	r2, [r3, #24]
      break;
 8007dc8:	e082      	b.n	8007ed0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	68b9      	ldr	r1, [r7, #8]
 8007dd0:	4618      	mov	r0, r3
 8007dd2:	f000 faf7 	bl	80083c4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	69da      	ldr	r2, [r3, #28]
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	f042 0208 	orr.w	r2, r2, #8
 8007de4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	69da      	ldr	r2, [r3, #28]
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	f022 0204 	bic.w	r2, r2, #4
 8007df4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	69d9      	ldr	r1, [r3, #28]
 8007dfc:	68bb      	ldr	r3, [r7, #8]
 8007dfe:	691a      	ldr	r2, [r3, #16]
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	430a      	orrs	r2, r1
 8007e06:	61da      	str	r2, [r3, #28]
      break;
 8007e08:	e062      	b.n	8007ed0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	68b9      	ldr	r1, [r7, #8]
 8007e10:	4618      	mov	r0, r3
 8007e12:	f000 fb4d 	bl	80084b0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	69da      	ldr	r2, [r3, #28]
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007e24:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	69da      	ldr	r2, [r3, #28]
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007e34:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	69d9      	ldr	r1, [r3, #28]
 8007e3c:	68bb      	ldr	r3, [r7, #8]
 8007e3e:	691b      	ldr	r3, [r3, #16]
 8007e40:	021a      	lsls	r2, r3, #8
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	430a      	orrs	r2, r1
 8007e48:	61da      	str	r2, [r3, #28]
      break;
 8007e4a:	e041      	b.n	8007ed0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	68b9      	ldr	r1, [r7, #8]
 8007e52:	4618      	mov	r0, r3
 8007e54:	f000 fb84 	bl	8008560 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	f042 0208 	orr.w	r2, r2, #8
 8007e66:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	f022 0204 	bic.w	r2, r2, #4
 8007e76:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007e7e:	68bb      	ldr	r3, [r7, #8]
 8007e80:	691a      	ldr	r2, [r3, #16]
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	430a      	orrs	r2, r1
 8007e88:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007e8a:	e021      	b.n	8007ed0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	68b9      	ldr	r1, [r7, #8]
 8007e92:	4618      	mov	r0, r3
 8007e94:	f000 fbb6 	bl	8008604 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007ea6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007eb6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007ebe:	68bb      	ldr	r3, [r7, #8]
 8007ec0:	691b      	ldr	r3, [r3, #16]
 8007ec2:	021a      	lsls	r2, r3, #8
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	430a      	orrs	r2, r1
 8007eca:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007ecc:	e000      	b.n	8007ed0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 8007ece:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	2201      	movs	r2, #1
 8007ed4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	2200      	movs	r2, #0
 8007edc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007ee0:	2300      	movs	r3, #0
}
 8007ee2:	4618      	mov	r0, r3
 8007ee4:	3710      	adds	r7, #16
 8007ee6:	46bd      	mov	sp, r7
 8007ee8:	bd80      	pop	{r7, pc}
 8007eea:	bf00      	nop

08007eec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007eec:	b580      	push	{r7, lr}
 8007eee:	b084      	sub	sp, #16
 8007ef0:	af00      	add	r7, sp, #0
 8007ef2:	6078      	str	r0, [r7, #4]
 8007ef4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007efc:	2b01      	cmp	r3, #1
 8007efe:	d101      	bne.n	8007f04 <HAL_TIM_ConfigClockSource+0x18>
 8007f00:	2302      	movs	r3, #2
 8007f02:	e0a6      	b.n	8008052 <HAL_TIM_ConfigClockSource+0x166>
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	2201      	movs	r2, #1
 8007f08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	2202      	movs	r2, #2
 8007f10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	689b      	ldr	r3, [r3, #8]
 8007f1a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007f1c:	68fa      	ldr	r2, [r7, #12]
 8007f1e:	4b4f      	ldr	r3, [pc, #316]	; (800805c <HAL_TIM_ConfigClockSource+0x170>)
 8007f20:	4013      	ands	r3, r2
 8007f22:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007f2a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	68fa      	ldr	r2, [r7, #12]
 8007f32:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007f34:	683b      	ldr	r3, [r7, #0]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	2b40      	cmp	r3, #64	; 0x40
 8007f3a:	d067      	beq.n	800800c <HAL_TIM_ConfigClockSource+0x120>
 8007f3c:	2b40      	cmp	r3, #64	; 0x40
 8007f3e:	d80b      	bhi.n	8007f58 <HAL_TIM_ConfigClockSource+0x6c>
 8007f40:	2b10      	cmp	r3, #16
 8007f42:	d073      	beq.n	800802c <HAL_TIM_ConfigClockSource+0x140>
 8007f44:	2b10      	cmp	r3, #16
 8007f46:	d802      	bhi.n	8007f4e <HAL_TIM_ConfigClockSource+0x62>
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d06f      	beq.n	800802c <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8007f4c:	e078      	b.n	8008040 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8007f4e:	2b20      	cmp	r3, #32
 8007f50:	d06c      	beq.n	800802c <HAL_TIM_ConfigClockSource+0x140>
 8007f52:	2b30      	cmp	r3, #48	; 0x30
 8007f54:	d06a      	beq.n	800802c <HAL_TIM_ConfigClockSource+0x140>
      break;
 8007f56:	e073      	b.n	8008040 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8007f58:	2b70      	cmp	r3, #112	; 0x70
 8007f5a:	d00d      	beq.n	8007f78 <HAL_TIM_ConfigClockSource+0x8c>
 8007f5c:	2b70      	cmp	r3, #112	; 0x70
 8007f5e:	d804      	bhi.n	8007f6a <HAL_TIM_ConfigClockSource+0x7e>
 8007f60:	2b50      	cmp	r3, #80	; 0x50
 8007f62:	d033      	beq.n	8007fcc <HAL_TIM_ConfigClockSource+0xe0>
 8007f64:	2b60      	cmp	r3, #96	; 0x60
 8007f66:	d041      	beq.n	8007fec <HAL_TIM_ConfigClockSource+0x100>
      break;
 8007f68:	e06a      	b.n	8008040 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8007f6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f6e:	d066      	beq.n	800803e <HAL_TIM_ConfigClockSource+0x152>
 8007f70:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007f74:	d017      	beq.n	8007fa6 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8007f76:	e063      	b.n	8008040 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	6818      	ldr	r0, [r3, #0]
 8007f7c:	683b      	ldr	r3, [r7, #0]
 8007f7e:	6899      	ldr	r1, [r3, #8]
 8007f80:	683b      	ldr	r3, [r7, #0]
 8007f82:	685a      	ldr	r2, [r3, #4]
 8007f84:	683b      	ldr	r3, [r7, #0]
 8007f86:	68db      	ldr	r3, [r3, #12]
 8007f88:	f000 fc0a 	bl	80087a0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	689b      	ldr	r3, [r3, #8]
 8007f92:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007f9a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	68fa      	ldr	r2, [r7, #12]
 8007fa2:	609a      	str	r2, [r3, #8]
      break;
 8007fa4:	e04c      	b.n	8008040 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	6818      	ldr	r0, [r3, #0]
 8007faa:	683b      	ldr	r3, [r7, #0]
 8007fac:	6899      	ldr	r1, [r3, #8]
 8007fae:	683b      	ldr	r3, [r7, #0]
 8007fb0:	685a      	ldr	r2, [r3, #4]
 8007fb2:	683b      	ldr	r3, [r7, #0]
 8007fb4:	68db      	ldr	r3, [r3, #12]
 8007fb6:	f000 fbf3 	bl	80087a0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	689a      	ldr	r2, [r3, #8]
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007fc8:	609a      	str	r2, [r3, #8]
      break;
 8007fca:	e039      	b.n	8008040 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	6818      	ldr	r0, [r3, #0]
 8007fd0:	683b      	ldr	r3, [r7, #0]
 8007fd2:	6859      	ldr	r1, [r3, #4]
 8007fd4:	683b      	ldr	r3, [r7, #0]
 8007fd6:	68db      	ldr	r3, [r3, #12]
 8007fd8:	461a      	mov	r2, r3
 8007fda:	f000 fb67 	bl	80086ac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	2150      	movs	r1, #80	; 0x50
 8007fe4:	4618      	mov	r0, r3
 8007fe6:	f000 fbc0 	bl	800876a <TIM_ITRx_SetConfig>
      break;
 8007fea:	e029      	b.n	8008040 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	6818      	ldr	r0, [r3, #0]
 8007ff0:	683b      	ldr	r3, [r7, #0]
 8007ff2:	6859      	ldr	r1, [r3, #4]
 8007ff4:	683b      	ldr	r3, [r7, #0]
 8007ff6:	68db      	ldr	r3, [r3, #12]
 8007ff8:	461a      	mov	r2, r3
 8007ffa:	f000 fb86 	bl	800870a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	2160      	movs	r1, #96	; 0x60
 8008004:	4618      	mov	r0, r3
 8008006:	f000 fbb0 	bl	800876a <TIM_ITRx_SetConfig>
      break;
 800800a:	e019      	b.n	8008040 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	6818      	ldr	r0, [r3, #0]
 8008010:	683b      	ldr	r3, [r7, #0]
 8008012:	6859      	ldr	r1, [r3, #4]
 8008014:	683b      	ldr	r3, [r7, #0]
 8008016:	68db      	ldr	r3, [r3, #12]
 8008018:	461a      	mov	r2, r3
 800801a:	f000 fb47 	bl	80086ac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	2140      	movs	r1, #64	; 0x40
 8008024:	4618      	mov	r0, r3
 8008026:	f000 fba0 	bl	800876a <TIM_ITRx_SetConfig>
      break;
 800802a:	e009      	b.n	8008040 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	681a      	ldr	r2, [r3, #0]
 8008030:	683b      	ldr	r3, [r7, #0]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	4619      	mov	r1, r3
 8008036:	4610      	mov	r0, r2
 8008038:	f000 fb97 	bl	800876a <TIM_ITRx_SetConfig>
      break;
 800803c:	e000      	b.n	8008040 <HAL_TIM_ConfigClockSource+0x154>
      break;
 800803e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	2201      	movs	r2, #1
 8008044:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	2200      	movs	r2, #0
 800804c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008050:	2300      	movs	r3, #0
}
 8008052:	4618      	mov	r0, r3
 8008054:	3710      	adds	r7, #16
 8008056:	46bd      	mov	sp, r7
 8008058:	bd80      	pop	{r7, pc}
 800805a:	bf00      	nop
 800805c:	fffeff88 	.word	0xfffeff88

08008060 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008060:	b480      	push	{r7}
 8008062:	b083      	sub	sp, #12
 8008064:	af00      	add	r7, sp, #0
 8008066:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008068:	bf00      	nop
 800806a:	370c      	adds	r7, #12
 800806c:	46bd      	mov	sp, r7
 800806e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008072:	4770      	bx	lr

08008074 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008074:	b480      	push	{r7}
 8008076:	b083      	sub	sp, #12
 8008078:	af00      	add	r7, sp, #0
 800807a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800807c:	bf00      	nop
 800807e:	370c      	adds	r7, #12
 8008080:	46bd      	mov	sp, r7
 8008082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008086:	4770      	bx	lr

08008088 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008088:	b480      	push	{r7}
 800808a:	b083      	sub	sp, #12
 800808c:	af00      	add	r7, sp, #0
 800808e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008090:	bf00      	nop
 8008092:	370c      	adds	r7, #12
 8008094:	46bd      	mov	sp, r7
 8008096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800809a:	4770      	bx	lr

0800809c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800809c:	b480      	push	{r7}
 800809e:	b083      	sub	sp, #12
 80080a0:	af00      	add	r7, sp, #0
 80080a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80080a4:	bf00      	nop
 80080a6:	370c      	adds	r7, #12
 80080a8:	46bd      	mov	sp, r7
 80080aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ae:	4770      	bx	lr

080080b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80080b0:	b480      	push	{r7}
 80080b2:	b085      	sub	sp, #20
 80080b4:	af00      	add	r7, sp, #0
 80080b6:	6078      	str	r0, [r7, #4]
 80080b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	4a40      	ldr	r2, [pc, #256]	; (80081c4 <TIM_Base_SetConfig+0x114>)
 80080c4:	4293      	cmp	r3, r2
 80080c6:	d013      	beq.n	80080f0 <TIM_Base_SetConfig+0x40>
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80080ce:	d00f      	beq.n	80080f0 <TIM_Base_SetConfig+0x40>
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	4a3d      	ldr	r2, [pc, #244]	; (80081c8 <TIM_Base_SetConfig+0x118>)
 80080d4:	4293      	cmp	r3, r2
 80080d6:	d00b      	beq.n	80080f0 <TIM_Base_SetConfig+0x40>
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	4a3c      	ldr	r2, [pc, #240]	; (80081cc <TIM_Base_SetConfig+0x11c>)
 80080dc:	4293      	cmp	r3, r2
 80080de:	d007      	beq.n	80080f0 <TIM_Base_SetConfig+0x40>
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	4a3b      	ldr	r2, [pc, #236]	; (80081d0 <TIM_Base_SetConfig+0x120>)
 80080e4:	4293      	cmp	r3, r2
 80080e6:	d003      	beq.n	80080f0 <TIM_Base_SetConfig+0x40>
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	4a3a      	ldr	r2, [pc, #232]	; (80081d4 <TIM_Base_SetConfig+0x124>)
 80080ec:	4293      	cmp	r3, r2
 80080ee:	d108      	bne.n	8008102 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80080f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80080f8:	683b      	ldr	r3, [r7, #0]
 80080fa:	685b      	ldr	r3, [r3, #4]
 80080fc:	68fa      	ldr	r2, [r7, #12]
 80080fe:	4313      	orrs	r3, r2
 8008100:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	4a2f      	ldr	r2, [pc, #188]	; (80081c4 <TIM_Base_SetConfig+0x114>)
 8008106:	4293      	cmp	r3, r2
 8008108:	d02b      	beq.n	8008162 <TIM_Base_SetConfig+0xb2>
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008110:	d027      	beq.n	8008162 <TIM_Base_SetConfig+0xb2>
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	4a2c      	ldr	r2, [pc, #176]	; (80081c8 <TIM_Base_SetConfig+0x118>)
 8008116:	4293      	cmp	r3, r2
 8008118:	d023      	beq.n	8008162 <TIM_Base_SetConfig+0xb2>
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	4a2b      	ldr	r2, [pc, #172]	; (80081cc <TIM_Base_SetConfig+0x11c>)
 800811e:	4293      	cmp	r3, r2
 8008120:	d01f      	beq.n	8008162 <TIM_Base_SetConfig+0xb2>
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	4a2a      	ldr	r2, [pc, #168]	; (80081d0 <TIM_Base_SetConfig+0x120>)
 8008126:	4293      	cmp	r3, r2
 8008128:	d01b      	beq.n	8008162 <TIM_Base_SetConfig+0xb2>
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	4a29      	ldr	r2, [pc, #164]	; (80081d4 <TIM_Base_SetConfig+0x124>)
 800812e:	4293      	cmp	r3, r2
 8008130:	d017      	beq.n	8008162 <TIM_Base_SetConfig+0xb2>
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	4a28      	ldr	r2, [pc, #160]	; (80081d8 <TIM_Base_SetConfig+0x128>)
 8008136:	4293      	cmp	r3, r2
 8008138:	d013      	beq.n	8008162 <TIM_Base_SetConfig+0xb2>
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	4a27      	ldr	r2, [pc, #156]	; (80081dc <TIM_Base_SetConfig+0x12c>)
 800813e:	4293      	cmp	r3, r2
 8008140:	d00f      	beq.n	8008162 <TIM_Base_SetConfig+0xb2>
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	4a26      	ldr	r2, [pc, #152]	; (80081e0 <TIM_Base_SetConfig+0x130>)
 8008146:	4293      	cmp	r3, r2
 8008148:	d00b      	beq.n	8008162 <TIM_Base_SetConfig+0xb2>
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	4a25      	ldr	r2, [pc, #148]	; (80081e4 <TIM_Base_SetConfig+0x134>)
 800814e:	4293      	cmp	r3, r2
 8008150:	d007      	beq.n	8008162 <TIM_Base_SetConfig+0xb2>
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	4a24      	ldr	r2, [pc, #144]	; (80081e8 <TIM_Base_SetConfig+0x138>)
 8008156:	4293      	cmp	r3, r2
 8008158:	d003      	beq.n	8008162 <TIM_Base_SetConfig+0xb2>
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	4a23      	ldr	r2, [pc, #140]	; (80081ec <TIM_Base_SetConfig+0x13c>)
 800815e:	4293      	cmp	r3, r2
 8008160:	d108      	bne.n	8008174 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008168:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800816a:	683b      	ldr	r3, [r7, #0]
 800816c:	68db      	ldr	r3, [r3, #12]
 800816e:	68fa      	ldr	r2, [r7, #12]
 8008170:	4313      	orrs	r3, r2
 8008172:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800817a:	683b      	ldr	r3, [r7, #0]
 800817c:	695b      	ldr	r3, [r3, #20]
 800817e:	4313      	orrs	r3, r2
 8008180:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	68fa      	ldr	r2, [r7, #12]
 8008186:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008188:	683b      	ldr	r3, [r7, #0]
 800818a:	689a      	ldr	r2, [r3, #8]
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008190:	683b      	ldr	r3, [r7, #0]
 8008192:	681a      	ldr	r2, [r3, #0]
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	4a0a      	ldr	r2, [pc, #40]	; (80081c4 <TIM_Base_SetConfig+0x114>)
 800819c:	4293      	cmp	r3, r2
 800819e:	d003      	beq.n	80081a8 <TIM_Base_SetConfig+0xf8>
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	4a0c      	ldr	r2, [pc, #48]	; (80081d4 <TIM_Base_SetConfig+0x124>)
 80081a4:	4293      	cmp	r3, r2
 80081a6:	d103      	bne.n	80081b0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80081a8:	683b      	ldr	r3, [r7, #0]
 80081aa:	691a      	ldr	r2, [r3, #16]
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	2201      	movs	r2, #1
 80081b4:	615a      	str	r2, [r3, #20]
}
 80081b6:	bf00      	nop
 80081b8:	3714      	adds	r7, #20
 80081ba:	46bd      	mov	sp, r7
 80081bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c0:	4770      	bx	lr
 80081c2:	bf00      	nop
 80081c4:	40010000 	.word	0x40010000
 80081c8:	40000400 	.word	0x40000400
 80081cc:	40000800 	.word	0x40000800
 80081d0:	40000c00 	.word	0x40000c00
 80081d4:	40010400 	.word	0x40010400
 80081d8:	40014000 	.word	0x40014000
 80081dc:	40014400 	.word	0x40014400
 80081e0:	40014800 	.word	0x40014800
 80081e4:	40001800 	.word	0x40001800
 80081e8:	40001c00 	.word	0x40001c00
 80081ec:	40002000 	.word	0x40002000

080081f0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80081f0:	b480      	push	{r7}
 80081f2:	b087      	sub	sp, #28
 80081f4:	af00      	add	r7, sp, #0
 80081f6:	6078      	str	r0, [r7, #4]
 80081f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	6a1b      	ldr	r3, [r3, #32]
 80081fe:	f023 0201 	bic.w	r2, r3, #1
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	6a1b      	ldr	r3, [r3, #32]
 800820a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	685b      	ldr	r3, [r3, #4]
 8008210:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	699b      	ldr	r3, [r3, #24]
 8008216:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008218:	68fa      	ldr	r2, [r7, #12]
 800821a:	4b2b      	ldr	r3, [pc, #172]	; (80082c8 <TIM_OC1_SetConfig+0xd8>)
 800821c:	4013      	ands	r3, r2
 800821e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	f023 0303 	bic.w	r3, r3, #3
 8008226:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008228:	683b      	ldr	r3, [r7, #0]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	68fa      	ldr	r2, [r7, #12]
 800822e:	4313      	orrs	r3, r2
 8008230:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008232:	697b      	ldr	r3, [r7, #20]
 8008234:	f023 0302 	bic.w	r3, r3, #2
 8008238:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800823a:	683b      	ldr	r3, [r7, #0]
 800823c:	689b      	ldr	r3, [r3, #8]
 800823e:	697a      	ldr	r2, [r7, #20]
 8008240:	4313      	orrs	r3, r2
 8008242:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	4a21      	ldr	r2, [pc, #132]	; (80082cc <TIM_OC1_SetConfig+0xdc>)
 8008248:	4293      	cmp	r3, r2
 800824a:	d003      	beq.n	8008254 <TIM_OC1_SetConfig+0x64>
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	4a20      	ldr	r2, [pc, #128]	; (80082d0 <TIM_OC1_SetConfig+0xe0>)
 8008250:	4293      	cmp	r3, r2
 8008252:	d10c      	bne.n	800826e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008254:	697b      	ldr	r3, [r7, #20]
 8008256:	f023 0308 	bic.w	r3, r3, #8
 800825a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800825c:	683b      	ldr	r3, [r7, #0]
 800825e:	68db      	ldr	r3, [r3, #12]
 8008260:	697a      	ldr	r2, [r7, #20]
 8008262:	4313      	orrs	r3, r2
 8008264:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008266:	697b      	ldr	r3, [r7, #20]
 8008268:	f023 0304 	bic.w	r3, r3, #4
 800826c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	4a16      	ldr	r2, [pc, #88]	; (80082cc <TIM_OC1_SetConfig+0xdc>)
 8008272:	4293      	cmp	r3, r2
 8008274:	d003      	beq.n	800827e <TIM_OC1_SetConfig+0x8e>
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	4a15      	ldr	r2, [pc, #84]	; (80082d0 <TIM_OC1_SetConfig+0xe0>)
 800827a:	4293      	cmp	r3, r2
 800827c:	d111      	bne.n	80082a2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800827e:	693b      	ldr	r3, [r7, #16]
 8008280:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008284:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008286:	693b      	ldr	r3, [r7, #16]
 8008288:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800828c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800828e:	683b      	ldr	r3, [r7, #0]
 8008290:	695b      	ldr	r3, [r3, #20]
 8008292:	693a      	ldr	r2, [r7, #16]
 8008294:	4313      	orrs	r3, r2
 8008296:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008298:	683b      	ldr	r3, [r7, #0]
 800829a:	699b      	ldr	r3, [r3, #24]
 800829c:	693a      	ldr	r2, [r7, #16]
 800829e:	4313      	orrs	r3, r2
 80082a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	693a      	ldr	r2, [r7, #16]
 80082a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	68fa      	ldr	r2, [r7, #12]
 80082ac:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80082ae:	683b      	ldr	r3, [r7, #0]
 80082b0:	685a      	ldr	r2, [r3, #4]
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	697a      	ldr	r2, [r7, #20]
 80082ba:	621a      	str	r2, [r3, #32]
}
 80082bc:	bf00      	nop
 80082be:	371c      	adds	r7, #28
 80082c0:	46bd      	mov	sp, r7
 80082c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c6:	4770      	bx	lr
 80082c8:	fffeff8f 	.word	0xfffeff8f
 80082cc:	40010000 	.word	0x40010000
 80082d0:	40010400 	.word	0x40010400

080082d4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80082d4:	b480      	push	{r7}
 80082d6:	b087      	sub	sp, #28
 80082d8:	af00      	add	r7, sp, #0
 80082da:	6078      	str	r0, [r7, #4]
 80082dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	6a1b      	ldr	r3, [r3, #32]
 80082e2:	f023 0210 	bic.w	r2, r3, #16
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	6a1b      	ldr	r3, [r3, #32]
 80082ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	685b      	ldr	r3, [r3, #4]
 80082f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	699b      	ldr	r3, [r3, #24]
 80082fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80082fc:	68fa      	ldr	r2, [r7, #12]
 80082fe:	4b2e      	ldr	r3, [pc, #184]	; (80083b8 <TIM_OC2_SetConfig+0xe4>)
 8008300:	4013      	ands	r3, r2
 8008302:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800830a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800830c:	683b      	ldr	r3, [r7, #0]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	021b      	lsls	r3, r3, #8
 8008312:	68fa      	ldr	r2, [r7, #12]
 8008314:	4313      	orrs	r3, r2
 8008316:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008318:	697b      	ldr	r3, [r7, #20]
 800831a:	f023 0320 	bic.w	r3, r3, #32
 800831e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008320:	683b      	ldr	r3, [r7, #0]
 8008322:	689b      	ldr	r3, [r3, #8]
 8008324:	011b      	lsls	r3, r3, #4
 8008326:	697a      	ldr	r2, [r7, #20]
 8008328:	4313      	orrs	r3, r2
 800832a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	4a23      	ldr	r2, [pc, #140]	; (80083bc <TIM_OC2_SetConfig+0xe8>)
 8008330:	4293      	cmp	r3, r2
 8008332:	d003      	beq.n	800833c <TIM_OC2_SetConfig+0x68>
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	4a22      	ldr	r2, [pc, #136]	; (80083c0 <TIM_OC2_SetConfig+0xec>)
 8008338:	4293      	cmp	r3, r2
 800833a:	d10d      	bne.n	8008358 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800833c:	697b      	ldr	r3, [r7, #20]
 800833e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008342:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008344:	683b      	ldr	r3, [r7, #0]
 8008346:	68db      	ldr	r3, [r3, #12]
 8008348:	011b      	lsls	r3, r3, #4
 800834a:	697a      	ldr	r2, [r7, #20]
 800834c:	4313      	orrs	r3, r2
 800834e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008350:	697b      	ldr	r3, [r7, #20]
 8008352:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008356:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	4a18      	ldr	r2, [pc, #96]	; (80083bc <TIM_OC2_SetConfig+0xe8>)
 800835c:	4293      	cmp	r3, r2
 800835e:	d003      	beq.n	8008368 <TIM_OC2_SetConfig+0x94>
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	4a17      	ldr	r2, [pc, #92]	; (80083c0 <TIM_OC2_SetConfig+0xec>)
 8008364:	4293      	cmp	r3, r2
 8008366:	d113      	bne.n	8008390 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008368:	693b      	ldr	r3, [r7, #16]
 800836a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800836e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008370:	693b      	ldr	r3, [r7, #16]
 8008372:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008376:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008378:	683b      	ldr	r3, [r7, #0]
 800837a:	695b      	ldr	r3, [r3, #20]
 800837c:	009b      	lsls	r3, r3, #2
 800837e:	693a      	ldr	r2, [r7, #16]
 8008380:	4313      	orrs	r3, r2
 8008382:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008384:	683b      	ldr	r3, [r7, #0]
 8008386:	699b      	ldr	r3, [r3, #24]
 8008388:	009b      	lsls	r3, r3, #2
 800838a:	693a      	ldr	r2, [r7, #16]
 800838c:	4313      	orrs	r3, r2
 800838e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	693a      	ldr	r2, [r7, #16]
 8008394:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	68fa      	ldr	r2, [r7, #12]
 800839a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800839c:	683b      	ldr	r3, [r7, #0]
 800839e:	685a      	ldr	r2, [r3, #4]
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	697a      	ldr	r2, [r7, #20]
 80083a8:	621a      	str	r2, [r3, #32]
}
 80083aa:	bf00      	nop
 80083ac:	371c      	adds	r7, #28
 80083ae:	46bd      	mov	sp, r7
 80083b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b4:	4770      	bx	lr
 80083b6:	bf00      	nop
 80083b8:	feff8fff 	.word	0xfeff8fff
 80083bc:	40010000 	.word	0x40010000
 80083c0:	40010400 	.word	0x40010400

080083c4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80083c4:	b480      	push	{r7}
 80083c6:	b087      	sub	sp, #28
 80083c8:	af00      	add	r7, sp, #0
 80083ca:	6078      	str	r0, [r7, #4]
 80083cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	6a1b      	ldr	r3, [r3, #32]
 80083d2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	6a1b      	ldr	r3, [r3, #32]
 80083de:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	685b      	ldr	r3, [r3, #4]
 80083e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	69db      	ldr	r3, [r3, #28]
 80083ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80083ec:	68fa      	ldr	r2, [r7, #12]
 80083ee:	4b2d      	ldr	r3, [pc, #180]	; (80084a4 <TIM_OC3_SetConfig+0xe0>)
 80083f0:	4013      	ands	r3, r2
 80083f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	f023 0303 	bic.w	r3, r3, #3
 80083fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80083fc:	683b      	ldr	r3, [r7, #0]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	68fa      	ldr	r2, [r7, #12]
 8008402:	4313      	orrs	r3, r2
 8008404:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008406:	697b      	ldr	r3, [r7, #20]
 8008408:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800840c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800840e:	683b      	ldr	r3, [r7, #0]
 8008410:	689b      	ldr	r3, [r3, #8]
 8008412:	021b      	lsls	r3, r3, #8
 8008414:	697a      	ldr	r2, [r7, #20]
 8008416:	4313      	orrs	r3, r2
 8008418:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	4a22      	ldr	r2, [pc, #136]	; (80084a8 <TIM_OC3_SetConfig+0xe4>)
 800841e:	4293      	cmp	r3, r2
 8008420:	d003      	beq.n	800842a <TIM_OC3_SetConfig+0x66>
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	4a21      	ldr	r2, [pc, #132]	; (80084ac <TIM_OC3_SetConfig+0xe8>)
 8008426:	4293      	cmp	r3, r2
 8008428:	d10d      	bne.n	8008446 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800842a:	697b      	ldr	r3, [r7, #20]
 800842c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008430:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008432:	683b      	ldr	r3, [r7, #0]
 8008434:	68db      	ldr	r3, [r3, #12]
 8008436:	021b      	lsls	r3, r3, #8
 8008438:	697a      	ldr	r2, [r7, #20]
 800843a:	4313      	orrs	r3, r2
 800843c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800843e:	697b      	ldr	r3, [r7, #20]
 8008440:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008444:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	4a17      	ldr	r2, [pc, #92]	; (80084a8 <TIM_OC3_SetConfig+0xe4>)
 800844a:	4293      	cmp	r3, r2
 800844c:	d003      	beq.n	8008456 <TIM_OC3_SetConfig+0x92>
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	4a16      	ldr	r2, [pc, #88]	; (80084ac <TIM_OC3_SetConfig+0xe8>)
 8008452:	4293      	cmp	r3, r2
 8008454:	d113      	bne.n	800847e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008456:	693b      	ldr	r3, [r7, #16]
 8008458:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800845c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800845e:	693b      	ldr	r3, [r7, #16]
 8008460:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008464:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008466:	683b      	ldr	r3, [r7, #0]
 8008468:	695b      	ldr	r3, [r3, #20]
 800846a:	011b      	lsls	r3, r3, #4
 800846c:	693a      	ldr	r2, [r7, #16]
 800846e:	4313      	orrs	r3, r2
 8008470:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008472:	683b      	ldr	r3, [r7, #0]
 8008474:	699b      	ldr	r3, [r3, #24]
 8008476:	011b      	lsls	r3, r3, #4
 8008478:	693a      	ldr	r2, [r7, #16]
 800847a:	4313      	orrs	r3, r2
 800847c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	693a      	ldr	r2, [r7, #16]
 8008482:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	68fa      	ldr	r2, [r7, #12]
 8008488:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800848a:	683b      	ldr	r3, [r7, #0]
 800848c:	685a      	ldr	r2, [r3, #4]
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	697a      	ldr	r2, [r7, #20]
 8008496:	621a      	str	r2, [r3, #32]
}
 8008498:	bf00      	nop
 800849a:	371c      	adds	r7, #28
 800849c:	46bd      	mov	sp, r7
 800849e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a2:	4770      	bx	lr
 80084a4:	fffeff8f 	.word	0xfffeff8f
 80084a8:	40010000 	.word	0x40010000
 80084ac:	40010400 	.word	0x40010400

080084b0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80084b0:	b480      	push	{r7}
 80084b2:	b087      	sub	sp, #28
 80084b4:	af00      	add	r7, sp, #0
 80084b6:	6078      	str	r0, [r7, #4]
 80084b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	6a1b      	ldr	r3, [r3, #32]
 80084be:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	6a1b      	ldr	r3, [r3, #32]
 80084ca:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	685b      	ldr	r3, [r3, #4]
 80084d0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	69db      	ldr	r3, [r3, #28]
 80084d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80084d8:	68fa      	ldr	r2, [r7, #12]
 80084da:	4b1e      	ldr	r3, [pc, #120]	; (8008554 <TIM_OC4_SetConfig+0xa4>)
 80084dc:	4013      	ands	r3, r2
 80084de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80084e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80084e8:	683b      	ldr	r3, [r7, #0]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	021b      	lsls	r3, r3, #8
 80084ee:	68fa      	ldr	r2, [r7, #12]
 80084f0:	4313      	orrs	r3, r2
 80084f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80084f4:	693b      	ldr	r3, [r7, #16]
 80084f6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80084fa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80084fc:	683b      	ldr	r3, [r7, #0]
 80084fe:	689b      	ldr	r3, [r3, #8]
 8008500:	031b      	lsls	r3, r3, #12
 8008502:	693a      	ldr	r2, [r7, #16]
 8008504:	4313      	orrs	r3, r2
 8008506:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	4a13      	ldr	r2, [pc, #76]	; (8008558 <TIM_OC4_SetConfig+0xa8>)
 800850c:	4293      	cmp	r3, r2
 800850e:	d003      	beq.n	8008518 <TIM_OC4_SetConfig+0x68>
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	4a12      	ldr	r2, [pc, #72]	; (800855c <TIM_OC4_SetConfig+0xac>)
 8008514:	4293      	cmp	r3, r2
 8008516:	d109      	bne.n	800852c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008518:	697b      	ldr	r3, [r7, #20]
 800851a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800851e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008520:	683b      	ldr	r3, [r7, #0]
 8008522:	695b      	ldr	r3, [r3, #20]
 8008524:	019b      	lsls	r3, r3, #6
 8008526:	697a      	ldr	r2, [r7, #20]
 8008528:	4313      	orrs	r3, r2
 800852a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	697a      	ldr	r2, [r7, #20]
 8008530:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	68fa      	ldr	r2, [r7, #12]
 8008536:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008538:	683b      	ldr	r3, [r7, #0]
 800853a:	685a      	ldr	r2, [r3, #4]
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	693a      	ldr	r2, [r7, #16]
 8008544:	621a      	str	r2, [r3, #32]
}
 8008546:	bf00      	nop
 8008548:	371c      	adds	r7, #28
 800854a:	46bd      	mov	sp, r7
 800854c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008550:	4770      	bx	lr
 8008552:	bf00      	nop
 8008554:	feff8fff 	.word	0xfeff8fff
 8008558:	40010000 	.word	0x40010000
 800855c:	40010400 	.word	0x40010400

08008560 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8008560:	b480      	push	{r7}
 8008562:	b087      	sub	sp, #28
 8008564:	af00      	add	r7, sp, #0
 8008566:	6078      	str	r0, [r7, #4]
 8008568:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	6a1b      	ldr	r3, [r3, #32]
 800856e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	6a1b      	ldr	r3, [r3, #32]
 800857a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	685b      	ldr	r3, [r3, #4]
 8008580:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008586:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008588:	68fa      	ldr	r2, [r7, #12]
 800858a:	4b1b      	ldr	r3, [pc, #108]	; (80085f8 <TIM_OC5_SetConfig+0x98>)
 800858c:	4013      	ands	r3, r2
 800858e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008590:	683b      	ldr	r3, [r7, #0]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	68fa      	ldr	r2, [r7, #12]
 8008596:	4313      	orrs	r3, r2
 8008598:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800859a:	693b      	ldr	r3, [r7, #16]
 800859c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80085a0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80085a2:	683b      	ldr	r3, [r7, #0]
 80085a4:	689b      	ldr	r3, [r3, #8]
 80085a6:	041b      	lsls	r3, r3, #16
 80085a8:	693a      	ldr	r2, [r7, #16]
 80085aa:	4313      	orrs	r3, r2
 80085ac:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	4a12      	ldr	r2, [pc, #72]	; (80085fc <TIM_OC5_SetConfig+0x9c>)
 80085b2:	4293      	cmp	r3, r2
 80085b4:	d003      	beq.n	80085be <TIM_OC5_SetConfig+0x5e>
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	4a11      	ldr	r2, [pc, #68]	; (8008600 <TIM_OC5_SetConfig+0xa0>)
 80085ba:	4293      	cmp	r3, r2
 80085bc:	d109      	bne.n	80085d2 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80085be:	697b      	ldr	r3, [r7, #20]
 80085c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80085c4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80085c6:	683b      	ldr	r3, [r7, #0]
 80085c8:	695b      	ldr	r3, [r3, #20]
 80085ca:	021b      	lsls	r3, r3, #8
 80085cc:	697a      	ldr	r2, [r7, #20]
 80085ce:	4313      	orrs	r3, r2
 80085d0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	697a      	ldr	r2, [r7, #20]
 80085d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	68fa      	ldr	r2, [r7, #12]
 80085dc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80085de:	683b      	ldr	r3, [r7, #0]
 80085e0:	685a      	ldr	r2, [r3, #4]
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	693a      	ldr	r2, [r7, #16]
 80085ea:	621a      	str	r2, [r3, #32]
}
 80085ec:	bf00      	nop
 80085ee:	371c      	adds	r7, #28
 80085f0:	46bd      	mov	sp, r7
 80085f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f6:	4770      	bx	lr
 80085f8:	fffeff8f 	.word	0xfffeff8f
 80085fc:	40010000 	.word	0x40010000
 8008600:	40010400 	.word	0x40010400

08008604 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8008604:	b480      	push	{r7}
 8008606:	b087      	sub	sp, #28
 8008608:	af00      	add	r7, sp, #0
 800860a:	6078      	str	r0, [r7, #4]
 800860c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	6a1b      	ldr	r3, [r3, #32]
 8008612:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	6a1b      	ldr	r3, [r3, #32]
 800861e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	685b      	ldr	r3, [r3, #4]
 8008624:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800862a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800862c:	68fa      	ldr	r2, [r7, #12]
 800862e:	4b1c      	ldr	r3, [pc, #112]	; (80086a0 <TIM_OC6_SetConfig+0x9c>)
 8008630:	4013      	ands	r3, r2
 8008632:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008634:	683b      	ldr	r3, [r7, #0]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	021b      	lsls	r3, r3, #8
 800863a:	68fa      	ldr	r2, [r7, #12]
 800863c:	4313      	orrs	r3, r2
 800863e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008640:	693b      	ldr	r3, [r7, #16]
 8008642:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008646:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008648:	683b      	ldr	r3, [r7, #0]
 800864a:	689b      	ldr	r3, [r3, #8]
 800864c:	051b      	lsls	r3, r3, #20
 800864e:	693a      	ldr	r2, [r7, #16]
 8008650:	4313      	orrs	r3, r2
 8008652:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	4a13      	ldr	r2, [pc, #76]	; (80086a4 <TIM_OC6_SetConfig+0xa0>)
 8008658:	4293      	cmp	r3, r2
 800865a:	d003      	beq.n	8008664 <TIM_OC6_SetConfig+0x60>
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	4a12      	ldr	r2, [pc, #72]	; (80086a8 <TIM_OC6_SetConfig+0xa4>)
 8008660:	4293      	cmp	r3, r2
 8008662:	d109      	bne.n	8008678 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008664:	697b      	ldr	r3, [r7, #20]
 8008666:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800866a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800866c:	683b      	ldr	r3, [r7, #0]
 800866e:	695b      	ldr	r3, [r3, #20]
 8008670:	029b      	lsls	r3, r3, #10
 8008672:	697a      	ldr	r2, [r7, #20]
 8008674:	4313      	orrs	r3, r2
 8008676:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	697a      	ldr	r2, [r7, #20]
 800867c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	68fa      	ldr	r2, [r7, #12]
 8008682:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008684:	683b      	ldr	r3, [r7, #0]
 8008686:	685a      	ldr	r2, [r3, #4]
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	693a      	ldr	r2, [r7, #16]
 8008690:	621a      	str	r2, [r3, #32]
}
 8008692:	bf00      	nop
 8008694:	371c      	adds	r7, #28
 8008696:	46bd      	mov	sp, r7
 8008698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800869c:	4770      	bx	lr
 800869e:	bf00      	nop
 80086a0:	feff8fff 	.word	0xfeff8fff
 80086a4:	40010000 	.word	0x40010000
 80086a8:	40010400 	.word	0x40010400

080086ac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80086ac:	b480      	push	{r7}
 80086ae:	b087      	sub	sp, #28
 80086b0:	af00      	add	r7, sp, #0
 80086b2:	60f8      	str	r0, [r7, #12]
 80086b4:	60b9      	str	r1, [r7, #8]
 80086b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	6a1b      	ldr	r3, [r3, #32]
 80086bc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	6a1b      	ldr	r3, [r3, #32]
 80086c2:	f023 0201 	bic.w	r2, r3, #1
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	699b      	ldr	r3, [r3, #24]
 80086ce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80086d0:	693b      	ldr	r3, [r7, #16]
 80086d2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80086d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	011b      	lsls	r3, r3, #4
 80086dc:	693a      	ldr	r2, [r7, #16]
 80086de:	4313      	orrs	r3, r2
 80086e0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80086e2:	697b      	ldr	r3, [r7, #20]
 80086e4:	f023 030a 	bic.w	r3, r3, #10
 80086e8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80086ea:	697a      	ldr	r2, [r7, #20]
 80086ec:	68bb      	ldr	r3, [r7, #8]
 80086ee:	4313      	orrs	r3, r2
 80086f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	693a      	ldr	r2, [r7, #16]
 80086f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	697a      	ldr	r2, [r7, #20]
 80086fc:	621a      	str	r2, [r3, #32]
}
 80086fe:	bf00      	nop
 8008700:	371c      	adds	r7, #28
 8008702:	46bd      	mov	sp, r7
 8008704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008708:	4770      	bx	lr

0800870a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800870a:	b480      	push	{r7}
 800870c:	b087      	sub	sp, #28
 800870e:	af00      	add	r7, sp, #0
 8008710:	60f8      	str	r0, [r7, #12]
 8008712:	60b9      	str	r1, [r7, #8]
 8008714:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	6a1b      	ldr	r3, [r3, #32]
 800871a:	f023 0210 	bic.w	r2, r3, #16
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	699b      	ldr	r3, [r3, #24]
 8008726:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	6a1b      	ldr	r3, [r3, #32]
 800872c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800872e:	697b      	ldr	r3, [r7, #20]
 8008730:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008734:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	031b      	lsls	r3, r3, #12
 800873a:	697a      	ldr	r2, [r7, #20]
 800873c:	4313      	orrs	r3, r2
 800873e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008740:	693b      	ldr	r3, [r7, #16]
 8008742:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008746:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008748:	68bb      	ldr	r3, [r7, #8]
 800874a:	011b      	lsls	r3, r3, #4
 800874c:	693a      	ldr	r2, [r7, #16]
 800874e:	4313      	orrs	r3, r2
 8008750:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	697a      	ldr	r2, [r7, #20]
 8008756:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	693a      	ldr	r2, [r7, #16]
 800875c:	621a      	str	r2, [r3, #32]
}
 800875e:	bf00      	nop
 8008760:	371c      	adds	r7, #28
 8008762:	46bd      	mov	sp, r7
 8008764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008768:	4770      	bx	lr

0800876a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800876a:	b480      	push	{r7}
 800876c:	b085      	sub	sp, #20
 800876e:	af00      	add	r7, sp, #0
 8008770:	6078      	str	r0, [r7, #4]
 8008772:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	689b      	ldr	r3, [r3, #8]
 8008778:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008780:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008782:	683a      	ldr	r2, [r7, #0]
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	4313      	orrs	r3, r2
 8008788:	f043 0307 	orr.w	r3, r3, #7
 800878c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	68fa      	ldr	r2, [r7, #12]
 8008792:	609a      	str	r2, [r3, #8]
}
 8008794:	bf00      	nop
 8008796:	3714      	adds	r7, #20
 8008798:	46bd      	mov	sp, r7
 800879a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800879e:	4770      	bx	lr

080087a0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80087a0:	b480      	push	{r7}
 80087a2:	b087      	sub	sp, #28
 80087a4:	af00      	add	r7, sp, #0
 80087a6:	60f8      	str	r0, [r7, #12]
 80087a8:	60b9      	str	r1, [r7, #8]
 80087aa:	607a      	str	r2, [r7, #4]
 80087ac:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	689b      	ldr	r3, [r3, #8]
 80087b2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80087b4:	697b      	ldr	r3, [r7, #20]
 80087b6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80087ba:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80087bc:	683b      	ldr	r3, [r7, #0]
 80087be:	021a      	lsls	r2, r3, #8
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	431a      	orrs	r2, r3
 80087c4:	68bb      	ldr	r3, [r7, #8]
 80087c6:	4313      	orrs	r3, r2
 80087c8:	697a      	ldr	r2, [r7, #20]
 80087ca:	4313      	orrs	r3, r2
 80087cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	697a      	ldr	r2, [r7, #20]
 80087d2:	609a      	str	r2, [r3, #8]
}
 80087d4:	bf00      	nop
 80087d6:	371c      	adds	r7, #28
 80087d8:	46bd      	mov	sp, r7
 80087da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087de:	4770      	bx	lr

080087e0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80087e0:	b480      	push	{r7}
 80087e2:	b087      	sub	sp, #28
 80087e4:	af00      	add	r7, sp, #0
 80087e6:	60f8      	str	r0, [r7, #12]
 80087e8:	60b9      	str	r1, [r7, #8]
 80087ea:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80087ec:	68bb      	ldr	r3, [r7, #8]
 80087ee:	f003 031f 	and.w	r3, r3, #31
 80087f2:	2201      	movs	r2, #1
 80087f4:	fa02 f303 	lsl.w	r3, r2, r3
 80087f8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	6a1a      	ldr	r2, [r3, #32]
 80087fe:	697b      	ldr	r3, [r7, #20]
 8008800:	43db      	mvns	r3, r3
 8008802:	401a      	ands	r2, r3
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	6a1a      	ldr	r2, [r3, #32]
 800880c:	68bb      	ldr	r3, [r7, #8]
 800880e:	f003 031f 	and.w	r3, r3, #31
 8008812:	6879      	ldr	r1, [r7, #4]
 8008814:	fa01 f303 	lsl.w	r3, r1, r3
 8008818:	431a      	orrs	r2, r3
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	621a      	str	r2, [r3, #32]
}
 800881e:	bf00      	nop
 8008820:	371c      	adds	r7, #28
 8008822:	46bd      	mov	sp, r7
 8008824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008828:	4770      	bx	lr
	...

0800882c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800882c:	b480      	push	{r7}
 800882e:	b085      	sub	sp, #20
 8008830:	af00      	add	r7, sp, #0
 8008832:	6078      	str	r0, [r7, #4]
 8008834:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800883c:	2b01      	cmp	r3, #1
 800883e:	d101      	bne.n	8008844 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008840:	2302      	movs	r3, #2
 8008842:	e06d      	b.n	8008920 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	2201      	movs	r2, #1
 8008848:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	2202      	movs	r2, #2
 8008850:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	685b      	ldr	r3, [r3, #4]
 800885a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	689b      	ldr	r3, [r3, #8]
 8008862:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	4a30      	ldr	r2, [pc, #192]	; (800892c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800886a:	4293      	cmp	r3, r2
 800886c:	d004      	beq.n	8008878 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	4a2f      	ldr	r2, [pc, #188]	; (8008930 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008874:	4293      	cmp	r3, r2
 8008876:	d108      	bne.n	800888a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800887e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008880:	683b      	ldr	r3, [r7, #0]
 8008882:	685b      	ldr	r3, [r3, #4]
 8008884:	68fa      	ldr	r2, [r7, #12]
 8008886:	4313      	orrs	r3, r2
 8008888:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008890:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008892:	683b      	ldr	r3, [r7, #0]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	68fa      	ldr	r2, [r7, #12]
 8008898:	4313      	orrs	r3, r2
 800889a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	68fa      	ldr	r2, [r7, #12]
 80088a2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	4a20      	ldr	r2, [pc, #128]	; (800892c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80088aa:	4293      	cmp	r3, r2
 80088ac:	d022      	beq.n	80088f4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80088b6:	d01d      	beq.n	80088f4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	4a1d      	ldr	r2, [pc, #116]	; (8008934 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80088be:	4293      	cmp	r3, r2
 80088c0:	d018      	beq.n	80088f4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	4a1c      	ldr	r2, [pc, #112]	; (8008938 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80088c8:	4293      	cmp	r3, r2
 80088ca:	d013      	beq.n	80088f4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	4a1a      	ldr	r2, [pc, #104]	; (800893c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80088d2:	4293      	cmp	r3, r2
 80088d4:	d00e      	beq.n	80088f4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	4a15      	ldr	r2, [pc, #84]	; (8008930 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80088dc:	4293      	cmp	r3, r2
 80088de:	d009      	beq.n	80088f4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	4a16      	ldr	r2, [pc, #88]	; (8008940 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80088e6:	4293      	cmp	r3, r2
 80088e8:	d004      	beq.n	80088f4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	4a15      	ldr	r2, [pc, #84]	; (8008944 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80088f0:	4293      	cmp	r3, r2
 80088f2:	d10c      	bne.n	800890e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80088f4:	68bb      	ldr	r3, [r7, #8]
 80088f6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80088fa:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80088fc:	683b      	ldr	r3, [r7, #0]
 80088fe:	689b      	ldr	r3, [r3, #8]
 8008900:	68ba      	ldr	r2, [r7, #8]
 8008902:	4313      	orrs	r3, r2
 8008904:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	68ba      	ldr	r2, [r7, #8]
 800890c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	2201      	movs	r2, #1
 8008912:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	2200      	movs	r2, #0
 800891a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800891e:	2300      	movs	r3, #0
}
 8008920:	4618      	mov	r0, r3
 8008922:	3714      	adds	r7, #20
 8008924:	46bd      	mov	sp, r7
 8008926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800892a:	4770      	bx	lr
 800892c:	40010000 	.word	0x40010000
 8008930:	40010400 	.word	0x40010400
 8008934:	40000400 	.word	0x40000400
 8008938:	40000800 	.word	0x40000800
 800893c:	40000c00 	.word	0x40000c00
 8008940:	40014000 	.word	0x40014000
 8008944:	40001800 	.word	0x40001800

08008948 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008948:	b480      	push	{r7}
 800894a:	b083      	sub	sp, #12
 800894c:	af00      	add	r7, sp, #0
 800894e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008950:	bf00      	nop
 8008952:	370c      	adds	r7, #12
 8008954:	46bd      	mov	sp, r7
 8008956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800895a:	4770      	bx	lr

0800895c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800895c:	b480      	push	{r7}
 800895e:	b083      	sub	sp, #12
 8008960:	af00      	add	r7, sp, #0
 8008962:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008964:	bf00      	nop
 8008966:	370c      	adds	r7, #12
 8008968:	46bd      	mov	sp, r7
 800896a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800896e:	4770      	bx	lr

08008970 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008970:	b480      	push	{r7}
 8008972:	b083      	sub	sp, #12
 8008974:	af00      	add	r7, sp, #0
 8008976:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008978:	bf00      	nop
 800897a:	370c      	adds	r7, #12
 800897c:	46bd      	mov	sp, r7
 800897e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008982:	4770      	bx	lr

08008984 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008984:	b580      	push	{r7, lr}
 8008986:	b082      	sub	sp, #8
 8008988:	af00      	add	r7, sp, #0
 800898a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	2b00      	cmp	r3, #0
 8008990:	d101      	bne.n	8008996 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008992:	2301      	movs	r3, #1
 8008994:	e040      	b.n	8008a18 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800899a:	2b00      	cmp	r3, #0
 800899c:	d106      	bne.n	80089ac <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	2200      	movs	r2, #0
 80089a2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80089a6:	6878      	ldr	r0, [r7, #4]
 80089a8:	f7fa ff34 	bl	8003814 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	2224      	movs	r2, #36	; 0x24
 80089b0:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	681a      	ldr	r2, [r3, #0]
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	f022 0201 	bic.w	r2, r2, #1
 80089c0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80089c2:	6878      	ldr	r0, [r7, #4]
 80089c4:	f000 f972 	bl	8008cac <UART_SetConfig>
 80089c8:	4603      	mov	r3, r0
 80089ca:	2b01      	cmp	r3, #1
 80089cc:	d101      	bne.n	80089d2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80089ce:	2301      	movs	r3, #1
 80089d0:	e022      	b.n	8008a18 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d002      	beq.n	80089e0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80089da:	6878      	ldr	r0, [r7, #4]
 80089dc:	f000 fc10 	bl	8009200 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	685a      	ldr	r2, [r3, #4]
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80089ee:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	689a      	ldr	r2, [r3, #8]
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80089fe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	681a      	ldr	r2, [r3, #0]
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	f042 0201 	orr.w	r2, r2, #1
 8008a0e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008a10:	6878      	ldr	r0, [r7, #4]
 8008a12:	f000 fc97 	bl	8009344 <UART_CheckIdleState>
 8008a16:	4603      	mov	r3, r0
}
 8008a18:	4618      	mov	r0, r3
 8008a1a:	3708      	adds	r7, #8
 8008a1c:	46bd      	mov	sp, r7
 8008a1e:	bd80      	pop	{r7, pc}

08008a20 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008a20:	b580      	push	{r7, lr}
 8008a22:	b088      	sub	sp, #32
 8008a24:	af00      	add	r7, sp, #0
 8008a26:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	69db      	ldr	r3, [r3, #28]
 8008a2e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	689b      	ldr	r3, [r3, #8]
 8008a3e:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008a40:	69fa      	ldr	r2, [r7, #28]
 8008a42:	f640 030f 	movw	r3, #2063	; 0x80f
 8008a46:	4013      	ands	r3, r2
 8008a48:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8008a4a:	693b      	ldr	r3, [r7, #16]
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d113      	bne.n	8008a78 <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8008a50:	69fb      	ldr	r3, [r7, #28]
 8008a52:	f003 0320 	and.w	r3, r3, #32
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d00e      	beq.n	8008a78 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8008a5a:	69bb      	ldr	r3, [r7, #24]
 8008a5c:	f003 0320 	and.w	r3, r3, #32
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d009      	beq.n	8008a78 <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	f000 8100 	beq.w	8008c6e <HAL_UART_IRQHandler+0x24e>
      {
        huart->RxISR(huart);
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008a72:	6878      	ldr	r0, [r7, #4]
 8008a74:	4798      	blx	r3
      }
      return;
 8008a76:	e0fa      	b.n	8008c6e <HAL_UART_IRQHandler+0x24e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8008a78:	693b      	ldr	r3, [r7, #16]
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	f000 80d5 	beq.w	8008c2a <HAL_UART_IRQHandler+0x20a>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8008a80:	697b      	ldr	r3, [r7, #20]
 8008a82:	f003 0301 	and.w	r3, r3, #1
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d105      	bne.n	8008a96 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 8008a8a:	69bb      	ldr	r3, [r7, #24]
 8008a8c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	f000 80ca 	beq.w	8008c2a <HAL_UART_IRQHandler+0x20a>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008a96:	69fb      	ldr	r3, [r7, #28]
 8008a98:	f003 0301 	and.w	r3, r3, #1
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d00e      	beq.n	8008abe <HAL_UART_IRQHandler+0x9e>
 8008aa0:	69bb      	ldr	r3, [r7, #24]
 8008aa2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d009      	beq.n	8008abe <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	2201      	movs	r2, #1
 8008ab0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008ab6:	f043 0201 	orr.w	r2, r3, #1
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008abe:	69fb      	ldr	r3, [r7, #28]
 8008ac0:	f003 0302 	and.w	r3, r3, #2
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d00e      	beq.n	8008ae6 <HAL_UART_IRQHandler+0xc6>
 8008ac8:	697b      	ldr	r3, [r7, #20]
 8008aca:	f003 0301 	and.w	r3, r3, #1
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d009      	beq.n	8008ae6 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	2202      	movs	r2, #2
 8008ad8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008ade:	f043 0204 	orr.w	r2, r3, #4
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008ae6:	69fb      	ldr	r3, [r7, #28]
 8008ae8:	f003 0304 	and.w	r3, r3, #4
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d00e      	beq.n	8008b0e <HAL_UART_IRQHandler+0xee>
 8008af0:	697b      	ldr	r3, [r7, #20]
 8008af2:	f003 0301 	and.w	r3, r3, #1
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d009      	beq.n	8008b0e <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	2204      	movs	r2, #4
 8008b00:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008b06:	f043 0202 	orr.w	r2, r3, #2
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008b0e:	69fb      	ldr	r3, [r7, #28]
 8008b10:	f003 0308 	and.w	r3, r3, #8
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d013      	beq.n	8008b40 <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008b18:	69bb      	ldr	r3, [r7, #24]
 8008b1a:	f003 0320 	and.w	r3, r3, #32
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d104      	bne.n	8008b2c <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8008b22:	697b      	ldr	r3, [r7, #20]
 8008b24:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d009      	beq.n	8008b40 <HAL_UART_IRQHandler+0x120>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	2208      	movs	r2, #8
 8008b32:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008b38:	f043 0208 	orr.w	r2, r3, #8
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008b40:	69fb      	ldr	r3, [r7, #28]
 8008b42:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d00f      	beq.n	8008b6a <HAL_UART_IRQHandler+0x14a>
 8008b4a:	69bb      	ldr	r3, [r7, #24]
 8008b4c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d00a      	beq.n	8008b6a <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008b5c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008b62:	f043 0220 	orr.w	r2, r3, #32
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d07f      	beq.n	8008c72 <HAL_UART_IRQHandler+0x252>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8008b72:	69fb      	ldr	r3, [r7, #28]
 8008b74:	f003 0320 	and.w	r3, r3, #32
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d00c      	beq.n	8008b96 <HAL_UART_IRQHandler+0x176>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8008b7c:	69bb      	ldr	r3, [r7, #24]
 8008b7e:	f003 0320 	and.w	r3, r3, #32
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d007      	beq.n	8008b96 <HAL_UART_IRQHandler+0x176>
      {
        if (huart->RxISR != NULL)
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d003      	beq.n	8008b96 <HAL_UART_IRQHandler+0x176>
        {
          huart->RxISR(huart);
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008b92:	6878      	ldr	r0, [r7, #4]
 8008b94:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008b9a:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	689b      	ldr	r3, [r3, #8]
 8008ba2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ba6:	2b40      	cmp	r3, #64	; 0x40
 8008ba8:	d004      	beq.n	8008bb4 <HAL_UART_IRQHandler+0x194>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d031      	beq.n	8008c18 <HAL_UART_IRQHandler+0x1f8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008bb4:	6878      	ldr	r0, [r7, #4]
 8008bb6:	f000 fc6f 	bl	8009498 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	689b      	ldr	r3, [r3, #8]
 8008bc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008bc4:	2b40      	cmp	r3, #64	; 0x40
 8008bc6:	d123      	bne.n	8008c10 <HAL_UART_IRQHandler+0x1f0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	689a      	ldr	r2, [r3, #8]
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008bd6:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d013      	beq.n	8008c08 <HAL_UART_IRQHandler+0x1e8>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008be4:	4a26      	ldr	r2, [pc, #152]	; (8008c80 <HAL_UART_IRQHandler+0x260>)
 8008be6:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008bec:	4618      	mov	r0, r3
 8008bee:	f7fb fdfd 	bl	80047ec <HAL_DMA_Abort_IT>
 8008bf2:	4603      	mov	r3, r0
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d016      	beq.n	8008c26 <HAL_UART_IRQHandler+0x206>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008bfc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008bfe:	687a      	ldr	r2, [r7, #4]
 8008c00:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8008c02:	4610      	mov	r0, r2
 8008c04:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008c06:	e00e      	b.n	8008c26 <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008c08:	6878      	ldr	r0, [r7, #4]
 8008c0a:	f000 f845 	bl	8008c98 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008c0e:	e00a      	b.n	8008c26 <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008c10:	6878      	ldr	r0, [r7, #4]
 8008c12:	f000 f841 	bl	8008c98 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008c16:	e006      	b.n	8008c26 <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008c18:	6878      	ldr	r0, [r7, #4]
 8008c1a:	f000 f83d 	bl	8008c98 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	2200      	movs	r2, #0
 8008c22:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 8008c24:	e025      	b.n	8008c72 <HAL_UART_IRQHandler+0x252>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008c26:	bf00      	nop
    return;
 8008c28:	e023      	b.n	8008c72 <HAL_UART_IRQHandler+0x252>
    return;
  }
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8008c2a:	69fb      	ldr	r3, [r7, #28]
 8008c2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d00d      	beq.n	8008c50 <HAL_UART_IRQHandler+0x230>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8008c34:	69bb      	ldr	r3, [r7, #24]
 8008c36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d008      	beq.n	8008c50 <HAL_UART_IRQHandler+0x230>
  {
    if (huart->TxISR != NULL)
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d017      	beq.n	8008c76 <HAL_UART_IRQHandler+0x256>
    {
      huart->TxISR(huart);
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008c4a:	6878      	ldr	r0, [r7, #4]
 8008c4c:	4798      	blx	r3
    }
    return;
 8008c4e:	e012      	b.n	8008c76 <HAL_UART_IRQHandler+0x256>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008c50:	69fb      	ldr	r3, [r7, #28]
 8008c52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d00e      	beq.n	8008c78 <HAL_UART_IRQHandler+0x258>
 8008c5a:	69bb      	ldr	r3, [r7, #24]
 8008c5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d009      	beq.n	8008c78 <HAL_UART_IRQHandler+0x258>
  {
    UART_EndTransmit_IT(huart);
 8008c64:	6878      	ldr	r0, [r7, #4]
 8008c66:	f000 fc4d 	bl	8009504 <UART_EndTransmit_IT>
    return;
 8008c6a:	bf00      	nop
 8008c6c:	e004      	b.n	8008c78 <HAL_UART_IRQHandler+0x258>
      return;
 8008c6e:	bf00      	nop
 8008c70:	e002      	b.n	8008c78 <HAL_UART_IRQHandler+0x258>
    return;
 8008c72:	bf00      	nop
 8008c74:	e000      	b.n	8008c78 <HAL_UART_IRQHandler+0x258>
    return;
 8008c76:	bf00      	nop
  }

}
 8008c78:	3720      	adds	r7, #32
 8008c7a:	46bd      	mov	sp, r7
 8008c7c:	bd80      	pop	{r7, pc}
 8008c7e:	bf00      	nop
 8008c80:	080094d9 	.word	0x080094d9

08008c84 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008c84:	b480      	push	{r7}
 8008c86:	b083      	sub	sp, #12
 8008c88:	af00      	add	r7, sp, #0
 8008c8a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8008c8c:	bf00      	nop
 8008c8e:	370c      	adds	r7, #12
 8008c90:	46bd      	mov	sp, r7
 8008c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c96:	4770      	bx	lr

08008c98 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008c98:	b480      	push	{r7}
 8008c9a:	b083      	sub	sp, #12
 8008c9c:	af00      	add	r7, sp, #0
 8008c9e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008ca0:	bf00      	nop
 8008ca2:	370c      	adds	r7, #12
 8008ca4:	46bd      	mov	sp, r7
 8008ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008caa:	4770      	bx	lr

08008cac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008cac:	b580      	push	{r7, lr}
 8008cae:	b088      	sub	sp, #32
 8008cb0:	af00      	add	r7, sp, #0
 8008cb2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8008cb4:	2300      	movs	r3, #0
 8008cb6:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8008cb8:	2300      	movs	r3, #0
 8008cba:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	689a      	ldr	r2, [r3, #8]
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	691b      	ldr	r3, [r3, #16]
 8008cc4:	431a      	orrs	r2, r3
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	695b      	ldr	r3, [r3, #20]
 8008cca:	431a      	orrs	r2, r3
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	69db      	ldr	r3, [r3, #28]
 8008cd0:	4313      	orrs	r3, r2
 8008cd2:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	681a      	ldr	r2, [r3, #0]
 8008cda:	4bb1      	ldr	r3, [pc, #708]	; (8008fa0 <UART_SetConfig+0x2f4>)
 8008cdc:	4013      	ands	r3, r2
 8008cde:	687a      	ldr	r2, [r7, #4]
 8008ce0:	6812      	ldr	r2, [r2, #0]
 8008ce2:	6939      	ldr	r1, [r7, #16]
 8008ce4:	430b      	orrs	r3, r1
 8008ce6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	685b      	ldr	r3, [r3, #4]
 8008cee:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	68da      	ldr	r2, [r3, #12]
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	430a      	orrs	r2, r1
 8008cfc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	699b      	ldr	r3, [r3, #24]
 8008d02:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	6a1b      	ldr	r3, [r3, #32]
 8008d08:	693a      	ldr	r2, [r7, #16]
 8008d0a:	4313      	orrs	r3, r2
 8008d0c:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	689b      	ldr	r3, [r3, #8]
 8008d14:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	693a      	ldr	r2, [r7, #16]
 8008d1e:	430a      	orrs	r2, r1
 8008d20:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	4a9f      	ldr	r2, [pc, #636]	; (8008fa4 <UART_SetConfig+0x2f8>)
 8008d28:	4293      	cmp	r3, r2
 8008d2a:	d121      	bne.n	8008d70 <UART_SetConfig+0xc4>
 8008d2c:	4b9e      	ldr	r3, [pc, #632]	; (8008fa8 <UART_SetConfig+0x2fc>)
 8008d2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008d32:	f003 0303 	and.w	r3, r3, #3
 8008d36:	2b03      	cmp	r3, #3
 8008d38:	d816      	bhi.n	8008d68 <UART_SetConfig+0xbc>
 8008d3a:	a201      	add	r2, pc, #4	; (adr r2, 8008d40 <UART_SetConfig+0x94>)
 8008d3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d40:	08008d51 	.word	0x08008d51
 8008d44:	08008d5d 	.word	0x08008d5d
 8008d48:	08008d57 	.word	0x08008d57
 8008d4c:	08008d63 	.word	0x08008d63
 8008d50:	2301      	movs	r3, #1
 8008d52:	77fb      	strb	r3, [r7, #31]
 8008d54:	e151      	b.n	8008ffa <UART_SetConfig+0x34e>
 8008d56:	2302      	movs	r3, #2
 8008d58:	77fb      	strb	r3, [r7, #31]
 8008d5a:	e14e      	b.n	8008ffa <UART_SetConfig+0x34e>
 8008d5c:	2304      	movs	r3, #4
 8008d5e:	77fb      	strb	r3, [r7, #31]
 8008d60:	e14b      	b.n	8008ffa <UART_SetConfig+0x34e>
 8008d62:	2308      	movs	r3, #8
 8008d64:	77fb      	strb	r3, [r7, #31]
 8008d66:	e148      	b.n	8008ffa <UART_SetConfig+0x34e>
 8008d68:	2310      	movs	r3, #16
 8008d6a:	77fb      	strb	r3, [r7, #31]
 8008d6c:	bf00      	nop
 8008d6e:	e144      	b.n	8008ffa <UART_SetConfig+0x34e>
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	4a8d      	ldr	r2, [pc, #564]	; (8008fac <UART_SetConfig+0x300>)
 8008d76:	4293      	cmp	r3, r2
 8008d78:	d134      	bne.n	8008de4 <UART_SetConfig+0x138>
 8008d7a:	4b8b      	ldr	r3, [pc, #556]	; (8008fa8 <UART_SetConfig+0x2fc>)
 8008d7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008d80:	f003 030c 	and.w	r3, r3, #12
 8008d84:	2b0c      	cmp	r3, #12
 8008d86:	d829      	bhi.n	8008ddc <UART_SetConfig+0x130>
 8008d88:	a201      	add	r2, pc, #4	; (adr r2, 8008d90 <UART_SetConfig+0xe4>)
 8008d8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d8e:	bf00      	nop
 8008d90:	08008dc5 	.word	0x08008dc5
 8008d94:	08008ddd 	.word	0x08008ddd
 8008d98:	08008ddd 	.word	0x08008ddd
 8008d9c:	08008ddd 	.word	0x08008ddd
 8008da0:	08008dd1 	.word	0x08008dd1
 8008da4:	08008ddd 	.word	0x08008ddd
 8008da8:	08008ddd 	.word	0x08008ddd
 8008dac:	08008ddd 	.word	0x08008ddd
 8008db0:	08008dcb 	.word	0x08008dcb
 8008db4:	08008ddd 	.word	0x08008ddd
 8008db8:	08008ddd 	.word	0x08008ddd
 8008dbc:	08008ddd 	.word	0x08008ddd
 8008dc0:	08008dd7 	.word	0x08008dd7
 8008dc4:	2300      	movs	r3, #0
 8008dc6:	77fb      	strb	r3, [r7, #31]
 8008dc8:	e117      	b.n	8008ffa <UART_SetConfig+0x34e>
 8008dca:	2302      	movs	r3, #2
 8008dcc:	77fb      	strb	r3, [r7, #31]
 8008dce:	e114      	b.n	8008ffa <UART_SetConfig+0x34e>
 8008dd0:	2304      	movs	r3, #4
 8008dd2:	77fb      	strb	r3, [r7, #31]
 8008dd4:	e111      	b.n	8008ffa <UART_SetConfig+0x34e>
 8008dd6:	2308      	movs	r3, #8
 8008dd8:	77fb      	strb	r3, [r7, #31]
 8008dda:	e10e      	b.n	8008ffa <UART_SetConfig+0x34e>
 8008ddc:	2310      	movs	r3, #16
 8008dde:	77fb      	strb	r3, [r7, #31]
 8008de0:	bf00      	nop
 8008de2:	e10a      	b.n	8008ffa <UART_SetConfig+0x34e>
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	4a71      	ldr	r2, [pc, #452]	; (8008fb0 <UART_SetConfig+0x304>)
 8008dea:	4293      	cmp	r3, r2
 8008dec:	d120      	bne.n	8008e30 <UART_SetConfig+0x184>
 8008dee:	4b6e      	ldr	r3, [pc, #440]	; (8008fa8 <UART_SetConfig+0x2fc>)
 8008df0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008df4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008df8:	2b10      	cmp	r3, #16
 8008dfa:	d00f      	beq.n	8008e1c <UART_SetConfig+0x170>
 8008dfc:	2b10      	cmp	r3, #16
 8008dfe:	d802      	bhi.n	8008e06 <UART_SetConfig+0x15a>
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d005      	beq.n	8008e10 <UART_SetConfig+0x164>
 8008e04:	e010      	b.n	8008e28 <UART_SetConfig+0x17c>
 8008e06:	2b20      	cmp	r3, #32
 8008e08:	d005      	beq.n	8008e16 <UART_SetConfig+0x16a>
 8008e0a:	2b30      	cmp	r3, #48	; 0x30
 8008e0c:	d009      	beq.n	8008e22 <UART_SetConfig+0x176>
 8008e0e:	e00b      	b.n	8008e28 <UART_SetConfig+0x17c>
 8008e10:	2300      	movs	r3, #0
 8008e12:	77fb      	strb	r3, [r7, #31]
 8008e14:	e0f1      	b.n	8008ffa <UART_SetConfig+0x34e>
 8008e16:	2302      	movs	r3, #2
 8008e18:	77fb      	strb	r3, [r7, #31]
 8008e1a:	e0ee      	b.n	8008ffa <UART_SetConfig+0x34e>
 8008e1c:	2304      	movs	r3, #4
 8008e1e:	77fb      	strb	r3, [r7, #31]
 8008e20:	e0eb      	b.n	8008ffa <UART_SetConfig+0x34e>
 8008e22:	2308      	movs	r3, #8
 8008e24:	77fb      	strb	r3, [r7, #31]
 8008e26:	e0e8      	b.n	8008ffa <UART_SetConfig+0x34e>
 8008e28:	2310      	movs	r3, #16
 8008e2a:	77fb      	strb	r3, [r7, #31]
 8008e2c:	bf00      	nop
 8008e2e:	e0e4      	b.n	8008ffa <UART_SetConfig+0x34e>
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	4a5f      	ldr	r2, [pc, #380]	; (8008fb4 <UART_SetConfig+0x308>)
 8008e36:	4293      	cmp	r3, r2
 8008e38:	d120      	bne.n	8008e7c <UART_SetConfig+0x1d0>
 8008e3a:	4b5b      	ldr	r3, [pc, #364]	; (8008fa8 <UART_SetConfig+0x2fc>)
 8008e3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008e40:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8008e44:	2b40      	cmp	r3, #64	; 0x40
 8008e46:	d00f      	beq.n	8008e68 <UART_SetConfig+0x1bc>
 8008e48:	2b40      	cmp	r3, #64	; 0x40
 8008e4a:	d802      	bhi.n	8008e52 <UART_SetConfig+0x1a6>
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d005      	beq.n	8008e5c <UART_SetConfig+0x1b0>
 8008e50:	e010      	b.n	8008e74 <UART_SetConfig+0x1c8>
 8008e52:	2b80      	cmp	r3, #128	; 0x80
 8008e54:	d005      	beq.n	8008e62 <UART_SetConfig+0x1b6>
 8008e56:	2bc0      	cmp	r3, #192	; 0xc0
 8008e58:	d009      	beq.n	8008e6e <UART_SetConfig+0x1c2>
 8008e5a:	e00b      	b.n	8008e74 <UART_SetConfig+0x1c8>
 8008e5c:	2300      	movs	r3, #0
 8008e5e:	77fb      	strb	r3, [r7, #31]
 8008e60:	e0cb      	b.n	8008ffa <UART_SetConfig+0x34e>
 8008e62:	2302      	movs	r3, #2
 8008e64:	77fb      	strb	r3, [r7, #31]
 8008e66:	e0c8      	b.n	8008ffa <UART_SetConfig+0x34e>
 8008e68:	2304      	movs	r3, #4
 8008e6a:	77fb      	strb	r3, [r7, #31]
 8008e6c:	e0c5      	b.n	8008ffa <UART_SetConfig+0x34e>
 8008e6e:	2308      	movs	r3, #8
 8008e70:	77fb      	strb	r3, [r7, #31]
 8008e72:	e0c2      	b.n	8008ffa <UART_SetConfig+0x34e>
 8008e74:	2310      	movs	r3, #16
 8008e76:	77fb      	strb	r3, [r7, #31]
 8008e78:	bf00      	nop
 8008e7a:	e0be      	b.n	8008ffa <UART_SetConfig+0x34e>
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	4a4d      	ldr	r2, [pc, #308]	; (8008fb8 <UART_SetConfig+0x30c>)
 8008e82:	4293      	cmp	r3, r2
 8008e84:	d124      	bne.n	8008ed0 <UART_SetConfig+0x224>
 8008e86:	4b48      	ldr	r3, [pc, #288]	; (8008fa8 <UART_SetConfig+0x2fc>)
 8008e88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008e8c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008e90:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008e94:	d012      	beq.n	8008ebc <UART_SetConfig+0x210>
 8008e96:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008e9a:	d802      	bhi.n	8008ea2 <UART_SetConfig+0x1f6>
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d007      	beq.n	8008eb0 <UART_SetConfig+0x204>
 8008ea0:	e012      	b.n	8008ec8 <UART_SetConfig+0x21c>
 8008ea2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008ea6:	d006      	beq.n	8008eb6 <UART_SetConfig+0x20a>
 8008ea8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008eac:	d009      	beq.n	8008ec2 <UART_SetConfig+0x216>
 8008eae:	e00b      	b.n	8008ec8 <UART_SetConfig+0x21c>
 8008eb0:	2300      	movs	r3, #0
 8008eb2:	77fb      	strb	r3, [r7, #31]
 8008eb4:	e0a1      	b.n	8008ffa <UART_SetConfig+0x34e>
 8008eb6:	2302      	movs	r3, #2
 8008eb8:	77fb      	strb	r3, [r7, #31]
 8008eba:	e09e      	b.n	8008ffa <UART_SetConfig+0x34e>
 8008ebc:	2304      	movs	r3, #4
 8008ebe:	77fb      	strb	r3, [r7, #31]
 8008ec0:	e09b      	b.n	8008ffa <UART_SetConfig+0x34e>
 8008ec2:	2308      	movs	r3, #8
 8008ec4:	77fb      	strb	r3, [r7, #31]
 8008ec6:	e098      	b.n	8008ffa <UART_SetConfig+0x34e>
 8008ec8:	2310      	movs	r3, #16
 8008eca:	77fb      	strb	r3, [r7, #31]
 8008ecc:	bf00      	nop
 8008ece:	e094      	b.n	8008ffa <UART_SetConfig+0x34e>
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	4a39      	ldr	r2, [pc, #228]	; (8008fbc <UART_SetConfig+0x310>)
 8008ed6:	4293      	cmp	r3, r2
 8008ed8:	d124      	bne.n	8008f24 <UART_SetConfig+0x278>
 8008eda:	4b33      	ldr	r3, [pc, #204]	; (8008fa8 <UART_SetConfig+0x2fc>)
 8008edc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008ee0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8008ee4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008ee8:	d012      	beq.n	8008f10 <UART_SetConfig+0x264>
 8008eea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008eee:	d802      	bhi.n	8008ef6 <UART_SetConfig+0x24a>
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d007      	beq.n	8008f04 <UART_SetConfig+0x258>
 8008ef4:	e012      	b.n	8008f1c <UART_SetConfig+0x270>
 8008ef6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008efa:	d006      	beq.n	8008f0a <UART_SetConfig+0x25e>
 8008efc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008f00:	d009      	beq.n	8008f16 <UART_SetConfig+0x26a>
 8008f02:	e00b      	b.n	8008f1c <UART_SetConfig+0x270>
 8008f04:	2301      	movs	r3, #1
 8008f06:	77fb      	strb	r3, [r7, #31]
 8008f08:	e077      	b.n	8008ffa <UART_SetConfig+0x34e>
 8008f0a:	2302      	movs	r3, #2
 8008f0c:	77fb      	strb	r3, [r7, #31]
 8008f0e:	e074      	b.n	8008ffa <UART_SetConfig+0x34e>
 8008f10:	2304      	movs	r3, #4
 8008f12:	77fb      	strb	r3, [r7, #31]
 8008f14:	e071      	b.n	8008ffa <UART_SetConfig+0x34e>
 8008f16:	2308      	movs	r3, #8
 8008f18:	77fb      	strb	r3, [r7, #31]
 8008f1a:	e06e      	b.n	8008ffa <UART_SetConfig+0x34e>
 8008f1c:	2310      	movs	r3, #16
 8008f1e:	77fb      	strb	r3, [r7, #31]
 8008f20:	bf00      	nop
 8008f22:	e06a      	b.n	8008ffa <UART_SetConfig+0x34e>
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	4a25      	ldr	r2, [pc, #148]	; (8008fc0 <UART_SetConfig+0x314>)
 8008f2a:	4293      	cmp	r3, r2
 8008f2c:	d124      	bne.n	8008f78 <UART_SetConfig+0x2cc>
 8008f2e:	4b1e      	ldr	r3, [pc, #120]	; (8008fa8 <UART_SetConfig+0x2fc>)
 8008f30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008f34:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8008f38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008f3c:	d012      	beq.n	8008f64 <UART_SetConfig+0x2b8>
 8008f3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008f42:	d802      	bhi.n	8008f4a <UART_SetConfig+0x29e>
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d007      	beq.n	8008f58 <UART_SetConfig+0x2ac>
 8008f48:	e012      	b.n	8008f70 <UART_SetConfig+0x2c4>
 8008f4a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008f4e:	d006      	beq.n	8008f5e <UART_SetConfig+0x2b2>
 8008f50:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008f54:	d009      	beq.n	8008f6a <UART_SetConfig+0x2be>
 8008f56:	e00b      	b.n	8008f70 <UART_SetConfig+0x2c4>
 8008f58:	2300      	movs	r3, #0
 8008f5a:	77fb      	strb	r3, [r7, #31]
 8008f5c:	e04d      	b.n	8008ffa <UART_SetConfig+0x34e>
 8008f5e:	2302      	movs	r3, #2
 8008f60:	77fb      	strb	r3, [r7, #31]
 8008f62:	e04a      	b.n	8008ffa <UART_SetConfig+0x34e>
 8008f64:	2304      	movs	r3, #4
 8008f66:	77fb      	strb	r3, [r7, #31]
 8008f68:	e047      	b.n	8008ffa <UART_SetConfig+0x34e>
 8008f6a:	2308      	movs	r3, #8
 8008f6c:	77fb      	strb	r3, [r7, #31]
 8008f6e:	e044      	b.n	8008ffa <UART_SetConfig+0x34e>
 8008f70:	2310      	movs	r3, #16
 8008f72:	77fb      	strb	r3, [r7, #31]
 8008f74:	bf00      	nop
 8008f76:	e040      	b.n	8008ffa <UART_SetConfig+0x34e>
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	4a11      	ldr	r2, [pc, #68]	; (8008fc4 <UART_SetConfig+0x318>)
 8008f7e:	4293      	cmp	r3, r2
 8008f80:	d139      	bne.n	8008ff6 <UART_SetConfig+0x34a>
 8008f82:	4b09      	ldr	r3, [pc, #36]	; (8008fa8 <UART_SetConfig+0x2fc>)
 8008f84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008f88:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8008f8c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008f90:	d027      	beq.n	8008fe2 <UART_SetConfig+0x336>
 8008f92:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008f96:	d817      	bhi.n	8008fc8 <UART_SetConfig+0x31c>
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d01c      	beq.n	8008fd6 <UART_SetConfig+0x32a>
 8008f9c:	e027      	b.n	8008fee <UART_SetConfig+0x342>
 8008f9e:	bf00      	nop
 8008fa0:	efff69f3 	.word	0xefff69f3
 8008fa4:	40011000 	.word	0x40011000
 8008fa8:	40023800 	.word	0x40023800
 8008fac:	40004400 	.word	0x40004400
 8008fb0:	40004800 	.word	0x40004800
 8008fb4:	40004c00 	.word	0x40004c00
 8008fb8:	40005000 	.word	0x40005000
 8008fbc:	40011400 	.word	0x40011400
 8008fc0:	40007800 	.word	0x40007800
 8008fc4:	40007c00 	.word	0x40007c00
 8008fc8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008fcc:	d006      	beq.n	8008fdc <UART_SetConfig+0x330>
 8008fce:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8008fd2:	d009      	beq.n	8008fe8 <UART_SetConfig+0x33c>
 8008fd4:	e00b      	b.n	8008fee <UART_SetConfig+0x342>
 8008fd6:	2300      	movs	r3, #0
 8008fd8:	77fb      	strb	r3, [r7, #31]
 8008fda:	e00e      	b.n	8008ffa <UART_SetConfig+0x34e>
 8008fdc:	2302      	movs	r3, #2
 8008fde:	77fb      	strb	r3, [r7, #31]
 8008fe0:	e00b      	b.n	8008ffa <UART_SetConfig+0x34e>
 8008fe2:	2304      	movs	r3, #4
 8008fe4:	77fb      	strb	r3, [r7, #31]
 8008fe6:	e008      	b.n	8008ffa <UART_SetConfig+0x34e>
 8008fe8:	2308      	movs	r3, #8
 8008fea:	77fb      	strb	r3, [r7, #31]
 8008fec:	e005      	b.n	8008ffa <UART_SetConfig+0x34e>
 8008fee:	2310      	movs	r3, #16
 8008ff0:	77fb      	strb	r3, [r7, #31]
 8008ff2:	bf00      	nop
 8008ff4:	e001      	b.n	8008ffa <UART_SetConfig+0x34e>
 8008ff6:	2310      	movs	r3, #16
 8008ff8:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	69db      	ldr	r3, [r3, #28]
 8008ffe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009002:	d17f      	bne.n	8009104 <UART_SetConfig+0x458>
  {
    switch (clocksource)
 8009004:	7ffb      	ldrb	r3, [r7, #31]
 8009006:	2b08      	cmp	r3, #8
 8009008:	d85c      	bhi.n	80090c4 <UART_SetConfig+0x418>
 800900a:	a201      	add	r2, pc, #4	; (adr r2, 8009010 <UART_SetConfig+0x364>)
 800900c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009010:	08009035 	.word	0x08009035
 8009014:	08009055 	.word	0x08009055
 8009018:	08009075 	.word	0x08009075
 800901c:	080090c5 	.word	0x080090c5
 8009020:	0800908d 	.word	0x0800908d
 8009024:	080090c5 	.word	0x080090c5
 8009028:	080090c5 	.word	0x080090c5
 800902c:	080090c5 	.word	0x080090c5
 8009030:	080090ad 	.word	0x080090ad
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009034:	f7fd fa06 	bl	8006444 <HAL_RCC_GetPCLK1Freq>
 8009038:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	005a      	lsls	r2, r3, #1
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	685b      	ldr	r3, [r3, #4]
 8009042:	085b      	lsrs	r3, r3, #1
 8009044:	441a      	add	r2, r3
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	685b      	ldr	r3, [r3, #4]
 800904a:	fbb2 f3f3 	udiv	r3, r2, r3
 800904e:	b29b      	uxth	r3, r3
 8009050:	61bb      	str	r3, [r7, #24]
        break;
 8009052:	e03a      	b.n	80090ca <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009054:	f7fd fa0a 	bl	800646c <HAL_RCC_GetPCLK2Freq>
 8009058:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	005a      	lsls	r2, r3, #1
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	685b      	ldr	r3, [r3, #4]
 8009062:	085b      	lsrs	r3, r3, #1
 8009064:	441a      	add	r2, r3
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	685b      	ldr	r3, [r3, #4]
 800906a:	fbb2 f3f3 	udiv	r3, r2, r3
 800906e:	b29b      	uxth	r3, r3
 8009070:	61bb      	str	r3, [r7, #24]
        break;
 8009072:	e02a      	b.n	80090ca <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	685b      	ldr	r3, [r3, #4]
 8009078:	085a      	lsrs	r2, r3, #1
 800907a:	4b5f      	ldr	r3, [pc, #380]	; (80091f8 <UART_SetConfig+0x54c>)
 800907c:	4413      	add	r3, r2
 800907e:	687a      	ldr	r2, [r7, #4]
 8009080:	6852      	ldr	r2, [r2, #4]
 8009082:	fbb3 f3f2 	udiv	r3, r3, r2
 8009086:	b29b      	uxth	r3, r3
 8009088:	61bb      	str	r3, [r7, #24]
        break;
 800908a:	e01e      	b.n	80090ca <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800908c:	f7fd f8f6 	bl	800627c <HAL_RCC_GetSysClockFreq>
 8009090:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	005a      	lsls	r2, r3, #1
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	685b      	ldr	r3, [r3, #4]
 800909a:	085b      	lsrs	r3, r3, #1
 800909c:	441a      	add	r2, r3
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	685b      	ldr	r3, [r3, #4]
 80090a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80090a6:	b29b      	uxth	r3, r3
 80090a8:	61bb      	str	r3, [r7, #24]
        break;
 80090aa:	e00e      	b.n	80090ca <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	685b      	ldr	r3, [r3, #4]
 80090b0:	085b      	lsrs	r3, r3, #1
 80090b2:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	685b      	ldr	r3, [r3, #4]
 80090ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80090be:	b29b      	uxth	r3, r3
 80090c0:	61bb      	str	r3, [r7, #24]
        break;
 80090c2:	e002      	b.n	80090ca <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 80090c4:	2301      	movs	r3, #1
 80090c6:	75fb      	strb	r3, [r7, #23]
        break;
 80090c8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80090ca:	69bb      	ldr	r3, [r7, #24]
 80090cc:	2b0f      	cmp	r3, #15
 80090ce:	d916      	bls.n	80090fe <UART_SetConfig+0x452>
 80090d0:	69bb      	ldr	r3, [r7, #24]
 80090d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80090d6:	d212      	bcs.n	80090fe <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80090d8:	69bb      	ldr	r3, [r7, #24]
 80090da:	b29b      	uxth	r3, r3
 80090dc:	f023 030f 	bic.w	r3, r3, #15
 80090e0:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80090e2:	69bb      	ldr	r3, [r7, #24]
 80090e4:	085b      	lsrs	r3, r3, #1
 80090e6:	b29b      	uxth	r3, r3
 80090e8:	f003 0307 	and.w	r3, r3, #7
 80090ec:	b29a      	uxth	r2, r3
 80090ee:	897b      	ldrh	r3, [r7, #10]
 80090f0:	4313      	orrs	r3, r2
 80090f2:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	897a      	ldrh	r2, [r7, #10]
 80090fa:	60da      	str	r2, [r3, #12]
 80090fc:	e070      	b.n	80091e0 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 80090fe:	2301      	movs	r3, #1
 8009100:	75fb      	strb	r3, [r7, #23]
 8009102:	e06d      	b.n	80091e0 <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 8009104:	7ffb      	ldrb	r3, [r7, #31]
 8009106:	2b08      	cmp	r3, #8
 8009108:	d859      	bhi.n	80091be <UART_SetConfig+0x512>
 800910a:	a201      	add	r2, pc, #4	; (adr r2, 8009110 <UART_SetConfig+0x464>)
 800910c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009110:	08009135 	.word	0x08009135
 8009114:	08009153 	.word	0x08009153
 8009118:	08009171 	.word	0x08009171
 800911c:	080091bf 	.word	0x080091bf
 8009120:	08009189 	.word	0x08009189
 8009124:	080091bf 	.word	0x080091bf
 8009128:	080091bf 	.word	0x080091bf
 800912c:	080091bf 	.word	0x080091bf
 8009130:	080091a7 	.word	0x080091a7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009134:	f7fd f986 	bl	8006444 <HAL_RCC_GetPCLK1Freq>
 8009138:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	685b      	ldr	r3, [r3, #4]
 800913e:	085a      	lsrs	r2, r3, #1
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	441a      	add	r2, r3
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	685b      	ldr	r3, [r3, #4]
 8009148:	fbb2 f3f3 	udiv	r3, r2, r3
 800914c:	b29b      	uxth	r3, r3
 800914e:	61bb      	str	r3, [r7, #24]
        break;
 8009150:	e038      	b.n	80091c4 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009152:	f7fd f98b 	bl	800646c <HAL_RCC_GetPCLK2Freq>
 8009156:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	685b      	ldr	r3, [r3, #4]
 800915c:	085a      	lsrs	r2, r3, #1
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	441a      	add	r2, r3
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	685b      	ldr	r3, [r3, #4]
 8009166:	fbb2 f3f3 	udiv	r3, r2, r3
 800916a:	b29b      	uxth	r3, r3
 800916c:	61bb      	str	r3, [r7, #24]
        break;
 800916e:	e029      	b.n	80091c4 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	685b      	ldr	r3, [r3, #4]
 8009174:	085a      	lsrs	r2, r3, #1
 8009176:	4b21      	ldr	r3, [pc, #132]	; (80091fc <UART_SetConfig+0x550>)
 8009178:	4413      	add	r3, r2
 800917a:	687a      	ldr	r2, [r7, #4]
 800917c:	6852      	ldr	r2, [r2, #4]
 800917e:	fbb3 f3f2 	udiv	r3, r3, r2
 8009182:	b29b      	uxth	r3, r3
 8009184:	61bb      	str	r3, [r7, #24]
        break;
 8009186:	e01d      	b.n	80091c4 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009188:	f7fd f878 	bl	800627c <HAL_RCC_GetSysClockFreq>
 800918c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	685b      	ldr	r3, [r3, #4]
 8009192:	085a      	lsrs	r2, r3, #1
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	441a      	add	r2, r3
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	685b      	ldr	r3, [r3, #4]
 800919c:	fbb2 f3f3 	udiv	r3, r2, r3
 80091a0:	b29b      	uxth	r3, r3
 80091a2:	61bb      	str	r3, [r7, #24]
        break;
 80091a4:	e00e      	b.n	80091c4 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	685b      	ldr	r3, [r3, #4]
 80091aa:	085b      	lsrs	r3, r3, #1
 80091ac:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	685b      	ldr	r3, [r3, #4]
 80091b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80091b8:	b29b      	uxth	r3, r3
 80091ba:	61bb      	str	r3, [r7, #24]
        break;
 80091bc:	e002      	b.n	80091c4 <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 80091be:	2301      	movs	r3, #1
 80091c0:	75fb      	strb	r3, [r7, #23]
        break;
 80091c2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80091c4:	69bb      	ldr	r3, [r7, #24]
 80091c6:	2b0f      	cmp	r3, #15
 80091c8:	d908      	bls.n	80091dc <UART_SetConfig+0x530>
 80091ca:	69bb      	ldr	r3, [r7, #24]
 80091cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80091d0:	d204      	bcs.n	80091dc <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	69ba      	ldr	r2, [r7, #24]
 80091d8:	60da      	str	r2, [r3, #12]
 80091da:	e001      	b.n	80091e0 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 80091dc:	2301      	movs	r3, #1
 80091de:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	2200      	movs	r2, #0
 80091e4:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	2200      	movs	r2, #0
 80091ea:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 80091ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80091ee:	4618      	mov	r0, r3
 80091f0:	3720      	adds	r7, #32
 80091f2:	46bd      	mov	sp, r7
 80091f4:	bd80      	pop	{r7, pc}
 80091f6:	bf00      	nop
 80091f8:	01e84800 	.word	0x01e84800
 80091fc:	00f42400 	.word	0x00f42400

08009200 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009200:	b480      	push	{r7}
 8009202:	b083      	sub	sp, #12
 8009204:	af00      	add	r7, sp, #0
 8009206:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800920c:	f003 0301 	and.w	r3, r3, #1
 8009210:	2b00      	cmp	r3, #0
 8009212:	d00a      	beq.n	800922a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	685b      	ldr	r3, [r3, #4]
 800921a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	430a      	orrs	r2, r1
 8009228:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800922e:	f003 0302 	and.w	r3, r3, #2
 8009232:	2b00      	cmp	r3, #0
 8009234:	d00a      	beq.n	800924c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	685b      	ldr	r3, [r3, #4]
 800923c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	430a      	orrs	r2, r1
 800924a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009250:	f003 0304 	and.w	r3, r3, #4
 8009254:	2b00      	cmp	r3, #0
 8009256:	d00a      	beq.n	800926e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	685b      	ldr	r3, [r3, #4]
 800925e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	430a      	orrs	r2, r1
 800926c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009272:	f003 0308 	and.w	r3, r3, #8
 8009276:	2b00      	cmp	r3, #0
 8009278:	d00a      	beq.n	8009290 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	685b      	ldr	r3, [r3, #4]
 8009280:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	430a      	orrs	r2, r1
 800928e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009294:	f003 0310 	and.w	r3, r3, #16
 8009298:	2b00      	cmp	r3, #0
 800929a:	d00a      	beq.n	80092b2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	689b      	ldr	r3, [r3, #8]
 80092a2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	430a      	orrs	r2, r1
 80092b0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092b6:	f003 0320 	and.w	r3, r3, #32
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d00a      	beq.n	80092d4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	689b      	ldr	r3, [r3, #8]
 80092c4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	430a      	orrs	r2, r1
 80092d2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d01a      	beq.n	8009316 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	685b      	ldr	r3, [r3, #4]
 80092e6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	430a      	orrs	r2, r1
 80092f4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80092fe:	d10a      	bne.n	8009316 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	685b      	ldr	r3, [r3, #4]
 8009306:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	430a      	orrs	r2, r1
 8009314:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800931a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800931e:	2b00      	cmp	r3, #0
 8009320:	d00a      	beq.n	8009338 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	685b      	ldr	r3, [r3, #4]
 8009328:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	430a      	orrs	r2, r1
 8009336:	605a      	str	r2, [r3, #4]
  }
}
 8009338:	bf00      	nop
 800933a:	370c      	adds	r7, #12
 800933c:	46bd      	mov	sp, r7
 800933e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009342:	4770      	bx	lr

08009344 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009344:	b580      	push	{r7, lr}
 8009346:	b086      	sub	sp, #24
 8009348:	af02      	add	r7, sp, #8
 800934a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	2200      	movs	r2, #0
 8009350:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8009352:	f7fa fb25 	bl	80039a0 <HAL_GetTick>
 8009356:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	f003 0308 	and.w	r3, r3, #8
 8009362:	2b08      	cmp	r3, #8
 8009364:	d10e      	bne.n	8009384 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009366:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800936a:	9300      	str	r3, [sp, #0]
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	2200      	movs	r2, #0
 8009370:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009374:	6878      	ldr	r0, [r7, #4]
 8009376:	f000 f814 	bl	80093a2 <UART_WaitOnFlagUntilTimeout>
 800937a:	4603      	mov	r3, r0
 800937c:	2b00      	cmp	r3, #0
 800937e:	d001      	beq.n	8009384 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009380:	2303      	movs	r3, #3
 8009382:	e00a      	b.n	800939a <UART_CheckIdleState+0x56>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	2220      	movs	r2, #32
 8009388:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	2220      	movs	r2, #32
 800938e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	2200      	movs	r2, #0
 8009394:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8009398:	2300      	movs	r3, #0
}
 800939a:	4618      	mov	r0, r3
 800939c:	3710      	adds	r7, #16
 800939e:	46bd      	mov	sp, r7
 80093a0:	bd80      	pop	{r7, pc}

080093a2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80093a2:	b580      	push	{r7, lr}
 80093a4:	b084      	sub	sp, #16
 80093a6:	af00      	add	r7, sp, #0
 80093a8:	60f8      	str	r0, [r7, #12]
 80093aa:	60b9      	str	r1, [r7, #8]
 80093ac:	603b      	str	r3, [r7, #0]
 80093ae:	4613      	mov	r3, r2
 80093b0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80093b2:	e05d      	b.n	8009470 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80093b4:	69bb      	ldr	r3, [r7, #24]
 80093b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093ba:	d059      	beq.n	8009470 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80093bc:	f7fa faf0 	bl	80039a0 <HAL_GetTick>
 80093c0:	4602      	mov	r2, r0
 80093c2:	683b      	ldr	r3, [r7, #0]
 80093c4:	1ad3      	subs	r3, r2, r3
 80093c6:	69ba      	ldr	r2, [r7, #24]
 80093c8:	429a      	cmp	r2, r3
 80093ca:	d302      	bcc.n	80093d2 <UART_WaitOnFlagUntilTimeout+0x30>
 80093cc:	69bb      	ldr	r3, [r7, #24]
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d11b      	bne.n	800940a <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	681a      	ldr	r2, [r3, #0]
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80093e0:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	689a      	ldr	r2, [r3, #8]
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	f022 0201 	bic.w	r2, r2, #1
 80093f0:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	2220      	movs	r2, #32
 80093f6:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	2220      	movs	r2, #32
 80093fc:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	2200      	movs	r2, #0
 8009402:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8009406:	2303      	movs	r3, #3
 8009408:	e042      	b.n	8009490 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	f003 0304 	and.w	r3, r3, #4
 8009414:	2b00      	cmp	r3, #0
 8009416:	d02b      	beq.n	8009470 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	69db      	ldr	r3, [r3, #28]
 800941e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009422:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009426:	d123      	bne.n	8009470 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009430:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	681a      	ldr	r2, [r3, #0]
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8009440:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	689a      	ldr	r2, [r3, #8]
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	f022 0201 	bic.w	r2, r2, #1
 8009450:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	2220      	movs	r2, #32
 8009456:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	2220      	movs	r2, #32
 800945c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	2220      	movs	r2, #32
 8009462:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	2200      	movs	r2, #0
 8009468:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 800946c:	2303      	movs	r3, #3
 800946e:	e00f      	b.n	8009490 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	69da      	ldr	r2, [r3, #28]
 8009476:	68bb      	ldr	r3, [r7, #8]
 8009478:	4013      	ands	r3, r2
 800947a:	68ba      	ldr	r2, [r7, #8]
 800947c:	429a      	cmp	r2, r3
 800947e:	bf0c      	ite	eq
 8009480:	2301      	moveq	r3, #1
 8009482:	2300      	movne	r3, #0
 8009484:	b2db      	uxtb	r3, r3
 8009486:	461a      	mov	r2, r3
 8009488:	79fb      	ldrb	r3, [r7, #7]
 800948a:	429a      	cmp	r2, r3
 800948c:	d092      	beq.n	80093b4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800948e:	2300      	movs	r3, #0
}
 8009490:	4618      	mov	r0, r3
 8009492:	3710      	adds	r7, #16
 8009494:	46bd      	mov	sp, r7
 8009496:	bd80      	pop	{r7, pc}

08009498 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009498:	b480      	push	{r7}
 800949a:	b083      	sub	sp, #12
 800949c:	af00      	add	r7, sp, #0
 800949e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	681a      	ldr	r2, [r3, #0]
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80094ae:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	689a      	ldr	r2, [r3, #8]
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	f022 0201 	bic.w	r2, r2, #1
 80094be:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	2220      	movs	r2, #32
 80094c4:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	2200      	movs	r2, #0
 80094ca:	661a      	str	r2, [r3, #96]	; 0x60
}
 80094cc:	bf00      	nop
 80094ce:	370c      	adds	r7, #12
 80094d0:	46bd      	mov	sp, r7
 80094d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094d6:	4770      	bx	lr

080094d8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80094d8:	b580      	push	{r7, lr}
 80094da:	b084      	sub	sp, #16
 80094dc:	af00      	add	r7, sp, #0
 80094de:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094e4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	2200      	movs	r2, #0
 80094ea:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	2200      	movs	r2, #0
 80094f2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80094f6:	68f8      	ldr	r0, [r7, #12]
 80094f8:	f7ff fbce 	bl	8008c98 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80094fc:	bf00      	nop
 80094fe:	3710      	adds	r7, #16
 8009500:	46bd      	mov	sp, r7
 8009502:	bd80      	pop	{r7, pc}

08009504 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009504:	b580      	push	{r7, lr}
 8009506:	b082      	sub	sp, #8
 8009508:	af00      	add	r7, sp, #0
 800950a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	681a      	ldr	r2, [r3, #0]
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800951a:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	2220      	movs	r2, #32
 8009520:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	2200      	movs	r2, #0
 8009526:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009528:	6878      	ldr	r0, [r7, #4]
 800952a:	f7ff fbab 	bl	8008c84 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800952e:	bf00      	nop
 8009530:	3708      	adds	r7, #8
 8009532:	46bd      	mov	sp, r7
 8009534:	bd80      	pop	{r7, pc}
	...

08009538 <__errno>:
 8009538:	4b01      	ldr	r3, [pc, #4]	; (8009540 <__errno+0x8>)
 800953a:	6818      	ldr	r0, [r3, #0]
 800953c:	4770      	bx	lr
 800953e:	bf00      	nop
 8009540:	20000150 	.word	0x20000150

08009544 <__libc_init_array>:
 8009544:	b570      	push	{r4, r5, r6, lr}
 8009546:	4e0d      	ldr	r6, [pc, #52]	; (800957c <__libc_init_array+0x38>)
 8009548:	4c0d      	ldr	r4, [pc, #52]	; (8009580 <__libc_init_array+0x3c>)
 800954a:	1ba4      	subs	r4, r4, r6
 800954c:	10a4      	asrs	r4, r4, #2
 800954e:	2500      	movs	r5, #0
 8009550:	42a5      	cmp	r5, r4
 8009552:	d109      	bne.n	8009568 <__libc_init_array+0x24>
 8009554:	4e0b      	ldr	r6, [pc, #44]	; (8009584 <__libc_init_array+0x40>)
 8009556:	4c0c      	ldr	r4, [pc, #48]	; (8009588 <__libc_init_array+0x44>)
 8009558:	f000 fc46 	bl	8009de8 <_init>
 800955c:	1ba4      	subs	r4, r4, r6
 800955e:	10a4      	asrs	r4, r4, #2
 8009560:	2500      	movs	r5, #0
 8009562:	42a5      	cmp	r5, r4
 8009564:	d105      	bne.n	8009572 <__libc_init_array+0x2e>
 8009566:	bd70      	pop	{r4, r5, r6, pc}
 8009568:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800956c:	4798      	blx	r3
 800956e:	3501      	adds	r5, #1
 8009570:	e7ee      	b.n	8009550 <__libc_init_array+0xc>
 8009572:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009576:	4798      	blx	r3
 8009578:	3501      	adds	r5, #1
 800957a:	e7f2      	b.n	8009562 <__libc_init_array+0x1e>
 800957c:	08009f54 	.word	0x08009f54
 8009580:	08009f54 	.word	0x08009f54
 8009584:	08009f54 	.word	0x08009f54
 8009588:	08009f58 	.word	0x08009f58

0800958c <memset>:
 800958c:	4402      	add	r2, r0
 800958e:	4603      	mov	r3, r0
 8009590:	4293      	cmp	r3, r2
 8009592:	d100      	bne.n	8009596 <memset+0xa>
 8009594:	4770      	bx	lr
 8009596:	f803 1b01 	strb.w	r1, [r3], #1
 800959a:	e7f9      	b.n	8009590 <memset+0x4>

0800959c <siprintf>:
 800959c:	b40e      	push	{r1, r2, r3}
 800959e:	b500      	push	{lr}
 80095a0:	b09c      	sub	sp, #112	; 0x70
 80095a2:	ab1d      	add	r3, sp, #116	; 0x74
 80095a4:	9002      	str	r0, [sp, #8]
 80095a6:	9006      	str	r0, [sp, #24]
 80095a8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80095ac:	4809      	ldr	r0, [pc, #36]	; (80095d4 <siprintf+0x38>)
 80095ae:	9107      	str	r1, [sp, #28]
 80095b0:	9104      	str	r1, [sp, #16]
 80095b2:	4909      	ldr	r1, [pc, #36]	; (80095d8 <siprintf+0x3c>)
 80095b4:	f853 2b04 	ldr.w	r2, [r3], #4
 80095b8:	9105      	str	r1, [sp, #20]
 80095ba:	6800      	ldr	r0, [r0, #0]
 80095bc:	9301      	str	r3, [sp, #4]
 80095be:	a902      	add	r1, sp, #8
 80095c0:	f000 f886 	bl	80096d0 <_svfiprintf_r>
 80095c4:	9b02      	ldr	r3, [sp, #8]
 80095c6:	2200      	movs	r2, #0
 80095c8:	701a      	strb	r2, [r3, #0]
 80095ca:	b01c      	add	sp, #112	; 0x70
 80095cc:	f85d eb04 	ldr.w	lr, [sp], #4
 80095d0:	b003      	add	sp, #12
 80095d2:	4770      	bx	lr
 80095d4:	20000150 	.word	0x20000150
 80095d8:	ffff0208 	.word	0xffff0208

080095dc <_vsiprintf_r>:
 80095dc:	b500      	push	{lr}
 80095de:	b09b      	sub	sp, #108	; 0x6c
 80095e0:	9100      	str	r1, [sp, #0]
 80095e2:	9104      	str	r1, [sp, #16]
 80095e4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80095e8:	9105      	str	r1, [sp, #20]
 80095ea:	9102      	str	r1, [sp, #8]
 80095ec:	4905      	ldr	r1, [pc, #20]	; (8009604 <_vsiprintf_r+0x28>)
 80095ee:	9103      	str	r1, [sp, #12]
 80095f0:	4669      	mov	r1, sp
 80095f2:	f000 f86d 	bl	80096d0 <_svfiprintf_r>
 80095f6:	9b00      	ldr	r3, [sp, #0]
 80095f8:	2200      	movs	r2, #0
 80095fa:	701a      	strb	r2, [r3, #0]
 80095fc:	b01b      	add	sp, #108	; 0x6c
 80095fe:	f85d fb04 	ldr.w	pc, [sp], #4
 8009602:	bf00      	nop
 8009604:	ffff0208 	.word	0xffff0208

08009608 <vsiprintf>:
 8009608:	4613      	mov	r3, r2
 800960a:	460a      	mov	r2, r1
 800960c:	4601      	mov	r1, r0
 800960e:	4802      	ldr	r0, [pc, #8]	; (8009618 <vsiprintf+0x10>)
 8009610:	6800      	ldr	r0, [r0, #0]
 8009612:	f7ff bfe3 	b.w	80095dc <_vsiprintf_r>
 8009616:	bf00      	nop
 8009618:	20000150 	.word	0x20000150

0800961c <__ssputs_r>:
 800961c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009620:	688e      	ldr	r6, [r1, #8]
 8009622:	429e      	cmp	r6, r3
 8009624:	4682      	mov	sl, r0
 8009626:	460c      	mov	r4, r1
 8009628:	4690      	mov	r8, r2
 800962a:	4699      	mov	r9, r3
 800962c:	d837      	bhi.n	800969e <__ssputs_r+0x82>
 800962e:	898a      	ldrh	r2, [r1, #12]
 8009630:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009634:	d031      	beq.n	800969a <__ssputs_r+0x7e>
 8009636:	6825      	ldr	r5, [r4, #0]
 8009638:	6909      	ldr	r1, [r1, #16]
 800963a:	1a6f      	subs	r7, r5, r1
 800963c:	6965      	ldr	r5, [r4, #20]
 800963e:	2302      	movs	r3, #2
 8009640:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009644:	fb95 f5f3 	sdiv	r5, r5, r3
 8009648:	f109 0301 	add.w	r3, r9, #1
 800964c:	443b      	add	r3, r7
 800964e:	429d      	cmp	r5, r3
 8009650:	bf38      	it	cc
 8009652:	461d      	movcc	r5, r3
 8009654:	0553      	lsls	r3, r2, #21
 8009656:	d530      	bpl.n	80096ba <__ssputs_r+0x9e>
 8009658:	4629      	mov	r1, r5
 800965a:	f000 fb2b 	bl	8009cb4 <_malloc_r>
 800965e:	4606      	mov	r6, r0
 8009660:	b950      	cbnz	r0, 8009678 <__ssputs_r+0x5c>
 8009662:	230c      	movs	r3, #12
 8009664:	f8ca 3000 	str.w	r3, [sl]
 8009668:	89a3      	ldrh	r3, [r4, #12]
 800966a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800966e:	81a3      	strh	r3, [r4, #12]
 8009670:	f04f 30ff 	mov.w	r0, #4294967295
 8009674:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009678:	463a      	mov	r2, r7
 800967a:	6921      	ldr	r1, [r4, #16]
 800967c:	f000 faa8 	bl	8009bd0 <memcpy>
 8009680:	89a3      	ldrh	r3, [r4, #12]
 8009682:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009686:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800968a:	81a3      	strh	r3, [r4, #12]
 800968c:	6126      	str	r6, [r4, #16]
 800968e:	6165      	str	r5, [r4, #20]
 8009690:	443e      	add	r6, r7
 8009692:	1bed      	subs	r5, r5, r7
 8009694:	6026      	str	r6, [r4, #0]
 8009696:	60a5      	str	r5, [r4, #8]
 8009698:	464e      	mov	r6, r9
 800969a:	454e      	cmp	r6, r9
 800969c:	d900      	bls.n	80096a0 <__ssputs_r+0x84>
 800969e:	464e      	mov	r6, r9
 80096a0:	4632      	mov	r2, r6
 80096a2:	4641      	mov	r1, r8
 80096a4:	6820      	ldr	r0, [r4, #0]
 80096a6:	f000 fa9e 	bl	8009be6 <memmove>
 80096aa:	68a3      	ldr	r3, [r4, #8]
 80096ac:	1b9b      	subs	r3, r3, r6
 80096ae:	60a3      	str	r3, [r4, #8]
 80096b0:	6823      	ldr	r3, [r4, #0]
 80096b2:	441e      	add	r6, r3
 80096b4:	6026      	str	r6, [r4, #0]
 80096b6:	2000      	movs	r0, #0
 80096b8:	e7dc      	b.n	8009674 <__ssputs_r+0x58>
 80096ba:	462a      	mov	r2, r5
 80096bc:	f000 fb54 	bl	8009d68 <_realloc_r>
 80096c0:	4606      	mov	r6, r0
 80096c2:	2800      	cmp	r0, #0
 80096c4:	d1e2      	bne.n	800968c <__ssputs_r+0x70>
 80096c6:	6921      	ldr	r1, [r4, #16]
 80096c8:	4650      	mov	r0, sl
 80096ca:	f000 faa5 	bl	8009c18 <_free_r>
 80096ce:	e7c8      	b.n	8009662 <__ssputs_r+0x46>

080096d0 <_svfiprintf_r>:
 80096d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096d4:	461d      	mov	r5, r3
 80096d6:	898b      	ldrh	r3, [r1, #12]
 80096d8:	061f      	lsls	r7, r3, #24
 80096da:	b09d      	sub	sp, #116	; 0x74
 80096dc:	4680      	mov	r8, r0
 80096de:	460c      	mov	r4, r1
 80096e0:	4616      	mov	r6, r2
 80096e2:	d50f      	bpl.n	8009704 <_svfiprintf_r+0x34>
 80096e4:	690b      	ldr	r3, [r1, #16]
 80096e6:	b96b      	cbnz	r3, 8009704 <_svfiprintf_r+0x34>
 80096e8:	2140      	movs	r1, #64	; 0x40
 80096ea:	f000 fae3 	bl	8009cb4 <_malloc_r>
 80096ee:	6020      	str	r0, [r4, #0]
 80096f0:	6120      	str	r0, [r4, #16]
 80096f2:	b928      	cbnz	r0, 8009700 <_svfiprintf_r+0x30>
 80096f4:	230c      	movs	r3, #12
 80096f6:	f8c8 3000 	str.w	r3, [r8]
 80096fa:	f04f 30ff 	mov.w	r0, #4294967295
 80096fe:	e0c8      	b.n	8009892 <_svfiprintf_r+0x1c2>
 8009700:	2340      	movs	r3, #64	; 0x40
 8009702:	6163      	str	r3, [r4, #20]
 8009704:	2300      	movs	r3, #0
 8009706:	9309      	str	r3, [sp, #36]	; 0x24
 8009708:	2320      	movs	r3, #32
 800970a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800970e:	2330      	movs	r3, #48	; 0x30
 8009710:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009714:	9503      	str	r5, [sp, #12]
 8009716:	f04f 0b01 	mov.w	fp, #1
 800971a:	4637      	mov	r7, r6
 800971c:	463d      	mov	r5, r7
 800971e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8009722:	b10b      	cbz	r3, 8009728 <_svfiprintf_r+0x58>
 8009724:	2b25      	cmp	r3, #37	; 0x25
 8009726:	d13e      	bne.n	80097a6 <_svfiprintf_r+0xd6>
 8009728:	ebb7 0a06 	subs.w	sl, r7, r6
 800972c:	d00b      	beq.n	8009746 <_svfiprintf_r+0x76>
 800972e:	4653      	mov	r3, sl
 8009730:	4632      	mov	r2, r6
 8009732:	4621      	mov	r1, r4
 8009734:	4640      	mov	r0, r8
 8009736:	f7ff ff71 	bl	800961c <__ssputs_r>
 800973a:	3001      	adds	r0, #1
 800973c:	f000 80a4 	beq.w	8009888 <_svfiprintf_r+0x1b8>
 8009740:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009742:	4453      	add	r3, sl
 8009744:	9309      	str	r3, [sp, #36]	; 0x24
 8009746:	783b      	ldrb	r3, [r7, #0]
 8009748:	2b00      	cmp	r3, #0
 800974a:	f000 809d 	beq.w	8009888 <_svfiprintf_r+0x1b8>
 800974e:	2300      	movs	r3, #0
 8009750:	f04f 32ff 	mov.w	r2, #4294967295
 8009754:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009758:	9304      	str	r3, [sp, #16]
 800975a:	9307      	str	r3, [sp, #28]
 800975c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009760:	931a      	str	r3, [sp, #104]	; 0x68
 8009762:	462f      	mov	r7, r5
 8009764:	2205      	movs	r2, #5
 8009766:	f817 1b01 	ldrb.w	r1, [r7], #1
 800976a:	4850      	ldr	r0, [pc, #320]	; (80098ac <_svfiprintf_r+0x1dc>)
 800976c:	f7f6 fd58 	bl	8000220 <memchr>
 8009770:	9b04      	ldr	r3, [sp, #16]
 8009772:	b9d0      	cbnz	r0, 80097aa <_svfiprintf_r+0xda>
 8009774:	06d9      	lsls	r1, r3, #27
 8009776:	bf44      	itt	mi
 8009778:	2220      	movmi	r2, #32
 800977a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800977e:	071a      	lsls	r2, r3, #28
 8009780:	bf44      	itt	mi
 8009782:	222b      	movmi	r2, #43	; 0x2b
 8009784:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009788:	782a      	ldrb	r2, [r5, #0]
 800978a:	2a2a      	cmp	r2, #42	; 0x2a
 800978c:	d015      	beq.n	80097ba <_svfiprintf_r+0xea>
 800978e:	9a07      	ldr	r2, [sp, #28]
 8009790:	462f      	mov	r7, r5
 8009792:	2000      	movs	r0, #0
 8009794:	250a      	movs	r5, #10
 8009796:	4639      	mov	r1, r7
 8009798:	f811 3b01 	ldrb.w	r3, [r1], #1
 800979c:	3b30      	subs	r3, #48	; 0x30
 800979e:	2b09      	cmp	r3, #9
 80097a0:	d94d      	bls.n	800983e <_svfiprintf_r+0x16e>
 80097a2:	b1b8      	cbz	r0, 80097d4 <_svfiprintf_r+0x104>
 80097a4:	e00f      	b.n	80097c6 <_svfiprintf_r+0xf6>
 80097a6:	462f      	mov	r7, r5
 80097a8:	e7b8      	b.n	800971c <_svfiprintf_r+0x4c>
 80097aa:	4a40      	ldr	r2, [pc, #256]	; (80098ac <_svfiprintf_r+0x1dc>)
 80097ac:	1a80      	subs	r0, r0, r2
 80097ae:	fa0b f000 	lsl.w	r0, fp, r0
 80097b2:	4318      	orrs	r0, r3
 80097b4:	9004      	str	r0, [sp, #16]
 80097b6:	463d      	mov	r5, r7
 80097b8:	e7d3      	b.n	8009762 <_svfiprintf_r+0x92>
 80097ba:	9a03      	ldr	r2, [sp, #12]
 80097bc:	1d11      	adds	r1, r2, #4
 80097be:	6812      	ldr	r2, [r2, #0]
 80097c0:	9103      	str	r1, [sp, #12]
 80097c2:	2a00      	cmp	r2, #0
 80097c4:	db01      	blt.n	80097ca <_svfiprintf_r+0xfa>
 80097c6:	9207      	str	r2, [sp, #28]
 80097c8:	e004      	b.n	80097d4 <_svfiprintf_r+0x104>
 80097ca:	4252      	negs	r2, r2
 80097cc:	f043 0302 	orr.w	r3, r3, #2
 80097d0:	9207      	str	r2, [sp, #28]
 80097d2:	9304      	str	r3, [sp, #16]
 80097d4:	783b      	ldrb	r3, [r7, #0]
 80097d6:	2b2e      	cmp	r3, #46	; 0x2e
 80097d8:	d10c      	bne.n	80097f4 <_svfiprintf_r+0x124>
 80097da:	787b      	ldrb	r3, [r7, #1]
 80097dc:	2b2a      	cmp	r3, #42	; 0x2a
 80097de:	d133      	bne.n	8009848 <_svfiprintf_r+0x178>
 80097e0:	9b03      	ldr	r3, [sp, #12]
 80097e2:	1d1a      	adds	r2, r3, #4
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	9203      	str	r2, [sp, #12]
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	bfb8      	it	lt
 80097ec:	f04f 33ff 	movlt.w	r3, #4294967295
 80097f0:	3702      	adds	r7, #2
 80097f2:	9305      	str	r3, [sp, #20]
 80097f4:	4d2e      	ldr	r5, [pc, #184]	; (80098b0 <_svfiprintf_r+0x1e0>)
 80097f6:	7839      	ldrb	r1, [r7, #0]
 80097f8:	2203      	movs	r2, #3
 80097fa:	4628      	mov	r0, r5
 80097fc:	f7f6 fd10 	bl	8000220 <memchr>
 8009800:	b138      	cbz	r0, 8009812 <_svfiprintf_r+0x142>
 8009802:	2340      	movs	r3, #64	; 0x40
 8009804:	1b40      	subs	r0, r0, r5
 8009806:	fa03 f000 	lsl.w	r0, r3, r0
 800980a:	9b04      	ldr	r3, [sp, #16]
 800980c:	4303      	orrs	r3, r0
 800980e:	3701      	adds	r7, #1
 8009810:	9304      	str	r3, [sp, #16]
 8009812:	7839      	ldrb	r1, [r7, #0]
 8009814:	4827      	ldr	r0, [pc, #156]	; (80098b4 <_svfiprintf_r+0x1e4>)
 8009816:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800981a:	2206      	movs	r2, #6
 800981c:	1c7e      	adds	r6, r7, #1
 800981e:	f7f6 fcff 	bl	8000220 <memchr>
 8009822:	2800      	cmp	r0, #0
 8009824:	d038      	beq.n	8009898 <_svfiprintf_r+0x1c8>
 8009826:	4b24      	ldr	r3, [pc, #144]	; (80098b8 <_svfiprintf_r+0x1e8>)
 8009828:	bb13      	cbnz	r3, 8009870 <_svfiprintf_r+0x1a0>
 800982a:	9b03      	ldr	r3, [sp, #12]
 800982c:	3307      	adds	r3, #7
 800982e:	f023 0307 	bic.w	r3, r3, #7
 8009832:	3308      	adds	r3, #8
 8009834:	9303      	str	r3, [sp, #12]
 8009836:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009838:	444b      	add	r3, r9
 800983a:	9309      	str	r3, [sp, #36]	; 0x24
 800983c:	e76d      	b.n	800971a <_svfiprintf_r+0x4a>
 800983e:	fb05 3202 	mla	r2, r5, r2, r3
 8009842:	2001      	movs	r0, #1
 8009844:	460f      	mov	r7, r1
 8009846:	e7a6      	b.n	8009796 <_svfiprintf_r+0xc6>
 8009848:	2300      	movs	r3, #0
 800984a:	3701      	adds	r7, #1
 800984c:	9305      	str	r3, [sp, #20]
 800984e:	4619      	mov	r1, r3
 8009850:	250a      	movs	r5, #10
 8009852:	4638      	mov	r0, r7
 8009854:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009858:	3a30      	subs	r2, #48	; 0x30
 800985a:	2a09      	cmp	r2, #9
 800985c:	d903      	bls.n	8009866 <_svfiprintf_r+0x196>
 800985e:	2b00      	cmp	r3, #0
 8009860:	d0c8      	beq.n	80097f4 <_svfiprintf_r+0x124>
 8009862:	9105      	str	r1, [sp, #20]
 8009864:	e7c6      	b.n	80097f4 <_svfiprintf_r+0x124>
 8009866:	fb05 2101 	mla	r1, r5, r1, r2
 800986a:	2301      	movs	r3, #1
 800986c:	4607      	mov	r7, r0
 800986e:	e7f0      	b.n	8009852 <_svfiprintf_r+0x182>
 8009870:	ab03      	add	r3, sp, #12
 8009872:	9300      	str	r3, [sp, #0]
 8009874:	4622      	mov	r2, r4
 8009876:	4b11      	ldr	r3, [pc, #68]	; (80098bc <_svfiprintf_r+0x1ec>)
 8009878:	a904      	add	r1, sp, #16
 800987a:	4640      	mov	r0, r8
 800987c:	f3af 8000 	nop.w
 8009880:	f1b0 3fff 	cmp.w	r0, #4294967295
 8009884:	4681      	mov	r9, r0
 8009886:	d1d6      	bne.n	8009836 <_svfiprintf_r+0x166>
 8009888:	89a3      	ldrh	r3, [r4, #12]
 800988a:	065b      	lsls	r3, r3, #25
 800988c:	f53f af35 	bmi.w	80096fa <_svfiprintf_r+0x2a>
 8009890:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009892:	b01d      	add	sp, #116	; 0x74
 8009894:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009898:	ab03      	add	r3, sp, #12
 800989a:	9300      	str	r3, [sp, #0]
 800989c:	4622      	mov	r2, r4
 800989e:	4b07      	ldr	r3, [pc, #28]	; (80098bc <_svfiprintf_r+0x1ec>)
 80098a0:	a904      	add	r1, sp, #16
 80098a2:	4640      	mov	r0, r8
 80098a4:	f000 f882 	bl	80099ac <_printf_i>
 80098a8:	e7ea      	b.n	8009880 <_svfiprintf_r+0x1b0>
 80098aa:	bf00      	nop
 80098ac:	08009f18 	.word	0x08009f18
 80098b0:	08009f1e 	.word	0x08009f1e
 80098b4:	08009f22 	.word	0x08009f22
 80098b8:	00000000 	.word	0x00000000
 80098bc:	0800961d 	.word	0x0800961d

080098c0 <_printf_common>:
 80098c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80098c4:	4691      	mov	r9, r2
 80098c6:	461f      	mov	r7, r3
 80098c8:	688a      	ldr	r2, [r1, #8]
 80098ca:	690b      	ldr	r3, [r1, #16]
 80098cc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80098d0:	4293      	cmp	r3, r2
 80098d2:	bfb8      	it	lt
 80098d4:	4613      	movlt	r3, r2
 80098d6:	f8c9 3000 	str.w	r3, [r9]
 80098da:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80098de:	4606      	mov	r6, r0
 80098e0:	460c      	mov	r4, r1
 80098e2:	b112      	cbz	r2, 80098ea <_printf_common+0x2a>
 80098e4:	3301      	adds	r3, #1
 80098e6:	f8c9 3000 	str.w	r3, [r9]
 80098ea:	6823      	ldr	r3, [r4, #0]
 80098ec:	0699      	lsls	r1, r3, #26
 80098ee:	bf42      	ittt	mi
 80098f0:	f8d9 3000 	ldrmi.w	r3, [r9]
 80098f4:	3302      	addmi	r3, #2
 80098f6:	f8c9 3000 	strmi.w	r3, [r9]
 80098fa:	6825      	ldr	r5, [r4, #0]
 80098fc:	f015 0506 	ands.w	r5, r5, #6
 8009900:	d107      	bne.n	8009912 <_printf_common+0x52>
 8009902:	f104 0a19 	add.w	sl, r4, #25
 8009906:	68e3      	ldr	r3, [r4, #12]
 8009908:	f8d9 2000 	ldr.w	r2, [r9]
 800990c:	1a9b      	subs	r3, r3, r2
 800990e:	42ab      	cmp	r3, r5
 8009910:	dc28      	bgt.n	8009964 <_printf_common+0xa4>
 8009912:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8009916:	6822      	ldr	r2, [r4, #0]
 8009918:	3300      	adds	r3, #0
 800991a:	bf18      	it	ne
 800991c:	2301      	movne	r3, #1
 800991e:	0692      	lsls	r2, r2, #26
 8009920:	d42d      	bmi.n	800997e <_printf_common+0xbe>
 8009922:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009926:	4639      	mov	r1, r7
 8009928:	4630      	mov	r0, r6
 800992a:	47c0      	blx	r8
 800992c:	3001      	adds	r0, #1
 800992e:	d020      	beq.n	8009972 <_printf_common+0xb2>
 8009930:	6823      	ldr	r3, [r4, #0]
 8009932:	68e5      	ldr	r5, [r4, #12]
 8009934:	f8d9 2000 	ldr.w	r2, [r9]
 8009938:	f003 0306 	and.w	r3, r3, #6
 800993c:	2b04      	cmp	r3, #4
 800993e:	bf08      	it	eq
 8009940:	1aad      	subeq	r5, r5, r2
 8009942:	68a3      	ldr	r3, [r4, #8]
 8009944:	6922      	ldr	r2, [r4, #16]
 8009946:	bf0c      	ite	eq
 8009948:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800994c:	2500      	movne	r5, #0
 800994e:	4293      	cmp	r3, r2
 8009950:	bfc4      	itt	gt
 8009952:	1a9b      	subgt	r3, r3, r2
 8009954:	18ed      	addgt	r5, r5, r3
 8009956:	f04f 0900 	mov.w	r9, #0
 800995a:	341a      	adds	r4, #26
 800995c:	454d      	cmp	r5, r9
 800995e:	d11a      	bne.n	8009996 <_printf_common+0xd6>
 8009960:	2000      	movs	r0, #0
 8009962:	e008      	b.n	8009976 <_printf_common+0xb6>
 8009964:	2301      	movs	r3, #1
 8009966:	4652      	mov	r2, sl
 8009968:	4639      	mov	r1, r7
 800996a:	4630      	mov	r0, r6
 800996c:	47c0      	blx	r8
 800996e:	3001      	adds	r0, #1
 8009970:	d103      	bne.n	800997a <_printf_common+0xba>
 8009972:	f04f 30ff 	mov.w	r0, #4294967295
 8009976:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800997a:	3501      	adds	r5, #1
 800997c:	e7c3      	b.n	8009906 <_printf_common+0x46>
 800997e:	18e1      	adds	r1, r4, r3
 8009980:	1c5a      	adds	r2, r3, #1
 8009982:	2030      	movs	r0, #48	; 0x30
 8009984:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009988:	4422      	add	r2, r4
 800998a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800998e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009992:	3302      	adds	r3, #2
 8009994:	e7c5      	b.n	8009922 <_printf_common+0x62>
 8009996:	2301      	movs	r3, #1
 8009998:	4622      	mov	r2, r4
 800999a:	4639      	mov	r1, r7
 800999c:	4630      	mov	r0, r6
 800999e:	47c0      	blx	r8
 80099a0:	3001      	adds	r0, #1
 80099a2:	d0e6      	beq.n	8009972 <_printf_common+0xb2>
 80099a4:	f109 0901 	add.w	r9, r9, #1
 80099a8:	e7d8      	b.n	800995c <_printf_common+0x9c>
	...

080099ac <_printf_i>:
 80099ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80099b0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80099b4:	460c      	mov	r4, r1
 80099b6:	7e09      	ldrb	r1, [r1, #24]
 80099b8:	b085      	sub	sp, #20
 80099ba:	296e      	cmp	r1, #110	; 0x6e
 80099bc:	4617      	mov	r7, r2
 80099be:	4606      	mov	r6, r0
 80099c0:	4698      	mov	r8, r3
 80099c2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80099c4:	f000 80b3 	beq.w	8009b2e <_printf_i+0x182>
 80099c8:	d822      	bhi.n	8009a10 <_printf_i+0x64>
 80099ca:	2963      	cmp	r1, #99	; 0x63
 80099cc:	d036      	beq.n	8009a3c <_printf_i+0x90>
 80099ce:	d80a      	bhi.n	80099e6 <_printf_i+0x3a>
 80099d0:	2900      	cmp	r1, #0
 80099d2:	f000 80b9 	beq.w	8009b48 <_printf_i+0x19c>
 80099d6:	2958      	cmp	r1, #88	; 0x58
 80099d8:	f000 8083 	beq.w	8009ae2 <_printf_i+0x136>
 80099dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80099e0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80099e4:	e032      	b.n	8009a4c <_printf_i+0xa0>
 80099e6:	2964      	cmp	r1, #100	; 0x64
 80099e8:	d001      	beq.n	80099ee <_printf_i+0x42>
 80099ea:	2969      	cmp	r1, #105	; 0x69
 80099ec:	d1f6      	bne.n	80099dc <_printf_i+0x30>
 80099ee:	6820      	ldr	r0, [r4, #0]
 80099f0:	6813      	ldr	r3, [r2, #0]
 80099f2:	0605      	lsls	r5, r0, #24
 80099f4:	f103 0104 	add.w	r1, r3, #4
 80099f8:	d52a      	bpl.n	8009a50 <_printf_i+0xa4>
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	6011      	str	r1, [r2, #0]
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	da03      	bge.n	8009a0a <_printf_i+0x5e>
 8009a02:	222d      	movs	r2, #45	; 0x2d
 8009a04:	425b      	negs	r3, r3
 8009a06:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8009a0a:	486f      	ldr	r0, [pc, #444]	; (8009bc8 <_printf_i+0x21c>)
 8009a0c:	220a      	movs	r2, #10
 8009a0e:	e039      	b.n	8009a84 <_printf_i+0xd8>
 8009a10:	2973      	cmp	r1, #115	; 0x73
 8009a12:	f000 809d 	beq.w	8009b50 <_printf_i+0x1a4>
 8009a16:	d808      	bhi.n	8009a2a <_printf_i+0x7e>
 8009a18:	296f      	cmp	r1, #111	; 0x6f
 8009a1a:	d020      	beq.n	8009a5e <_printf_i+0xb2>
 8009a1c:	2970      	cmp	r1, #112	; 0x70
 8009a1e:	d1dd      	bne.n	80099dc <_printf_i+0x30>
 8009a20:	6823      	ldr	r3, [r4, #0]
 8009a22:	f043 0320 	orr.w	r3, r3, #32
 8009a26:	6023      	str	r3, [r4, #0]
 8009a28:	e003      	b.n	8009a32 <_printf_i+0x86>
 8009a2a:	2975      	cmp	r1, #117	; 0x75
 8009a2c:	d017      	beq.n	8009a5e <_printf_i+0xb2>
 8009a2e:	2978      	cmp	r1, #120	; 0x78
 8009a30:	d1d4      	bne.n	80099dc <_printf_i+0x30>
 8009a32:	2378      	movs	r3, #120	; 0x78
 8009a34:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009a38:	4864      	ldr	r0, [pc, #400]	; (8009bcc <_printf_i+0x220>)
 8009a3a:	e055      	b.n	8009ae8 <_printf_i+0x13c>
 8009a3c:	6813      	ldr	r3, [r2, #0]
 8009a3e:	1d19      	adds	r1, r3, #4
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	6011      	str	r1, [r2, #0]
 8009a44:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009a48:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009a4c:	2301      	movs	r3, #1
 8009a4e:	e08c      	b.n	8009b6a <_printf_i+0x1be>
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	6011      	str	r1, [r2, #0]
 8009a54:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009a58:	bf18      	it	ne
 8009a5a:	b21b      	sxthne	r3, r3
 8009a5c:	e7cf      	b.n	80099fe <_printf_i+0x52>
 8009a5e:	6813      	ldr	r3, [r2, #0]
 8009a60:	6825      	ldr	r5, [r4, #0]
 8009a62:	1d18      	adds	r0, r3, #4
 8009a64:	6010      	str	r0, [r2, #0]
 8009a66:	0628      	lsls	r0, r5, #24
 8009a68:	d501      	bpl.n	8009a6e <_printf_i+0xc2>
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	e002      	b.n	8009a74 <_printf_i+0xc8>
 8009a6e:	0668      	lsls	r0, r5, #25
 8009a70:	d5fb      	bpl.n	8009a6a <_printf_i+0xbe>
 8009a72:	881b      	ldrh	r3, [r3, #0]
 8009a74:	4854      	ldr	r0, [pc, #336]	; (8009bc8 <_printf_i+0x21c>)
 8009a76:	296f      	cmp	r1, #111	; 0x6f
 8009a78:	bf14      	ite	ne
 8009a7a:	220a      	movne	r2, #10
 8009a7c:	2208      	moveq	r2, #8
 8009a7e:	2100      	movs	r1, #0
 8009a80:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009a84:	6865      	ldr	r5, [r4, #4]
 8009a86:	60a5      	str	r5, [r4, #8]
 8009a88:	2d00      	cmp	r5, #0
 8009a8a:	f2c0 8095 	blt.w	8009bb8 <_printf_i+0x20c>
 8009a8e:	6821      	ldr	r1, [r4, #0]
 8009a90:	f021 0104 	bic.w	r1, r1, #4
 8009a94:	6021      	str	r1, [r4, #0]
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d13d      	bne.n	8009b16 <_printf_i+0x16a>
 8009a9a:	2d00      	cmp	r5, #0
 8009a9c:	f040 808e 	bne.w	8009bbc <_printf_i+0x210>
 8009aa0:	4665      	mov	r5, ip
 8009aa2:	2a08      	cmp	r2, #8
 8009aa4:	d10b      	bne.n	8009abe <_printf_i+0x112>
 8009aa6:	6823      	ldr	r3, [r4, #0]
 8009aa8:	07db      	lsls	r3, r3, #31
 8009aaa:	d508      	bpl.n	8009abe <_printf_i+0x112>
 8009aac:	6923      	ldr	r3, [r4, #16]
 8009aae:	6862      	ldr	r2, [r4, #4]
 8009ab0:	429a      	cmp	r2, r3
 8009ab2:	bfde      	ittt	le
 8009ab4:	2330      	movle	r3, #48	; 0x30
 8009ab6:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009aba:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009abe:	ebac 0305 	sub.w	r3, ip, r5
 8009ac2:	6123      	str	r3, [r4, #16]
 8009ac4:	f8cd 8000 	str.w	r8, [sp]
 8009ac8:	463b      	mov	r3, r7
 8009aca:	aa03      	add	r2, sp, #12
 8009acc:	4621      	mov	r1, r4
 8009ace:	4630      	mov	r0, r6
 8009ad0:	f7ff fef6 	bl	80098c0 <_printf_common>
 8009ad4:	3001      	adds	r0, #1
 8009ad6:	d14d      	bne.n	8009b74 <_printf_i+0x1c8>
 8009ad8:	f04f 30ff 	mov.w	r0, #4294967295
 8009adc:	b005      	add	sp, #20
 8009ade:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009ae2:	4839      	ldr	r0, [pc, #228]	; (8009bc8 <_printf_i+0x21c>)
 8009ae4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8009ae8:	6813      	ldr	r3, [r2, #0]
 8009aea:	6821      	ldr	r1, [r4, #0]
 8009aec:	1d1d      	adds	r5, r3, #4
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	6015      	str	r5, [r2, #0]
 8009af2:	060a      	lsls	r2, r1, #24
 8009af4:	d50b      	bpl.n	8009b0e <_printf_i+0x162>
 8009af6:	07ca      	lsls	r2, r1, #31
 8009af8:	bf44      	itt	mi
 8009afa:	f041 0120 	orrmi.w	r1, r1, #32
 8009afe:	6021      	strmi	r1, [r4, #0]
 8009b00:	b91b      	cbnz	r3, 8009b0a <_printf_i+0x15e>
 8009b02:	6822      	ldr	r2, [r4, #0]
 8009b04:	f022 0220 	bic.w	r2, r2, #32
 8009b08:	6022      	str	r2, [r4, #0]
 8009b0a:	2210      	movs	r2, #16
 8009b0c:	e7b7      	b.n	8009a7e <_printf_i+0xd2>
 8009b0e:	064d      	lsls	r5, r1, #25
 8009b10:	bf48      	it	mi
 8009b12:	b29b      	uxthmi	r3, r3
 8009b14:	e7ef      	b.n	8009af6 <_printf_i+0x14a>
 8009b16:	4665      	mov	r5, ip
 8009b18:	fbb3 f1f2 	udiv	r1, r3, r2
 8009b1c:	fb02 3311 	mls	r3, r2, r1, r3
 8009b20:	5cc3      	ldrb	r3, [r0, r3]
 8009b22:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8009b26:	460b      	mov	r3, r1
 8009b28:	2900      	cmp	r1, #0
 8009b2a:	d1f5      	bne.n	8009b18 <_printf_i+0x16c>
 8009b2c:	e7b9      	b.n	8009aa2 <_printf_i+0xf6>
 8009b2e:	6813      	ldr	r3, [r2, #0]
 8009b30:	6825      	ldr	r5, [r4, #0]
 8009b32:	6961      	ldr	r1, [r4, #20]
 8009b34:	1d18      	adds	r0, r3, #4
 8009b36:	6010      	str	r0, [r2, #0]
 8009b38:	0628      	lsls	r0, r5, #24
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	d501      	bpl.n	8009b42 <_printf_i+0x196>
 8009b3e:	6019      	str	r1, [r3, #0]
 8009b40:	e002      	b.n	8009b48 <_printf_i+0x19c>
 8009b42:	066a      	lsls	r2, r5, #25
 8009b44:	d5fb      	bpl.n	8009b3e <_printf_i+0x192>
 8009b46:	8019      	strh	r1, [r3, #0]
 8009b48:	2300      	movs	r3, #0
 8009b4a:	6123      	str	r3, [r4, #16]
 8009b4c:	4665      	mov	r5, ip
 8009b4e:	e7b9      	b.n	8009ac4 <_printf_i+0x118>
 8009b50:	6813      	ldr	r3, [r2, #0]
 8009b52:	1d19      	adds	r1, r3, #4
 8009b54:	6011      	str	r1, [r2, #0]
 8009b56:	681d      	ldr	r5, [r3, #0]
 8009b58:	6862      	ldr	r2, [r4, #4]
 8009b5a:	2100      	movs	r1, #0
 8009b5c:	4628      	mov	r0, r5
 8009b5e:	f7f6 fb5f 	bl	8000220 <memchr>
 8009b62:	b108      	cbz	r0, 8009b68 <_printf_i+0x1bc>
 8009b64:	1b40      	subs	r0, r0, r5
 8009b66:	6060      	str	r0, [r4, #4]
 8009b68:	6863      	ldr	r3, [r4, #4]
 8009b6a:	6123      	str	r3, [r4, #16]
 8009b6c:	2300      	movs	r3, #0
 8009b6e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009b72:	e7a7      	b.n	8009ac4 <_printf_i+0x118>
 8009b74:	6923      	ldr	r3, [r4, #16]
 8009b76:	462a      	mov	r2, r5
 8009b78:	4639      	mov	r1, r7
 8009b7a:	4630      	mov	r0, r6
 8009b7c:	47c0      	blx	r8
 8009b7e:	3001      	adds	r0, #1
 8009b80:	d0aa      	beq.n	8009ad8 <_printf_i+0x12c>
 8009b82:	6823      	ldr	r3, [r4, #0]
 8009b84:	079b      	lsls	r3, r3, #30
 8009b86:	d413      	bmi.n	8009bb0 <_printf_i+0x204>
 8009b88:	68e0      	ldr	r0, [r4, #12]
 8009b8a:	9b03      	ldr	r3, [sp, #12]
 8009b8c:	4298      	cmp	r0, r3
 8009b8e:	bfb8      	it	lt
 8009b90:	4618      	movlt	r0, r3
 8009b92:	e7a3      	b.n	8009adc <_printf_i+0x130>
 8009b94:	2301      	movs	r3, #1
 8009b96:	464a      	mov	r2, r9
 8009b98:	4639      	mov	r1, r7
 8009b9a:	4630      	mov	r0, r6
 8009b9c:	47c0      	blx	r8
 8009b9e:	3001      	adds	r0, #1
 8009ba0:	d09a      	beq.n	8009ad8 <_printf_i+0x12c>
 8009ba2:	3501      	adds	r5, #1
 8009ba4:	68e3      	ldr	r3, [r4, #12]
 8009ba6:	9a03      	ldr	r2, [sp, #12]
 8009ba8:	1a9b      	subs	r3, r3, r2
 8009baa:	42ab      	cmp	r3, r5
 8009bac:	dcf2      	bgt.n	8009b94 <_printf_i+0x1e8>
 8009bae:	e7eb      	b.n	8009b88 <_printf_i+0x1dc>
 8009bb0:	2500      	movs	r5, #0
 8009bb2:	f104 0919 	add.w	r9, r4, #25
 8009bb6:	e7f5      	b.n	8009ba4 <_printf_i+0x1f8>
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d1ac      	bne.n	8009b16 <_printf_i+0x16a>
 8009bbc:	7803      	ldrb	r3, [r0, #0]
 8009bbe:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009bc2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009bc6:	e76c      	b.n	8009aa2 <_printf_i+0xf6>
 8009bc8:	08009f29 	.word	0x08009f29
 8009bcc:	08009f3a 	.word	0x08009f3a

08009bd0 <memcpy>:
 8009bd0:	b510      	push	{r4, lr}
 8009bd2:	1e43      	subs	r3, r0, #1
 8009bd4:	440a      	add	r2, r1
 8009bd6:	4291      	cmp	r1, r2
 8009bd8:	d100      	bne.n	8009bdc <memcpy+0xc>
 8009bda:	bd10      	pop	{r4, pc}
 8009bdc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009be0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009be4:	e7f7      	b.n	8009bd6 <memcpy+0x6>

08009be6 <memmove>:
 8009be6:	4288      	cmp	r0, r1
 8009be8:	b510      	push	{r4, lr}
 8009bea:	eb01 0302 	add.w	r3, r1, r2
 8009bee:	d807      	bhi.n	8009c00 <memmove+0x1a>
 8009bf0:	1e42      	subs	r2, r0, #1
 8009bf2:	4299      	cmp	r1, r3
 8009bf4:	d00a      	beq.n	8009c0c <memmove+0x26>
 8009bf6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009bfa:	f802 4f01 	strb.w	r4, [r2, #1]!
 8009bfe:	e7f8      	b.n	8009bf2 <memmove+0xc>
 8009c00:	4283      	cmp	r3, r0
 8009c02:	d9f5      	bls.n	8009bf0 <memmove+0xa>
 8009c04:	1881      	adds	r1, r0, r2
 8009c06:	1ad2      	subs	r2, r2, r3
 8009c08:	42d3      	cmn	r3, r2
 8009c0a:	d100      	bne.n	8009c0e <memmove+0x28>
 8009c0c:	bd10      	pop	{r4, pc}
 8009c0e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009c12:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8009c16:	e7f7      	b.n	8009c08 <memmove+0x22>

08009c18 <_free_r>:
 8009c18:	b538      	push	{r3, r4, r5, lr}
 8009c1a:	4605      	mov	r5, r0
 8009c1c:	2900      	cmp	r1, #0
 8009c1e:	d045      	beq.n	8009cac <_free_r+0x94>
 8009c20:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009c24:	1f0c      	subs	r4, r1, #4
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	bfb8      	it	lt
 8009c2a:	18e4      	addlt	r4, r4, r3
 8009c2c:	f000 f8d2 	bl	8009dd4 <__malloc_lock>
 8009c30:	4a1f      	ldr	r2, [pc, #124]	; (8009cb0 <_free_r+0x98>)
 8009c32:	6813      	ldr	r3, [r2, #0]
 8009c34:	4610      	mov	r0, r2
 8009c36:	b933      	cbnz	r3, 8009c46 <_free_r+0x2e>
 8009c38:	6063      	str	r3, [r4, #4]
 8009c3a:	6014      	str	r4, [r2, #0]
 8009c3c:	4628      	mov	r0, r5
 8009c3e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009c42:	f000 b8c8 	b.w	8009dd6 <__malloc_unlock>
 8009c46:	42a3      	cmp	r3, r4
 8009c48:	d90c      	bls.n	8009c64 <_free_r+0x4c>
 8009c4a:	6821      	ldr	r1, [r4, #0]
 8009c4c:	1862      	adds	r2, r4, r1
 8009c4e:	4293      	cmp	r3, r2
 8009c50:	bf04      	itt	eq
 8009c52:	681a      	ldreq	r2, [r3, #0]
 8009c54:	685b      	ldreq	r3, [r3, #4]
 8009c56:	6063      	str	r3, [r4, #4]
 8009c58:	bf04      	itt	eq
 8009c5a:	1852      	addeq	r2, r2, r1
 8009c5c:	6022      	streq	r2, [r4, #0]
 8009c5e:	6004      	str	r4, [r0, #0]
 8009c60:	e7ec      	b.n	8009c3c <_free_r+0x24>
 8009c62:	4613      	mov	r3, r2
 8009c64:	685a      	ldr	r2, [r3, #4]
 8009c66:	b10a      	cbz	r2, 8009c6c <_free_r+0x54>
 8009c68:	42a2      	cmp	r2, r4
 8009c6a:	d9fa      	bls.n	8009c62 <_free_r+0x4a>
 8009c6c:	6819      	ldr	r1, [r3, #0]
 8009c6e:	1858      	adds	r0, r3, r1
 8009c70:	42a0      	cmp	r0, r4
 8009c72:	d10b      	bne.n	8009c8c <_free_r+0x74>
 8009c74:	6820      	ldr	r0, [r4, #0]
 8009c76:	4401      	add	r1, r0
 8009c78:	1858      	adds	r0, r3, r1
 8009c7a:	4282      	cmp	r2, r0
 8009c7c:	6019      	str	r1, [r3, #0]
 8009c7e:	d1dd      	bne.n	8009c3c <_free_r+0x24>
 8009c80:	6810      	ldr	r0, [r2, #0]
 8009c82:	6852      	ldr	r2, [r2, #4]
 8009c84:	605a      	str	r2, [r3, #4]
 8009c86:	4401      	add	r1, r0
 8009c88:	6019      	str	r1, [r3, #0]
 8009c8a:	e7d7      	b.n	8009c3c <_free_r+0x24>
 8009c8c:	d902      	bls.n	8009c94 <_free_r+0x7c>
 8009c8e:	230c      	movs	r3, #12
 8009c90:	602b      	str	r3, [r5, #0]
 8009c92:	e7d3      	b.n	8009c3c <_free_r+0x24>
 8009c94:	6820      	ldr	r0, [r4, #0]
 8009c96:	1821      	adds	r1, r4, r0
 8009c98:	428a      	cmp	r2, r1
 8009c9a:	bf04      	itt	eq
 8009c9c:	6811      	ldreq	r1, [r2, #0]
 8009c9e:	6852      	ldreq	r2, [r2, #4]
 8009ca0:	6062      	str	r2, [r4, #4]
 8009ca2:	bf04      	itt	eq
 8009ca4:	1809      	addeq	r1, r1, r0
 8009ca6:	6021      	streq	r1, [r4, #0]
 8009ca8:	605c      	str	r4, [r3, #4]
 8009caa:	e7c7      	b.n	8009c3c <_free_r+0x24>
 8009cac:	bd38      	pop	{r3, r4, r5, pc}
 8009cae:	bf00      	nop
 8009cb0:	200001e8 	.word	0x200001e8

08009cb4 <_malloc_r>:
 8009cb4:	b570      	push	{r4, r5, r6, lr}
 8009cb6:	1ccd      	adds	r5, r1, #3
 8009cb8:	f025 0503 	bic.w	r5, r5, #3
 8009cbc:	3508      	adds	r5, #8
 8009cbe:	2d0c      	cmp	r5, #12
 8009cc0:	bf38      	it	cc
 8009cc2:	250c      	movcc	r5, #12
 8009cc4:	2d00      	cmp	r5, #0
 8009cc6:	4606      	mov	r6, r0
 8009cc8:	db01      	blt.n	8009cce <_malloc_r+0x1a>
 8009cca:	42a9      	cmp	r1, r5
 8009ccc:	d903      	bls.n	8009cd6 <_malloc_r+0x22>
 8009cce:	230c      	movs	r3, #12
 8009cd0:	6033      	str	r3, [r6, #0]
 8009cd2:	2000      	movs	r0, #0
 8009cd4:	bd70      	pop	{r4, r5, r6, pc}
 8009cd6:	f000 f87d 	bl	8009dd4 <__malloc_lock>
 8009cda:	4a21      	ldr	r2, [pc, #132]	; (8009d60 <_malloc_r+0xac>)
 8009cdc:	6814      	ldr	r4, [r2, #0]
 8009cde:	4621      	mov	r1, r4
 8009ce0:	b991      	cbnz	r1, 8009d08 <_malloc_r+0x54>
 8009ce2:	4c20      	ldr	r4, [pc, #128]	; (8009d64 <_malloc_r+0xb0>)
 8009ce4:	6823      	ldr	r3, [r4, #0]
 8009ce6:	b91b      	cbnz	r3, 8009cf0 <_malloc_r+0x3c>
 8009ce8:	4630      	mov	r0, r6
 8009cea:	f000 f863 	bl	8009db4 <_sbrk_r>
 8009cee:	6020      	str	r0, [r4, #0]
 8009cf0:	4629      	mov	r1, r5
 8009cf2:	4630      	mov	r0, r6
 8009cf4:	f000 f85e 	bl	8009db4 <_sbrk_r>
 8009cf8:	1c43      	adds	r3, r0, #1
 8009cfa:	d124      	bne.n	8009d46 <_malloc_r+0x92>
 8009cfc:	230c      	movs	r3, #12
 8009cfe:	6033      	str	r3, [r6, #0]
 8009d00:	4630      	mov	r0, r6
 8009d02:	f000 f868 	bl	8009dd6 <__malloc_unlock>
 8009d06:	e7e4      	b.n	8009cd2 <_malloc_r+0x1e>
 8009d08:	680b      	ldr	r3, [r1, #0]
 8009d0a:	1b5b      	subs	r3, r3, r5
 8009d0c:	d418      	bmi.n	8009d40 <_malloc_r+0x8c>
 8009d0e:	2b0b      	cmp	r3, #11
 8009d10:	d90f      	bls.n	8009d32 <_malloc_r+0x7e>
 8009d12:	600b      	str	r3, [r1, #0]
 8009d14:	50cd      	str	r5, [r1, r3]
 8009d16:	18cc      	adds	r4, r1, r3
 8009d18:	4630      	mov	r0, r6
 8009d1a:	f000 f85c 	bl	8009dd6 <__malloc_unlock>
 8009d1e:	f104 000b 	add.w	r0, r4, #11
 8009d22:	1d23      	adds	r3, r4, #4
 8009d24:	f020 0007 	bic.w	r0, r0, #7
 8009d28:	1ac3      	subs	r3, r0, r3
 8009d2a:	d0d3      	beq.n	8009cd4 <_malloc_r+0x20>
 8009d2c:	425a      	negs	r2, r3
 8009d2e:	50e2      	str	r2, [r4, r3]
 8009d30:	e7d0      	b.n	8009cd4 <_malloc_r+0x20>
 8009d32:	428c      	cmp	r4, r1
 8009d34:	684b      	ldr	r3, [r1, #4]
 8009d36:	bf16      	itet	ne
 8009d38:	6063      	strne	r3, [r4, #4]
 8009d3a:	6013      	streq	r3, [r2, #0]
 8009d3c:	460c      	movne	r4, r1
 8009d3e:	e7eb      	b.n	8009d18 <_malloc_r+0x64>
 8009d40:	460c      	mov	r4, r1
 8009d42:	6849      	ldr	r1, [r1, #4]
 8009d44:	e7cc      	b.n	8009ce0 <_malloc_r+0x2c>
 8009d46:	1cc4      	adds	r4, r0, #3
 8009d48:	f024 0403 	bic.w	r4, r4, #3
 8009d4c:	42a0      	cmp	r0, r4
 8009d4e:	d005      	beq.n	8009d5c <_malloc_r+0xa8>
 8009d50:	1a21      	subs	r1, r4, r0
 8009d52:	4630      	mov	r0, r6
 8009d54:	f000 f82e 	bl	8009db4 <_sbrk_r>
 8009d58:	3001      	adds	r0, #1
 8009d5a:	d0cf      	beq.n	8009cfc <_malloc_r+0x48>
 8009d5c:	6025      	str	r5, [r4, #0]
 8009d5e:	e7db      	b.n	8009d18 <_malloc_r+0x64>
 8009d60:	200001e8 	.word	0x200001e8
 8009d64:	200001ec 	.word	0x200001ec

08009d68 <_realloc_r>:
 8009d68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d6a:	4607      	mov	r7, r0
 8009d6c:	4614      	mov	r4, r2
 8009d6e:	460e      	mov	r6, r1
 8009d70:	b921      	cbnz	r1, 8009d7c <_realloc_r+0x14>
 8009d72:	4611      	mov	r1, r2
 8009d74:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009d78:	f7ff bf9c 	b.w	8009cb4 <_malloc_r>
 8009d7c:	b922      	cbnz	r2, 8009d88 <_realloc_r+0x20>
 8009d7e:	f7ff ff4b 	bl	8009c18 <_free_r>
 8009d82:	4625      	mov	r5, r4
 8009d84:	4628      	mov	r0, r5
 8009d86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009d88:	f000 f826 	bl	8009dd8 <_malloc_usable_size_r>
 8009d8c:	42a0      	cmp	r0, r4
 8009d8e:	d20f      	bcs.n	8009db0 <_realloc_r+0x48>
 8009d90:	4621      	mov	r1, r4
 8009d92:	4638      	mov	r0, r7
 8009d94:	f7ff ff8e 	bl	8009cb4 <_malloc_r>
 8009d98:	4605      	mov	r5, r0
 8009d9a:	2800      	cmp	r0, #0
 8009d9c:	d0f2      	beq.n	8009d84 <_realloc_r+0x1c>
 8009d9e:	4631      	mov	r1, r6
 8009da0:	4622      	mov	r2, r4
 8009da2:	f7ff ff15 	bl	8009bd0 <memcpy>
 8009da6:	4631      	mov	r1, r6
 8009da8:	4638      	mov	r0, r7
 8009daa:	f7ff ff35 	bl	8009c18 <_free_r>
 8009dae:	e7e9      	b.n	8009d84 <_realloc_r+0x1c>
 8009db0:	4635      	mov	r5, r6
 8009db2:	e7e7      	b.n	8009d84 <_realloc_r+0x1c>

08009db4 <_sbrk_r>:
 8009db4:	b538      	push	{r3, r4, r5, lr}
 8009db6:	4c06      	ldr	r4, [pc, #24]	; (8009dd0 <_sbrk_r+0x1c>)
 8009db8:	2300      	movs	r3, #0
 8009dba:	4605      	mov	r5, r0
 8009dbc:	4608      	mov	r0, r1
 8009dbe:	6023      	str	r3, [r4, #0]
 8009dc0:	f7f9 fa7c 	bl	80032bc <_sbrk>
 8009dc4:	1c43      	adds	r3, r0, #1
 8009dc6:	d102      	bne.n	8009dce <_sbrk_r+0x1a>
 8009dc8:	6823      	ldr	r3, [r4, #0]
 8009dca:	b103      	cbz	r3, 8009dce <_sbrk_r+0x1a>
 8009dcc:	602b      	str	r3, [r5, #0]
 8009dce:	bd38      	pop	{r3, r4, r5, pc}
 8009dd0:	20000540 	.word	0x20000540

08009dd4 <__malloc_lock>:
 8009dd4:	4770      	bx	lr

08009dd6 <__malloc_unlock>:
 8009dd6:	4770      	bx	lr

08009dd8 <_malloc_usable_size_r>:
 8009dd8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009ddc:	1f18      	subs	r0, r3, #4
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	bfbc      	itt	lt
 8009de2:	580b      	ldrlt	r3, [r1, r0]
 8009de4:	18c0      	addlt	r0, r0, r3
 8009de6:	4770      	bx	lr

08009de8 <_init>:
 8009de8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009dea:	bf00      	nop
 8009dec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009dee:	bc08      	pop	{r3}
 8009df0:	469e      	mov	lr, r3
 8009df2:	4770      	bx	lr

08009df4 <_fini>:
 8009df4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009df6:	bf00      	nop
 8009df8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009dfa:	bc08      	pop	{r3}
 8009dfc:	469e      	mov	lr, r3
 8009dfe:	4770      	bx	lr
